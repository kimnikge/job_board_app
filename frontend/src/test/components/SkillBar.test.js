/**
 * –¢–µ—Å—Ç—ã –¥–ª—è SkillBar –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 * –ü–æ–∫—Ä—ã–≤–∞–µ—Ç props, —Ü–≤–µ—Ç–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏, –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
 */

import { describe, it, expect } from 'vitest'
import { mount } from '@vue/test-utils'
import SkillBar from '@/components/profile/SkillBar.vue'

describe('SkillBar', () => {
  const mockSkill = {
    id: '1',
    name: '–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –≥–æ—Ä—è—á–∏—Ö –±–ª—é–¥',
    category: 'kitchen',
    base_level: 75,
    calculated_level: 85,
    updated_at: '2025-08-10T10:00:00Z'
  }

  it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–≤—ã–∫–µ', () => {
    const wrapper = mount(SkillBar, {
      props: { skill: mockSkill }
    })

    expect(wrapper.find('.skill-name').text()).toBe(mockSkill.name)
    expect(wrapper.find('.skill-level').text()).toBe('85/100')
  })

  it('–ø—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ü–≤–µ—Ç–æ–≤–æ–π –∫–ª–∞—Å—Å –¥–ª—è —É—Ä–æ–≤–Ω—è', () => {
    // –¢–µ—Å—Ç –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è (71-100)
    const wrapper = mount(SkillBar, {
      props: { skill: mockSkill }
    })
    
    expect(wrapper.find('.skill-fill').classes()).toContain('skill-expert')
  })

  it('–ø—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ü–≤–µ—Ç–æ–≤–æ–π –∫–ª–∞—Å—Å –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è', () => {
    const beginnerSkill = { ...mockSkill, calculated_level: 25 }
    const wrapper = mount(SkillBar, {
      props: { skill: beginnerSkill }
    })
    
    expect(wrapper.find('.skill-fill').classes()).toContain('skill-beginner')
  })

  it('–ø—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ü–≤–µ—Ç–æ–≤–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è', () => {
    const intermediateSkill = { ...mockSkill, calculated_level: 55 }
    const wrapper = mount(SkillBar, {
      props: { skill: intermediateSkill }
    })
    
    expect(wrapper.find('.skill-fill').classes()).toContain('skill-intermediate')
  })

  it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π', () => {
    const wrapper = mount(SkillBar, {
      props: { skill: mockSkill }
    })
    
    const progressBar = wrapper.find('.skill-fill')
    expect(progressBar.attributes('style')).toContain('width: 85%')
  })

  it('–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±—É—Å—Ç –æ—Ç –±–µ–π–¥–∂–µ–π –µ—Å–ª–∏ calculated_level > base_level', () => {
    const wrapper = mount(SkillBar, {
      props: { skill: mockSkill }
    })
    
    const boost = wrapper.find('.skill-boost')
    expect(boost.exists()).toBe(true)
    expect(boost.text()).toBe('+10 –æ—Ç –±–µ–π–¥–∂–µ–π')
  })

  it('–Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±—É—Å—Ç –µ—Å–ª–∏ calculated_level === base_level', () => {
    const noBoostSkill = { ...mockSkill, calculated_level: 75 }
    const wrapper = mount(SkillBar, {
      props: { skill: noBoostSkill }
    })
    
    expect(wrapper.find('.skill-boost').exists()).toBe(false)
  })

  it('–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–∫–æ–Ω–∫—É –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', () => {
    const wrapper = mount(SkillBar, {
      props: { skill: mockSkill }
    })
    
    const category = wrapper.find('.skill-category')
    expect(category.text()).toContain('üë®‚Äçüç≥ –ö—É—Ö–Ω—è')
  })

  it('–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é', () => {
    const unknownCategorySkill = { ...mockSkill, category: 'unknown' }
    const wrapper = mount(SkillBar, {
      props: { skill: unknownCategorySkill }
    })
    
    const category = wrapper.find('.skill-category')
    expect(category.text()).toContain('‚öôÔ∏è –î—Ä—É–≥–æ–µ')
  })
})
