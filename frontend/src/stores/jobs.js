import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import { supabase } from '../lib/supabase'

// ‚ú® –ï–î–ò–ù–´–ô JOBS STORE - –°–û–ì–õ–ê–°–ù–û –ü–õ–ê–ù–£ –≠–¢–ê–ü–ê 3
// –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –æ–±—ã—á–Ω—ã–µ –∏ —Å—Ä–æ—á–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
export const useJobsStore = defineStore('jobs', () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  const jobs = ref([])
  const urgentJobs = ref([])
  const currentJob = ref(null)
  const loading = ref(false)
  const error = ref(null)
  const filters = ref({
    specialization: null,
    district: null,
    salaryFrom: null,
    salaryTo: null,
    schedule: null,
    experience: null
  })
  
  // –ì–µ—Ç—Ç–µ—Ä—ã
  const allJobs = computed(() => [...jobs.value, ...urgentJobs.value])
  const regularJobs = computed(() => jobs.value)
  const urgentJobsList = computed(() => urgentJobs.value)
  const filteredJobs = computed(() => {
    let result = allJobs.value
    
    if (filters.value.specialization) {
      result = result.filter(job => job.specialization_id === filters.value.specialization)
    }
    
    if (filters.value.district) {
      result = result.filter(job => job.district_id === filters.value.district)
    }
    
    if (filters.value.salaryFrom) {
      result = result.filter(job => job.salary_from >= filters.value.salaryFrom)
    }
    
    if (filters.value.salaryTo) {
      result = result.filter(job => job.salary_to <= filters.value.salaryTo)
    }
    
    return result
  })
  
  // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
  const fetchJobs = async () => {
    try {
      loading.value = true
      error.value = null
      
      const { data, error: fetchError } = await supabase
        .from('job_postings')
        .select(`
          *,
          specializations(name, icon),
          city_districts(name),
          venue_types(name, icon),
          companies(name, logo_url)
        `)
        .eq('is_urgent', false)
        .eq('status', 'active')
        .order('created_at', { ascending: false })
      
      if (fetchError) throw fetchError
      
      jobs.value = data || []
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–π:', err)
      error.value = err.message
      
      // Fallback –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      jobs.value = [
        {
          id: 1,
          title: '–ü–æ–≤–∞—Ä –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–π –∫—É—Ö–Ω–∏',
          description: '–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—ã—Ç–Ω—ã–π –ø–æ–≤–∞—Ä –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–π –∫—É—Ö–Ω–∏',
          salary_from: 200000,
          salary_to: 350000,
          specializations: { name: '–ü–æ–≤–∞—Ä', icon: 'üë®‚Äçüç≥' },
          city_districts: { name: '–ï—Å–∏–ª—å—Å–∫–∏–π —Ä–∞–π–æ–Ω' },
          companies: { name: 'Mama Mia Restaurant', logo_url: null },
          created_at: new Date().toISOString()
        },
        {
          id: 2,
          title: '–û—Ñ–∏—Ü–∏–∞–Ω—Ç –≤ –∫–∞—Ñ–µ',
          description: '–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞ –≤ —É—é—Ç–Ω–æ–µ –∫–∞—Ñ–µ –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞',
          salary_from: 150000,
          salary_to: 250000,
          specializations: { name: '–û—Ñ–∏—Ü–∏–∞–Ω—Ç', icon: 'ü§µ' },
          city_districts: { name: '–ê–ª–º–∞—Ç–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω' },
          companies: { name: 'Coffee Dreams', logo_url: null },
          created_at: new Date().toISOString()
        }
      ]
    } finally {
      loading.value = false
    }
  }
  
  const fetchUrgentJobs = async () => {
    try {
      loading.value = true
      error.value = null
      
      const { data, error: fetchError } = await supabase
        .from('urgent_jobs')
        .select(`
          *,
          specializations(name, icon),
          city_districts(name),
          venue_types(name, icon),
          companies(name, logo_url)
        `)
        .eq('status', 'active')
        .order('created_at', { ascending: false })
      
      if (fetchError) throw fetchError
      
      urgentJobs.value = data || []
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ä–æ—á–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π:', err)
      error.value = err.message
      
      // Fallback –¥–∞–Ω–Ω—ã–µ
      urgentJobs.value = [
        {
          id: 101,
          title: '–°–†–û–ß–ù–û! –ü–æ–≤–∞—Ä –Ω–∞ –∑–∞–º–µ–Ω—É',
          description: '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤–∞—Ä –Ω–∞ –∑–∞–º–µ–Ω—É –∑–∞–±–æ–ª–µ–≤—à–µ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞',
          salary_from: 15000,
          salary_to: 20000,
          work_date: new Date().toISOString().split('T')[0],
          specializations: { name: '–ü–æ–≤–∞—Ä', icon: 'üë®‚Äçüç≥' },
          city_districts: { name: '–°–∞—Ä—ã–∞—Ä–∫–∞' },
          companies: { name: 'Grand Restaurant', logo_url: null },
          is_urgent: true,
          created_at: new Date().toISOString()
        }
      ]
    } finally {
      loading.value = false
    }
  }
  
  const fetchJobById = async (id) => {
    try {
      loading.value = true
      error.value = null
      
      // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –æ–±—ã—á–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö
      let { data, error: fetchError } = await supabase
        .from('job_postings')
        .select(`
          *,
          specializations(name, icon),
          city_districts(name),
          venue_types(name, icon),
          companies(name, logo_url, description)
        `)
        .eq('id', id)
        .single()
      
      if (fetchError) {
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—â–µ–º –≤ —Å—Ä–æ—á–Ω—ã—Ö
        const { data: urgentData, error: urgentError } = await supabase
          .from('urgent_jobs')
          .select(`
            *,
            specializations(name, icon),
            city_districts(name),
            venue_types(name, icon),
            companies(name, logo_url, description)
          `)
          .eq('id', id)
          .single()
        
        if (urgentError) throw urgentError
        data = urgentData
      }
      
      currentJob.value = data
      return data
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–∏:', err)
      error.value = err.message
      return null
    } finally {
      loading.value = false
    }
  }
  
  // –î–µ–π—Å—Ç–≤–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–∏–∑–º–µ–Ω–µ–Ω–∏—è
  const createJob = async (jobData) => {
    try {
      loading.value = true
      error.value = null
      
      const { data, error: createError } = await supabase
        .from('job_postings')
        .insert([jobData])
        .select()
        .single()
      
      if (createError) throw createError
      
      jobs.value.unshift(data)
      return { success: true, data }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏:', err)
      error.value = err.message
      return { success: false, error: err.message }
    } finally {
      loading.value = false
    }
  }
  
  const createUrgentJob = async (jobData) => {
    try {
      loading.value = true
      error.value = null
      
      const { data, error: createError } = await supabase
        .from('urgent_jobs')
        .insert([{ ...jobData, is_urgent: true }])
        .select()
        .single()
      
      if (createError) throw createError
      
      urgentJobs.value.unshift(data)
      return { success: true, data }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ä–æ—á–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏:', err)
      error.value = err.message
      return { success: false, error: err.message }
    } finally {
      loading.value = false
    }
  }
  
  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
  const updateFilters = (newFilters) => {
    filters.value = { ...filters.value, ...newFilters }
  }
  
  const clearFilters = () => {
    filters.value = {
      specialization: null,
      district: null,
      salaryFrom: null,
      salaryTo: null,
      schedule: null,
      experience: null
    }
  }
  
  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
  const loadAll = async () => {
    await Promise.all([
      fetchJobs(),
      fetchUrgentJobs()
    ])
  }
  
  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    jobs,
    urgentJobs,
    currentJob,
    loading,
    error,
    filters,
    
    // –ì–µ—Ç—Ç–µ—Ä—ã
    allJobs,
    regularJobs,
    urgentJobsList,
    filteredJobs,
    
    // –î–µ–π—Å—Ç–≤–∏—è
    fetchJobs,
    fetchUrgentJobs,
    fetchJobById,
    createJob,
    createUrgentJob,
    updateFilters,
    clearFilters,
    loadAll
  }
})
