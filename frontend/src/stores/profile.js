import { defineStore } from 'pinia'
import { ref, computed } from 'vue'
import { profileService } from '../services/profile.service.js'

// ‚ú® –ü–†–û–§–ò–õ–¨ STORE - —á–∏—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –Ω–∞ —Å–µ—Ä–≤–∏—Å–∞—Ö
export const useProfileStore = defineStore('profile', () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  const profile = ref(null)
  const resume = ref(null)
  const loading = ref(false)
  const error = ref(null)

  // –ì–µ—Ç—Ç–µ—Ä—ã
  const isProfileComplete = computed(() => {
    if (!profile.value) return false
    return !!(profile.value.full_name && profile.value.phone && profile.value.specialization_id)
  })

  const hasResume = computed(() => !!resume.value)

  const isResumeComplete = computed(() => {
    if (!resume.value) return false
    return !!(resume.value.title && resume.value.description && resume.value.experience_years)
  })

  // –ü—Ä–æ—Ñ–∏–ª—å
  const fetchProfile = async (userId) => {
    try {
      loading.value = true
      error.value = null
      const { data, error: fetchError } = await profileService.getProfile(userId)
      if (fetchError) throw fetchError
      profile.value = data
      return data
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', err)
      error.value = err.message
      // Fallback –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      profile.value = {
        id: 1,
        user_id: userId,
        full_name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        phone: '+7 777 123 45 67',
        avatar_url: null,
        specialization_id: 1,
        district_id: 1,
        experience_years: 3,
        about: '–û–ø—ã—Ç–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –æ–±—â–µ–ø–∏—Ç–∞',
        specializations: { name: '–ü–æ–≤–∞—Ä', icon: 'üë®‚Äçüç≥' },
        city_districts: { name: '–ï—Å–∏–ª—å—Å–∫–∏–π —Ä–∞–π–æ–Ω' }
      }
      return profile.value
    } finally {
      loading.value = false
    }
  }

  const updateProfile = async (profileData) => {
    try {
      loading.value = true
      error.value = null
      const { data, error: updateError } = await profileService.upsertProfile(profileData)
      if (updateError) throw updateError
      profile.value = data
      return { success: true, data }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', err)
      error.value = err.message
      return { success: false, error: err.message }
    } finally {
      loading.value = false
    }
  }

  const uploadAvatar = async (file, userId) => {
    try {
      loading.value = true
      error.value = null
      const { data, error: uploadError } = await profileService.uploadAvatar(file, userId)
      if (uploadError) throw uploadError
      await updateProfile({ ...profile.value, avatar_url: data.publicUrl })
      return { success: true, url: data.publicUrl }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞:', err)
      error.value = err.message
      return { success: false, error: err.message }
    } finally {
      loading.value = false
    }
  }

  // –†–µ–∑—é–º–µ
  const fetchResume = async (userId) => {
    try {
      loading.value = true
      error.value = null
      const { data, error: fetchError } = await profileService.getResume(userId)
      if (fetchError) throw fetchError
      resume.value = data
      return data
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–∑—é–º–µ:', err)
      error.value = err.message
      // Fallback
      resume.value = {
        id: 1,
        user_id: userId,
        title: '–ü–æ–≤–∞—Ä –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–π –∫—É—Ö–Ω–∏',
        description: '–û–ø—ã—Ç–Ω—ã–π –ø–æ–≤–∞—Ä —Å 5-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º —Ä–∞–±–æ—Ç—ã –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö',
        experience_years: 5,
        salary_expectation: 300000,
        specialization_id: 1,
        district_id: 1,
        skills: ['–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Å—Ç—ã', '–í—ã–ø–µ—á–∫–∞ –ø–∏—Ü—Ü—ã', '–°–æ—É—Å—ã'],
        portfolio_urls: [],
        specializations: { name: '–ü–æ–≤–∞—Ä', icon: 'üë®‚Äçüç≥' },
        city_districts: { name: '–ï—Å–∏–ª—å—Å–∫–∏–π —Ä–∞–π–æ–Ω' }
      }
      return resume.value
    } finally {
      loading.value = false
    }
  }

  const updateResume = async (resumeData) => {
    try {
      loading.value = true
      error.value = null
      const { data, error: updateError } = await profileService.upsertResume(resumeData)
      if (updateError) throw updateError
      resume.value = data
      return { success: true, data }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—é–º–µ:', err)
      error.value = err.message
      return { success: false, error: err.message }
    } finally {
      loading.value = false
    }
  }

  const deleteResume = async (resumeId) => {
    try {
      loading.value = true
      error.value = null
      if (profileService.deleteResume) {
        const { error: deleteError } = await profileService.deleteResume(resumeId)
        if (deleteError) throw deleteError
      }
      resume.value = null
      return { success: true }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∑—é–º–µ:', err)
      error.value = err.message
      return { success: false, error: err.message }
    } finally {
      loading.value = false
    }
  }

  // –û–±—â–∏–µ
  const loadUserData = async (userId) => {
    await Promise.all([fetchProfile(userId), fetchResume(userId)])
  }

  const clearData = () => {
    profile.value = null
    resume.value = null
    error.value = null
  }

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    profile,
    resume,
    loading,
    error,

    // –ì–µ—Ç—Ç–µ—Ä—ã
    isProfileComplete,
    hasResume,
    isResumeComplete,

    // –ü—Ä–æ—Ñ–∏–ª—å
    fetchProfile,
    updateProfile,
    uploadAvatar,

    // –†–µ–∑—é–º–µ
    fetchResume,
    updateResume,
    deleteResume,

    // –û–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    loadUserData,
    clearData
  }
})
