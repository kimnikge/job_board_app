// üîç –í–ê–õ–ò–î–ê–¢–û–†–´ –î–õ–Ø HoReCa –ü–õ–ê–¢–§–û–†–ú–´
// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω–æ–π –∏–Ω–¥—É—Å—Ç—Ä–∏–∏

import { HORECA_CONSTANTS } from '../constants/horeca.constants.js'

export class HoRecaValidator {
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–∏
  static validateJobData(jobData) {
    const errors = []
    
    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (!jobData.title?.trim()) {
      errors.push('–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
    }
    
    if (!jobData.category) {
      errors.push('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞')
    } else if (!HORECA_CONSTANTS.CATEGORIES[jobData.category]) {
      errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è')
    }
    
    if (!jobData.position_type) {
      errors.push('–¢–∏–ø –ø–æ–∑–∏—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
    } else if (!HORECA_CONSTANTS.POSITION_TYPES[jobData.position_type]) {
      errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–∑–∏—Ü–∏–∏')
    }
    
    if (!jobData.description?.trim()) {
      errors.push('–û–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
    }
    
    if (!jobData.location?.trim()) {
      errors.push('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–∑–∏—Ü–∏–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if (jobData.category && jobData.position_type) {
      const position = HORECA_CONSTANTS.POSITION_TYPES[jobData.position_type]
      if (position && position.category !== jobData.category) {
        errors.push(`–ü–æ–∑–∏—Ü–∏—è "${position.name}" –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "${HORECA_CONSTANTS.CATEGORIES[jobData.category]?.name}"`)
      }
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞—Ä–ø–ª–∞—Ç—ã
    const salaryErrors = this.validateSalary(jobData.salary_min, jobData.salary_max)
    errors.push(...salaryErrors)
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
    if (jobData.schedule_type && !HORECA_CONSTANTS.SCHEDULE_TYPES[jobData.schedule_type]) {
      errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞')
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
    if (jobData.employment_type && !HORECA_CONSTANTS.EMPLOYMENT_TYPES[jobData.employment_type]) {
      errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–Ω—è—Ç–æ—Å—Ç–∏')
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø—ã—Ç–∞
    if (jobData.experience_required && !HORECA_CONSTANTS.EXPERIENCE_LEVELS[jobData.experience_required]) {
      errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ –æ–ø—ã—Ç—É')
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    if (!jobData.contact_phone?.trim() && !jobData.contact_telegram?.trim()) {
      errors.push('–£–∫–∞–∂–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ (—Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ Telegram)')
    }
    
    return {
      isValid: errors.length === 0,
      errors
    }
  }
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Ä–æ—á–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
  static validateUrgentJobData(urgentData) {
    const errors = []
    
    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å—Ä–æ—á–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
    if (!urgentData.title?.trim()) {
      errors.push('–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ä–æ—á–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
    }
    
    if (!urgentData.category) {
      errors.push('–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞')
    } else if (!HORECA_CONSTANTS.CATEGORIES[urgentData.category]) {
      errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è')
    }
    
    if (!urgentData.position_type) {
      errors.push('–¢–∏–ø –ø–æ–∑–∏—Ü–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
    } else if (!HORECA_CONSTANTS.POSITION_TYPES[urgentData.position_type]) {
      errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–∑–∏—Ü–∏–∏')
    }
    
    if (!urgentData.needed_date) {
      errors.push('–î–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞')
    } else {
      const neededDate = new Date(urgentData.needed_date)
      const today = new Date()
      today.setHours(0, 0, 0, 0)
      
      if (neededDate < today) {
        errors.push('–î–∞—Ç–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º')
      }
    }
    
    if (!urgentData.needed_time_start) {
      errors.push('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
    }
    
    if (!urgentData.needed_time_end) {
      errors.push('–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    if (urgentData.needed_time_start && urgentData.needed_time_end) {
      if (urgentData.needed_time_start >= urgentData.needed_time_end) {
        errors.push('–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞')
      }
    }
    
    if (!urgentData.payment_per_shift || urgentData.payment_per_shift <= 0) {
      errors.push('–û–ø–ª–∞—Ç–∞ –∑–∞ —Å–º–µ–Ω—É –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞ –∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π')
    }
    
    if (!urgentData.positions_needed || urgentData.positions_needed <= 0) {
      errors.push('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0')
    }
    
    if (!urgentData.location?.trim()) {
      errors.push('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    if (urgentData.priority && !HORECA_CONSTANTS.PRIORITIES[urgentData.priority]) {
      errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç')
    }
    
    return {
      isValid: errors.length === 0,
      errors
    }
  }
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞—Ä–ø–ª–∞—Ç—ã
  static validateSalary(min, max) {
    const errors = []
    
    if (min !== undefined && min !== null) {
      if (typeof min !== 'number' || min < 0) {
        errors.push('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º')
      }
    }
    
    if (max !== undefined && max !== null) {
      if (typeof max !== 'number' || max < 0) {
        errors.push('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º')
      }
    }
    
    if (min && max && min > max) {
      errors.push('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π')
    }
    
    return errors
  }
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è
  static validateEmployerProfile(employerData) {
    const errors = []
    
    if (!employerData.company_name?.trim()) {
      errors.push('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
    }
    
    if (!employerData.company_type) {
      errors.push('–¢–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
    } else if (!HORECA_CONSTANTS.COMPANY_TYPES[employerData.company_type]) {
      errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–≤–µ–¥–µ–Ω–∏—è')
    }
    
    if (!employerData.location?.trim()) {
      errors.push('–ê–¥—Ä–µ—Å –∑–∞–≤–µ–¥–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
    }
    
    if (!employerData.contact_person?.trim()) {
      errors.push('–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ')
    }
    
    if (!employerData.contact_phone?.trim()) {
      errors.push('–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω')
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)
    if (employerData.contact_phone) {
      const phoneRegex = /^[\+]?[0-9\s\-\(\)]{10,}$/
      if (!phoneRegex.test(employerData.contact_phone.trim())) {
        errors.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
      }
    }
    
    return {
      isValid: errors.length === 0,
      errors
    }
  }
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ –Ω–∞–≤—ã–∫–æ–≤
  static validateSkills(skills) {
    if (!Array.isArray(skills)) {
      return { isValid: false, errors: ['–ù–∞–≤—ã–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º'] }
    }
    
    const errors = []
    const validSkills = skills.filter(skill => {
      if (typeof skill !== 'string' || !skill.trim()) {
        return false
      }
      if (skill.trim().length > 100) {
        errors.push(`–ù–∞–≤—ã–∫ "${skill}" —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)`)
        return false
      }
      return true
    })
    
    return {
      isValid: errors.length === 0,
      errors,
      validSkills: validSkills.map(s => s.trim())
    }
  }
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ –ª—å–≥–æ—Ç
  static validateBenefits(benefits) {
    if (!Array.isArray(benefits)) {
      return { isValid: false, errors: ['–õ—å–≥–æ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º'] }
    }
    
    const errors = []
    const validBenefits = benefits.filter(benefit => {
      if (typeof benefit !== 'string' || !benefit.trim()) {
        return false
      }
      if (benefit.trim().length > 100) {
        errors.push(`–õ—å–≥–æ—Ç–∞ "${benefit}" —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª–æ–≤)`)
        return false
      }
      return true
    })
    
    return {
      isValid: errors.length === 0,
      errors,
      validBenefits: validBenefits.map(b => b.trim())
    }
  }
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
  static validateJobStatus(status) {
    const validStatuses = Object.keys(HORECA_CONSTANTS.JOB_STATUSES)
    return validStatuses.includes(status)
  }
  
  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å—Ä–æ—á–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
  static validateUrgentStatus(status) {
    const validStatuses = Object.keys(HORECA_CONSTANTS.URGENT_STATUSES)
    return validStatuses.includes(status)
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –Ω–∞–≤—ã–∫–æ–≤ —Å –ø–æ–∑–∏—Ü–∏–µ–π
  static validateSkillsForPosition(skills, positionType) {
    const errors = []
    
    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏ –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏
    const position = HORECA_CONSTANTS.POSITION_TYPES[positionType]
    if (!position) {
      return { isValid: false, errors: ['–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–∑–∏—Ü–∏–∏'] }
    }
    
    // –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
    const requiredSkillsMap = {
      bartender: ['—Ä–∞–±–æ—Ç–∞ —Å –∫–æ—Ñ–µ-–º–∞—à–∏–Ω–æ–π', '–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–æ–≤'],
      cook: ['–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –±–ª—é–¥', '–∑–Ω–∞–Ω–∏–µ –∫—É—Ö–Ω–∏'],
      chef: ['—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º', '—Å–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é']
    }
    
    const requiredSkills = requiredSkillsMap[positionType] || []
    const hasRequiredSkills = requiredSkills.some(required => 
      skills.some(skill => skill.toLowerCase().includes(required.toLowerCase()))
    )
    
    if (requiredSkills.length > 0 && !hasRequiredSkills) {
      errors.push(`–î–ª—è –ø–æ–∑–∏—Ü–∏–∏ "${position.name}" –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞–≤—ã–∫–∏: ${requiredSkills.join(', ')}`)
    }
    
    return {
      isValid: errors.length === 0,
      errors,
      suggestions: requiredSkills
    }
  }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
export const ValidationUtils = {
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏ (HH:MM)
  isValidTime(timeString) {
    const timeRegex = /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/
    return timeRegex.test(timeString)
  },
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã
  isValidDate(dateString) {
    const date = new Date(dateString)
    return date instanceof Date && !isNaN(date)
  },
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
  isDateNotPast(dateString) {
    const date = new Date(dateString)
    const today = new Date()
    today.setHours(0, 0, 0, 0)
    return date >= today
  },
  
  // –û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–∏
  sanitizeString(str) {
    if (typeof str !== 'string') return ''
    return str.trim().replace(/\s+/g, ' ')
  },
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–∞–∑–∞—Ö—Å–∫–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  isKazakhPhone(phone) {
    const kazakhPhoneRegex = /^(\+7|8)?[0-9]{10}$/
    return kazakhPhoneRegex.test(phone.replace(/[\s\-\(\)]/g, ''))
  },
  
  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  normalizePhone(phone) {
    if (!phone) return ''
    
    // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
    let cleaned = phone.replace(/[^\d+]/g, '')
    
    // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ +7
    if (cleaned.startsWith('8')) {
      cleaned = '+7' + cleaned.substring(1)
    }
    
    // –ï—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 7, –¥–æ–±–∞–≤–ª—è–µ–º +
    if (cleaned.startsWith('7')) {
      cleaned = '+' + cleaned
    }
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +7, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å
    if (!cleaned.startsWith('+7')) {
      cleaned = '+7' + cleaned
    }
    
    return cleaned
  }
}

console.log('‚úÖ HoReCa validation utilities loaded')