// Telegram URL Authorization Handler
// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ URL —Å autologin_token
// –°–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: https://core.telegram.org/api/url-authorization

export class TelegramURLAuth {
  constructor() {
    this.autologinToken = null
    this.tokenExpiration = null
    this.configCache = null
    this.lastConfigFetch = 0
    
    // –°–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤ Telegram –¥–ª—è –∞–≤—Ç–æ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    this.trustedDomains = [
      'telegram.org',
      't.me', 
      'web.telegram.org',
      'horecapp.netlify.app' // –ù–∞—à –¥–æ–º–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    ]
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–Ω–∞ –ª–∏ –∞–≤—Ç–æ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è URL
  needsAutoLogin(url) {
    try {
      const urlObj = new URL(url)
      return this.trustedDomains.some(domain => 
        urlObj.hostname === domain || urlObj.hostname.endsWith('.' + domain)
      )
    } catch {
      return false
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MTProto (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
  async getMTProtoConfig() {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º Telegram –∫–ª–∏–µ–Ω—Ç–µ —ç—Ç–æ help.getConfig –∏–∑ MTProto API
    // –î–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —á–µ—Ä–µ–∑ Telegram Bot API
    
    const now = Date.now()
    
    // –ö—ç—à–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –Ω–∞ 10 –º–∏–Ω—É—Ç
    if (this.configCache && (now - this.lastConfigFetch) < 600000) {
      return this.configCache
    }

    try {
      // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—Ä–æ—Å –∫ Telegram API
      // –î–ª—è –¥–µ–º–æ —Å–æ–∑–¥–∞–µ–º mock –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      const config = {
        autologin_domains: this.trustedDomains,
        autologin_token: this.generateMockToken(),
        token_expires: Math.floor(Date.now() / 1000) + 3600 // –ò—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ —á–∞—Å
      }
      
      this.configCache = config
      this.lastConfigFetch = now
      this.autologinToken = config.autologin_token
      this.tokenExpiration = config.token_expires
      
      console.log('üì± MTProto config –ø–æ–ª—É—á–µ–Ω:', { 
        domains: config.autologin_domains.length,
        token_expires: new Date(config.token_expires * 1000).toLocaleString()
      })
      
      return config
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è MTProto –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error)
      return null
    }
  }

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è mock —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  generateMockToken() {
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç Telegram
    const timestamp = Math.floor(Date.now() / 1000)
    const random = Math.random().toString(36).substr(2, 9)
    return `mock_autologin_${timestamp}_${random}`
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ autologin_token
  isTokenValid() {
    if (!this.autologinToken || !this.tokenExpiration) {
      return false
    }
    
    const currentTime = Math.floor(Date.now() / 1000)
    const tokenAge = currentTime - (this.tokenExpiration - 3600) // –í—ã—á–∏—Å–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç —Ç–æ–∫–µ–Ω–∞
    
    // –¢–æ–∫–µ–Ω –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç–∞—Ä—à–µ 10000 —Å–µ–∫—É–Ω–¥ (—Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
    return tokenAge < 10000 && currentTime < this.tokenExpiration
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ autologin_token –∫ URL
  async addAutologinToken(originalUrl) {
    if (!this.needsAutoLogin(originalUrl)) {
      console.log('üîó URL –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', originalUrl)
      return originalUrl
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—É—â–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
    if (!this.isTokenValid()) {
      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º autologin_token...')
      await this.getMTProtoConfig()
    }

    if (!this.isTokenValid()) {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π autologin_token')
      return originalUrl
    }

    try {
      const url = new URL(originalUrl)
      
      // –î–æ–±–∞–≤–ª—è–µ–º autologin_token –∫ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
      url.searchParams.set('autologin_token', this.autologinToken)
      
      const modifiedUrl = url.toString()
      
      console.log('‚úÖ URL –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∞–≤—Ç–æ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:')
      console.log('   –ò—Å—Ö–æ–¥–Ω—ã–π:', originalUrl)
      console.log('   –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π:', modifiedUrl)
      
      return modifiedUrl
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ URL:', error)
      return originalUrl
    }
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö URL —Å autologin_token
  async processIncomingURL(url) {
    try {
      const urlObj = new URL(url)
      const autologinToken = urlObj.searchParams.get('autologin_token')
      
      if (!autologinToken) {
        console.log('üîó URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç autologin_token')
        return { authenticated: false, url }
      }

      console.log('üîë –û–±–Ω–∞—Ä—É–∂–µ–Ω autologin_token:', autologinToken)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞
      if (!this.validateAutologinToken(autologinToken)) {
        console.warn('‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π autologin_token')
        return { authenticated: false, url }
      }

      // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ URL –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      urlObj.searchParams.delete('autologin_token')
      const cleanUrl = urlObj.toString()
      
      console.log('‚úÖ –ê–≤—Ç–æ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, URL –æ—á–∏—â–µ–Ω:', cleanUrl)
      
      return { 
        authenticated: true, 
        url: cleanUrl,
        token: autologinToken
      }
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ URL:', error)
      return { authenticated: false, url }
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è autologin_token
  validateAutologinToken(token) {
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–∞
    // –î–ª—è –¥–µ–º–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç
    return token && (
      token.startsWith('mock_autologin_') || 
      token.length > 10
    )
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ URL –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å –∞–≤—Ç–æ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
  async createAutologinURL(baseUrl, additionalParams = {}) {
    let url = baseUrl
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    if (Object.keys(additionalParams).length > 0) {
      const urlObj = new URL(baseUrl)
      Object.entries(additionalParams).forEach(([key, value]) => {
        urlObj.searchParams.set(key, value)
      })
      url = urlObj.toString()
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º autologin_token
    return await this.addAutologinToken(url)
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ URL
  init() {
    console.log('üîó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram URL Authorization Handler')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π URL –Ω–∞ –Ω–∞–ª–∏—á–∏–µ autologin_token
    this.processCurrentURL()
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è URL (–¥–ª—è SPA)
    window.addEventListener('popstate', () => {
      this.processCurrentURL()
    })
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    this.getMTProtoConfig()
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  async processCurrentURL() {
    const currentURL = window.location.href
    const result = await this.processIncomingURL(currentURL)
    
    if (result.authenticated) {
      // URL —Å–æ–¥–µ—Ä–∂–∞–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π autologin_token
      console.log('üéØ –ê–≤—Ç–æ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ URL –≤—ã–ø–æ–ª–Ω–µ–Ω–∞')
      
      // –û–±–Ω–æ–≤–ª—è–µ–º URL –≤ –±—Ä–∞—É–∑–µ—Ä–µ –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
      if (result.url !== currentURL) {
        window.history.replaceState({}, '', result.url)
      }
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      this.triggerAutoAuthentication(result.token)
    }
  }

  // –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  async triggerAutoAuthentication(token) {
    try {
      // –°–æ–±—ã—Ç–∏–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ–± –∞–≤—Ç–æ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const event = new CustomEvent('telegram-url-auth', {
        detail: { token, timestamp: Date.now() }
      })
      
      window.dispatchEvent(event)
      
      console.log('‚ú® –°–æ–±—ã—Ç–∏–µ –∞–≤—Ç–æ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error)
    }
  }

  // –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–æ–∫ —Å –∞–≤—Ç–æ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
  async generateShareableLink(path = '/', params = {}) {
    const baseUrl = `${window.location.origin}${path}`
    return await this.createAutologinURL(baseUrl, params)
  }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const telegramURLAuth = new TelegramURLAuth()

// –ê–≤—Ç–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
if (typeof window !== 'undefined') {
  document.addEventListener('DOMContentLoaded', () => {
    telegramURLAuth.init()
  })
}

console.log('üì± Telegram URL Authorization Handler –∑–∞–≥—Ä—É–∂–µ–Ω')
