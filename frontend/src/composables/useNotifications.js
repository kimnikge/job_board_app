// üì± useNotifications.js ‚Äî –ö–æ–º–ø–æ–∑–µ–π–±–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
import { ref } from 'vue'
import { notificationsService } from '@/services/notifications.service.js'
import { HORECA_CONSTANTS } from '@/constants/horeca.constants.js'

/**
 * –ö–æ–º–ø–æ–∑–µ–π–±–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
 */
export function useNotifications() {
  const notifications = ref([])
  const isLoading = ref(false)
  const error = ref(null)
  const lastNotificationSent = ref(null)

  // –õ–æ–∫–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (UI)
  function showSuccess(message) {
    notifications.value.push({ 
      id: Date.now(), 
      type: 'success', 
      message, 
      timestamp: new Date() 
    })
  }

  function showError(message) {
    notifications.value.push({ 
      id: Date.now(), 
      type: 'error', 
      message, 
      timestamp: new Date() 
    })
  }

  function showInfo(message) {
    notifications.value.push({ 
      id: Date.now(), 
      type: 'info', 
      message, 
      timestamp: new Date() 
    })
  }

  function showWarning(message) {
    notifications.value.push({ 
      id: Date.now(), 
      type: 'warning', 
      message, 
      timestamp: new Date() 
    })
  }

  // –£–±—Ä–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
  function removeNotification(notificationId) {
    const index = notifications.value.findIndex(n => n.id === notificationId)
    if (index > -1) {
      notifications.value.splice(index, 1)
    }
  }

  // –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  function clearNotifications() {
    notifications.value = []
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  const notifyUser = async (userId, message, type = 'info') => {
    isLoading.value = true
    error.value = null
    
    try {
      const success = await notificationsService.notifyUser(userId, message, type)
      
      if (success) {
        lastNotificationSent.value = {
          userId,
          message,
          type,
          timestamp: new Date()
        }
        showSuccess('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')
      } else {
        error.value = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'
        showError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
      }
      
      return success
    } catch (err) {
      error.value = err.message
      showError(`–û—à–∏–±–∫–∞: ${err.message}`)
      return false
    } finally {
      isLoading.value = false
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–∏—Ç—å –æ –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
   */
  const notifyNewJob = async (jobData, targetUsers = []) => {
    isLoading.value = true
    error.value = null
    
    try {
      const success = await notificationsService.notifyNewJob(jobData, targetUsers)
      
      if (success) {
        lastNotificationSent.value = {
          type: 'job',
          jobTitle: jobData.title,
          timestamp: new Date()
        }
        showSuccess(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞–∫–∞–Ω—Å–∏–∏ "${jobData.title}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!`)
      } else {
        error.value = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞–∫–∞–Ω—Å–∏–∏'
        showError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∫–∞–Ω—Å–∏–∏')
      }
      
      return success
    } catch (err) {
      error.value = err.message
      showError(`–û—à–∏–±–∫–∞: ${err.message}`)
      return false
    } finally {
      isLoading.value = false
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–∏—Ç—å –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–µ–π–¥–∂–∞
   */
  const notifyBadgeAwarded = async (userId, badgeData, reason = null) => {
    isLoading.value = true
    error.value = null
    
    try {
      const success = await notificationsService.notifyBadgeAwarded(userId, badgeData, reason)
      
      if (success) {
        lastNotificationSent.value = {
          type: 'badge',
          badgeName: badgeData.name,
          userId,
          timestamp: new Date()
        }
        showSuccess(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–µ–π–¥–∂–µ "${badgeData.name}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!`)
      } else {
        error.value = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–µ–π–¥–∂–µ'
        showError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–µ–π–¥–∂–µ')
      }
      
      return success
    } catch (err) {
      error.value = err.message
      showError(`–û—à–∏–±–∫–∞: ${err.message}`)
      return false
    } finally {
      isLoading.value = false
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  const notifyWelcome = async (userId, userData) => {
    isLoading.value = true
    error.value = null
    
    try {
      const success = await notificationsService.notifyWelcome(userId, userData)
      
      if (success) {
        lastNotificationSent.value = {
          type: 'welcome',
          userName: userData.full_name,
          userId,
          timestamp: new Date()
        }
        showSuccess('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')
      } else {
        error.value = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'
        showError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
      }
      
      return success
    } catch (err) {
      error.value = err.message
      showError(`–û—à–∏–±–∫–∞: ${err.message}`)
      return false
    } finally {
      isLoading.value = false
    }
  }

  /**
   * üî• –°–†–û–ß–ù–ê–Ø –í–ê–ö–ê–ù–°–ò–Ø - –£–≤–µ–¥–æ–º–∏—Ç—å –≥–æ—Ç–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
   */
  const notifyUrgentJob = async (urgentJobData) => {
    isLoading.value = true
    error.value = null
    
    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—Ä–æ—á–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
      const position = HORECA_CONSTANTS.POSITION_TYPES[urgentJobData.position_type]
      const urgencyIcon = HORECA_CONSTANTS.PRIORITIES[urgentJobData.priority]?.icon || 'üî•'
      
      const message = `${urgencyIcon} –°–†–û–ß–ù–û –Ω—É–∂–µ–Ω ${position?.name || urgentJobData.position_type}!
üìç ${urgentJobData.location}
‚è∞ ${urgentJobData.needed_time_start} - ${urgentJobData.needed_time_end}
üí∞ ${urgentJobData.payment_per_shift.toLocaleString()} —Ç–µ–Ω–≥–µ –∑–∞ —Å–º–µ–Ω—É
${urgentJobData.instant_payment ? '‚ö° –ú–æ–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞!' : ''}

–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è: /urgent_${urgentJobData.id}`

      const success = await notificationsService.notifyUrgentJob({
        ...urgentJobData,
        message
      })
      
      if (success) {
        lastNotificationSent.value = {
          type: 'urgent_job',
          jobTitle: urgentJobData.title,
          priority: urgentJobData.priority,
          timestamp: new Date()
        }
        showSuccess(`üî• –°—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ "${urgentJobData.title}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≥–æ—Ç–æ–≤—ã–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º!`)
      } else {
        error.value = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'
        showError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ä–æ—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
      }
      
      return success
    } catch (err) {
      error.value = err.message
      showError(`–û—à–∏–±–∫–∞ —Å—Ä–æ—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${err.message}`)
      return false
    } finally {
      isLoading.value = false
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É
   */
  const notifyJobAccepted = async (candidateId, jobData, employerData) => {
    isLoading.value = true
    error.value = null
    
    try {
      const position = HORECA_CONSTANTS.POSITION_TYPES[jobData.position_type]
      const company = HORECA_CONSTANTS.COMPANY_TYPES[employerData.company_type]
      
      const message = `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–∏–Ω—è—Ç—ã –Ω–∞ —Ä–∞–±–æ—Ç—É!

üè¢ –ö–æ–º–ø–∞–Ω–∏—è: ${employerData.company_name}
üëî –ü–æ–∑–∏—Ü–∏—è: ${position?.name || jobData.position_type}
üìç –ê–¥—Ä–µ—Å: ${jobData.location}
üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: ${jobData.salary_min ? `–æ—Ç ${jobData.salary_min.toLocaleString()}` : '–ø–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏'}

–ö–æ–Ω—Ç–∞–∫—Ç—ã —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è:
üë§ ${employerData.contact_person}
üìû ${employerData.contact_phone}

–£–¥–∞—á–∏ –≤ –Ω–æ–≤–æ–π —Ä–∞–±–æ—Ç–µ! üçÄ`

      const success = await notificationsService.notifyUser(candidateId, message, 'success')
      
      if (success) {
        showSuccess('–ö–∞–Ω–¥–∏–¥–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É!')
      }
      
      return success
    } catch (err) {
      error.value = err.message
      showError(`–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–Ω—è—Ç–∏–∏: ${err.message}`)
      return false
    } finally {
      isLoading.value = false
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–∏—Ç—å —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è –æ –Ω–æ–≤–æ–º –æ—Ç–∫–ª–∏–∫–µ
   */
  const notifyNewApplication = async (employerId, candidateData, jobData) => {
    isLoading.value = true
    error.value = null
    
    try {
      const position = HORECA_CONSTANTS.POSITION_TYPES[jobData.position_type]
      
      const message = `üìù –ù–æ–≤—ã–π –æ—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é!

üëî –í–∞–∫–∞–Ω—Å–∏—è: ${position?.name || jobData.position_type}
üë§ –ö–∞–Ω–¥–∏–¥–∞—Ç: ${candidateData.full_name}
‚≠ê –û–ø—ã—Ç: ${candidateData.experience || '–Ω–µ —É–∫–∞–∑–∞–Ω'}

${candidateData.skills?.length ? `üõ† –ù–∞–≤—ã–∫–∏: ${candidateData.skills.slice(0, 3).join(', ')}${candidateData.skills.length > 3 ? '...' : ''}` : ''}

–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å: /candidate_${candidateData.id}`

      const success = await notificationsService.notifyUser(employerId, message, 'info')
      
      if (success) {
        showSuccess('–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –Ω–æ–≤–æ–º –æ—Ç–∫–ª–∏–∫–µ!')
      }
      
      return success
    } catch (err) {
      error.value = err.message
      showError(`–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è: ${err.message}`)
      return false
    } finally {
      isLoading.value = false
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–∏—Ç—å –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–µ–π–¥–∂–∞ —Å HoReCa –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
   */
  const notifyHoRecaBadgeAwarded = async (userId, badgeData, skillsImproved = []) => {
    isLoading.value = true
    error.value = null
    
    try {
      let message = `üèÜ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–π –±–µ–π–¥–∂!

üéñÔ∏è ${badgeData.name}
‚≠ê –£—Ä–æ–≤–µ–Ω—å: ${badgeData.level}
üìã –û–ø–∏—Å–∞–Ω–∏–µ: ${badgeData.description}`

      if (skillsImproved.length > 0) {
        message += `\n\nüí™ –£–ª—É—á—à–µ–Ω—ã –Ω–∞–≤—ã–∫–∏:\n${skillsImproved.map(skill => `‚Ä¢ ${skill.name} +${skill.improvement}`).join('\n')}`
      }

      message += '\n\n–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –≤ HoReCa —Å—Ñ–µ—Ä–µ! üöÄ'

      const success = await notificationsService.notifyUser(userId, message, 'success')
      
      if (success) {
        showSuccess(`üèÜ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–µ–π–¥–∂–µ "${badgeData.name}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!`)
      }
      
      return success
    } catch (err) {
      error.value = err.message
      showError(`–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–µ–π–¥–∂–µ: ${err.message}`)
      return false
    } finally {
      isLoading.value = false
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –æ—à–∏–±–∫—É
   */
  const clearError = () => {
    error.value = null
  }

  return {
    // –õ–æ–∫–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notifications,
    showSuccess,
    showError,
    showInfo,
    showWarning,
    removeNotification,
    clearNotifications,
    
    // Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–±–∞–∑–æ–≤—ã–µ)
    isLoading,
    error,
    lastNotificationSent,
    notifyUser,
    notifyNewJob,
    notifyBadgeAwarded,
    notifyWelcome,
    
    // HoReCa-—Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notifyUrgentJob,
    notifyJobAccepted,
    notifyNewApplication,
    notifyHoRecaBadgeAwarded,
    
    clearError
  }
}
