// üì± useNotifications.js ‚Äî –ö–æ–º–ø–æ–∑–µ–π–±–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
import { ref } from 'vue'
import { notificationsService } from '@/services/notifications.service.js'

/**
 * –ö–æ–º–ø–æ–∑–µ–π–±–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
 */
export function useNotifications() {
  const notifications = ref([])
  const isLoading = ref(false)
  const error = ref(null)
  const lastNotificationSent = ref(null)

  // –õ–æ–∫–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (UI)
  function showSuccess(message) {
    notifications.value.push({ type: 'success', message })
  }

  function showError(message) {
    notifications.value.push({ type: 'error', message })
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  const notifyUser = async (userId, message, type = 'info') => {
    isLoading.value = true
    error.value = null
    
    try {
      const success = await notificationsService.notifyUser(userId, message, type)
      
      if (success) {
        lastNotificationSent.value = {
          userId,
          message,
          type,
          timestamp: new Date()
        }
        showSuccess('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')
      } else {
        error.value = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'
        showError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
      }
      
      return success
    } catch (err) {
      error.value = err.message
      showError(`–û—à–∏–±–∫–∞: ${err.message}`)
      return false
    } finally {
      isLoading.value = false
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–∏—Ç—å –æ –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
   */
  const notifyNewJob = async (jobData, targetUsers = []) => {
    isLoading.value = true
    error.value = null
    
    try {
      const success = await notificationsService.notifyNewJob(jobData, targetUsers)
      
      if (success) {
        lastNotificationSent.value = {
          type: 'job',
          jobTitle: jobData.title,
          timestamp: new Date()
        }
        showSuccess(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞–∫–∞–Ω—Å–∏–∏ "${jobData.title}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!`)
      } else {
        error.value = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–∞–∫–∞–Ω—Å–∏–∏'
        showError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∫–∞–Ω—Å–∏–∏')
      }
      
      return success
    } catch (err) {
      error.value = err.message
      showError(`–û—à–∏–±–∫–∞: ${err.message}`)
      return false
    } finally {
      isLoading.value = false
    }
  }

  /**
   * –£–≤–µ–¥–æ–º–∏—Ç—å –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–µ–π–¥–∂–∞
   */
  const notifyBadgeAwarded = async (userId, badgeData, reason = null) => {
    isLoading.value = true
    error.value = null
    
    try {
      const success = await notificationsService.notifyBadgeAwarded(userId, badgeData, reason)
      
      if (success) {
        lastNotificationSent.value = {
          type: 'badge',
          badgeName: badgeData.name,
          userId,
          timestamp: new Date()
        }
        showSuccess(`–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–µ–π–¥–∂–µ "${badgeData.name}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!`)
      } else {
        error.value = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±–µ–π–¥–∂–µ'
        showError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–µ–π–¥–∂–µ')
      }
      
      return success
    } catch (err) {
      error.value = err.message
      showError(`–û—à–∏–±–∫–∞: ${err.message}`)
      return false
    } finally {
      isLoading.value = false
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  const notifyWelcome = async (userId, userData) => {
    isLoading.value = true
    error.value = null
    
    try {
      const success = await notificationsService.notifyWelcome(userId, userData)
      
      if (success) {
        lastNotificationSent.value = {
          type: 'welcome',
          userName: userData.full_name,
          userId,
          timestamp: new Date()
        }
        showSuccess('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')
      } else {
        error.value = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ'
        showError('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
      }
      
      return success
    } catch (err) {
      error.value = err.message
      showError(`–û—à–∏–±–∫–∞: ${err.message}`)
      return false
    } finally {
      isLoading.value = false
    }
  }

  /**
   * –û—á–∏—Å—Ç–∏—Ç—å –æ—à–∏–±–∫—É
   */
  const clearError = () => {
    error.value = null
  }

  return {
    // –õ–æ–∫–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notifications,
    showSuccess,
    showError,
    
    // Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    isLoading,
    error,
    lastNotificationSent,
    notifyUser,
    notifyNewJob,
    notifyBadgeAwarded,
    notifyWelcome,
    clearError
  }
}
