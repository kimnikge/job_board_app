// üè¢ useEmployer.js ‚Äî R4 Composable –¥–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π
import { ref } from 'vue'
import { employerService } from '../services/employer.service.js'
import { badgesService } from '../services/badges.service.js'
import { debugLog } from '../utils/featureFlags.js'

export function useEmployer() {
  const loading = ref(false)
  const error = ref(null)

  /**
   * –°–æ–∑–¥–∞—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–µ–π–¥–∂
   */
  const createCompanyBadge = async (companyId, badgeData) => {
    try {
      loading.value = true
      error.value = null
      debugLog('employer', '–°–æ–∑–¥–∞–µ–º –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–µ–π–¥–∂', { companyId, badgeData })
      
      const { data, error: err } = await employerService.createCompanyBadge(companyId, badgeData)
      if (err) {
        error.value = err
        return { data: null, error: err }
      }
      
      debugLog('employer', '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–µ–π–¥–∂ —Å–æ–∑–¥–∞–Ω', data)
      return { data, error: null }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –±–µ–π–¥–∂–∞:', err)
      error.value = err
      return { data: null, error: err }
    } finally {
      loading.value = false
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–µ–π–¥–∂–µ–π –∫–æ–º–ø–∞–Ω–∏–∏
   */
  const getCompanyBadges = async (companyId) => {
    try {
      loading.value = true
      error.value = null
      debugLog('employer', '–ó–∞–≥—Ä—É–∂–∞–µ–º –±–µ–π–¥–∂–∏ –∫–æ–º–ø–∞–Ω–∏–∏', companyId)
      
      const { data, error: err } = await employerService.getCompanyBadges(companyId)
      if (err) {
        error.value = err
        return { data: null, error: err }
      }
      
      return { data, error: null }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–µ–π–¥–∂–µ–π –∫–æ–º–ø–∞–Ω–∏–∏:', err)
      error.value = err
      return { data: null, error: err }
    } finally {
      loading.value = false
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏
   */
  const getEmployees = async (companyId) => {
    try {
      loading.value = true
      error.value = null
      debugLog('employer', '–ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –∫–æ–º–ø–∞–Ω–∏–∏', companyId)
      
      const { data, error: err } = await employerService.getEmployees(companyId)
      if (err) {
        error.value = err
        return { data: null, error: err }
      }
      
      return { data, error: null }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:', err)
      error.value = err
      return { data: null, error: err }
    } finally {
      loading.value = false
    }
  }

  /**
   * –í—ã–¥–∞—Ç—å –±–µ–π–¥–∂ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –≤—Ä—É—á–Ω—É—é
   */
  const awardBadgeToEmployee = async (badgeId, userId, reason, awarderId) => {
    try {
      loading.value = true
      error.value = null
      debugLog('employer', '–í—ã–¥–∞–µ–º –±–µ–π–¥–∂ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É', { badgeId, userId, reason })
      
      const { data, error: err } = await employerService.awardBadgeToEmployee(badgeId, userId, reason, awarderId)
      if (err) {
        error.value = err
        return { data: null, error: err }
      }
      
      debugLog('employer', '–ë–µ–π–¥–∂ –≤—ã–¥–∞–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É', data)
      return { data, error: null }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –±–µ–π–¥–∂–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É:', err)
      error.value = err
      return { data: null, error: err }
    } finally {
      loading.value = false
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –±–µ–π–¥–∂–µ–π –¥–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è
   */
  const getBadgeCatalog = async (companyId) => {
    try {
      loading.value = true
      error.value = null
      debugLog('employer', '–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –±–µ–π–¥–∂–µ–π –¥–ª—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è', companyId)
      
      const { data, error: err } = await employerService.getBadgeCatalog(companyId)
      if (err) {
        error.value = err
        return { data: null, error: err }
      }
      
      return { data, error: null }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –±–µ–π–¥–∂–µ–π:', err)
      error.value = err
      return { data: null, error: err }
    } finally {
      loading.value = false
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –±–µ–π–¥–∂–∞–º
   */
  const getCompanyStatistics = async (companyId) => {
    try {
      loading.value = true
      error.value = null
      debugLog('employer', '–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–ø–∞–Ω–∏–∏', companyId)
      
      const { data, error: err } = await employerService.getCompanyStatistics(companyId)
      if (err) {
        error.value = err
        return { data: null, error: err }
      }
      
      return { data, error: null }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏:', err)
      error.value = err
      return { data: null, error: err }
    } finally {
      loading.value = false
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–µ–π–¥–∂
   */
  const deleteCompanyBadge = async (badgeId, companyId) => {
    try {
      loading.value = true
      error.value = null
      debugLog('employer', '–£–¥–∞–ª—è–µ–º –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–µ–π–¥–∂', { badgeId, companyId })
      
      const { data, error: err } = await badgesService.deleteCompanyBadge(badgeId, companyId)
      if (err) {
        error.value = err
        return { data: null, error: err }
      }
      
      debugLog('employer', '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–µ–π–¥–∂ —É–¥–∞–ª–µ–Ω', data)
      return { data, error: null }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –±–µ–π–¥–∂–∞:', err)
      error.value = err
      return { data: null, error: err }
    } finally {
      loading.value = false
    }
  }

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    loading,
    error,
    
    // –ú–µ—Ç–æ–¥—ã
    createCompanyBadge,
    getCompanyBadges,
    getEmployees,
    awardBadgeToEmployee,
    getBadgeCatalog,
    getCompanyStatistics,
    deleteCompanyBadge
  }
}

console.log('‚úÖ useEmployer composable loaded')
