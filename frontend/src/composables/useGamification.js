// üéÆ useGamification.js ‚Äî R4 Composable –¥–ª—è –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏
import { ref } from 'vue'
import { gamificationService } from '../services/gamification.service.js'
import { badgesService } from '../services/badges.service.js'
import { employerService } from '../services/employer.service.js'
import { debugLog } from '../utils/featureFlags.js'

export function useGamification() {
  const loading = ref(false)
  const error = ref(null)

  /**
   * –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –Ω–∞–≤—ã–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –±–µ–π–¥–∂–µ–π
   */
  const recalcSkills = async (userId) => {
    try {
      loading.value = true
      error.value = null
      debugLog('gamification', '–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≤—ã–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', userId)
      
      const { data, error: err } = await gamificationService.recalcSkills(userId)
      if (err) {
        error.value = err
        return { data: null, error: err }
      }
      
      debugLog('gamification', '–ù–∞–≤—ã–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω—ã', data)
      return { data, error: null }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—á–µ—Ç–∞ –Ω–∞–≤—ã–∫–æ–≤:', err)
      error.value = err
      return { data: null, error: err }
    } finally {
      loading.value = false
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  const getProgress = async (userId) => {
    try {
      loading.value = true
      error.value = null
      debugLog('gamification', '–ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≥–µ–π–º–∏—Ñ–∏–∫–∞—Ü–∏–∏', userId)
      
      const { data, error: err } = await gamificationService.getProgress(userId)
      if (err) {
        error.value = err
        return { data: null, error: err }
      }
      
      return { data, error: null }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', err)
      error.value = err
      return { data: null, error: err }
    } finally {
      loading.value = false
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  const getStatistics = async (userId) => {
    try {
      loading.value = true
      error.value = null
      debugLog('gamification', '–ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', userId)
      
      const { data, error: err } = await gamificationService.getStatistics(userId)
      if (err) {
        error.value = err
        return { data: null, error: err }
      }
      
      return { data, error: null }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', err)
      error.value = err
      return { data: null, error: err }
    } finally {
      loading.value = false
    }
  }

  /**
   * –í—ã–¥–∞—Ç—å –±–µ–π–¥–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  const awardBadge = async (badgeId, userId, reason, awarderId = null) => {
    try {
      loading.value = true
      error.value = null
      debugLog('gamification', '–í—ã–¥–∞–µ–º –±–µ–π–¥–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', { badgeId, userId, reason })
      
      const { data, error: err } = await badgesService.awardBadge(badgeId, userId, reason, awarderId)
      if (err) {
        error.value = err
        return { data: null, error: err }
      }
      
      debugLog('gamification', '–ë–µ–π–¥–∂ –≤—ã–¥–∞–Ω', data)
      return { data, error: null }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –±–µ–π–¥–∂–∞:', err)
      error.value = err
      return { data: null, error: err }
    } finally {
      loading.value = false
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–µ–π–¥–∂–µ–π
   */
  const getBadgeCatalog = async (companyId = null) => {
    try {
      loading.value = true
      error.value = null
      debugLog('gamification', '–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ –±–µ–π–¥–∂–µ–π', companyId)
      
      const { data, error: err } = await badgesService.getCatalog(companyId)
      if (err) {
        error.value = err
        return { data: null, error: err }
      }
      
      return { data, error: null }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –±–µ–π–¥–∂–µ–π:', err)
      error.value = err
      return { data: null, error: err }
    } finally {
      loading.value = false
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ–π–¥–∂–∏
   */
  const getAvailableBadges = async (userId, companyId = null) => {
    try {
      loading.value = true
      error.value = null
      debugLog('gamification', '–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –±–µ–π–¥–∂–∏', { userId, companyId })
      
      const { data, error: err } = await gamificationService.getAvailableBadges(userId, companyId)
      if (err) {
        error.value = err
        return { data: null, error: err }
      }
      
      return { data, error: null }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–µ–π–¥–∂–µ–π:', err)
      error.value = err
      return { data: null, error: err }
    } finally {
      loading.value = false
    }
  }

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    loading,
    error,
    
    // –ú–µ—Ç–æ–¥—ã
    recalcSkills,
    getProgress,
    getStatistics,
    awardBadge,
    getBadgeCatalog,
    getAvailableBadges
  }
}

console.log('‚úÖ useGamification composable loaded')
