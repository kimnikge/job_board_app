/**
 * üö® PINIA STORE –î–õ–Ø –°–†–û–ß–ù–´–• –í–ê–ö–ê–ù–°–ò–ô
 * 
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –º–æ–¥—É–ª—è —Å—Ä–æ—á–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
 */

import { defineStore } from 'pinia'
import { ref, computed, watch } from 'vue'
import { urgentJobsAPI } from '../services/urgentJobsAPI.js'
import { moduleEvents, SYSTEM_EVENTS } from '../../../core/events/moduleEvents.js'
import { useNotificationService } from '../../../shared/services/notificationService.js'

export const useUrgentJobsStore = defineStore('urgentJobs', () => {
  // üìä –°–û–°–¢–û–Ø–ù–ò–ï
  const jobs = ref([])
  const currentJob = ref(null)
  const filters = ref({
    specialization_id: null,
    city_district_id: null,
    venue_type_id: null,
    urgency_level: null,
    salary_min: null,
    needed_today: false
  })
  
  const loading = ref(false)
  const error = ref(null)
  const lastUpdateTime = ref(null)
  const isRealTimeConnected = ref(false)
  
  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  const userSettings = ref({
    readyForUrgent: false,
    preferredSpecializations: [],
    preferredDistricts: [],
    notificationsEnabled: true
  })
  
  // Real-time –ø–æ–¥–ø–∏—Å–∫–∏
  let realTimeUnsubscribe = null
  let refreshTimer = null
  let expiryCheckTimer = null
  
  // üßÆ COMPUTED –°–í–û–ô–°–¢–í–ê
  const activeJobs = computed(() => 
    jobs.value.filter(job => 
      job.status === 'active' && 
      new Date(job.expires_at) > new Date()
    )
  )
  
  const activeCount = computed(() => activeJobs.value.length)
  
  const todayJobs = computed(() => {
    const today = new Date().toISOString().split('T')[0]
    return activeJobs.value.filter(job => job.needed_date === today)
  })
  
  const criticalJobs = computed(() =>
    activeJobs.value.filter(job => job.urgency_level === 'critical')
  )
  
  const filteredJobs = computed(() => {
    let filtered = activeJobs.value
    
    if (filters.value.specialization_id) {
      filtered = filtered.filter(job => job.specialization_id === filters.value.specialization_id)
    }
    
    if (filters.value.city_district_id) {
      filtered = filtered.filter(job => job.city_district_id === filters.value.city_district_id)
    }
    
    if (filters.value.venue_type_id) {
      filtered = filtered.filter(job => job.venue_type_id === filters.value.venue_type_id)
    }
    
    if (filters.value.urgency_level) {
      filtered = filtered.filter(job => job.urgency_level === filters.value.urgency_level)
    }
    
    if (filters.value.salary_min) {
      filtered = filtered.filter(job => job.salary_min >= filters.value.salary_min)
    }
    
    if (filters.value.needed_today) {
      const today = new Date().toISOString().split('T')[0]
      filtered = filtered.filter(job => job.needed_date === today)
    }
    
    return filtered
  })
  
  const stats = computed(() => ({
    total: jobs.value.length,
    active: activeCount.value,
    today: todayJobs.value.length,
    critical: criticalJobs.value.length
  }))
  
  // üîÑ –î–ï–ô–°–¢–í–ò–Ø
  
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è store
   */
  async function init() {
    try {
      console.log('üö® Initializing Urgent Jobs store...')
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await loadUserSettings()
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
      await loadActiveJobs()
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
      startTimers()
      
      console.log('‚úÖ Urgent Jobs store initialized')
      
    } catch (err) {
      console.error('‚ùå Error initializing urgent jobs store:', err)
      setError(err.message)
    }
  }
  
  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—Ä–æ—á–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
   */
  async function loadActiveJobs() {
    try {
      setLoading(true)
      setError(null)
      
      const data = await urgentJobsAPI.getActiveUrgentJobs()
      jobs.value = data
      lastUpdateTime.value = new Date()
      
      console.log(`üìã Loaded ${data.length} active urgent jobs`)
      
    } catch (err) {
      console.error('‚ùå Error loading urgent jobs:', err)
      setError(err.message)
    } finally {
      setLoading(false)
    }
  }
  
  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ä–æ—á–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ ID
   */
  async function loadJobById(id) {
    try {
      setLoading(true)
      setError(null)
      
      const job = await urgentJobsAPI.getUrgentJobById(id)
      currentJob.value = job
      
      // –û–±–Ω–æ–≤–ª—è–µ–º job –≤ —Å–ø–∏—Å–∫–µ, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å
      const index = jobs.value.findIndex(j => j.id === id)
      if (index !== -1) {
        jobs.value[index] = job
      }
      
      return job
      
    } catch (err) {
      console.error('‚ùå Error loading urgent job:', err)
      setError(err.message)
      throw err
    } finally {
      setLoading(false)
    }
  }
  
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ä–æ—á–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
   */
  async function createUrgentJob(jobData) {
    try {
      setLoading(true)
      setError(null)
      
      const newJob = await urgentJobsAPI.createUrgentJob(jobData)
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
      jobs.value.unshift(newJob)
      
      console.log('‚úÖ Urgent job created:', newJob.id)
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏
      const notificationService = useNotificationService()
      await notificationService.sendUrgentJobNotification(newJob)
      
      return newJob
      
    } catch (err) {
      console.error('‚ùå Error creating urgent job:', err)
      setError(err.message)
      throw err
    } finally {
      setLoading(false)
    }
  }
  
  /**
   * –û—Ç–∫–ª–∏–∫ –Ω–∞ —Å—Ä–æ—á–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é
   */
  async function applyToJob(jobId, applicationData) {
    try {
      setLoading(true)
      setError(null)
      
      const application = await urgentJobsAPI.applyToUrgentJob(jobId, applicationData)
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—Ç–∫–ª–∏–∫–æ–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
      const job = jobs.value.find(j => j.id === jobId)
      if (job) {
        job.applications_count = (job.applications_count || 0) + 1
      }
      
      console.log('‚úÖ Applied to urgent job:', jobId)
      
      return application
      
    } catch (err) {
      console.error('‚ùå Error applying to urgent job:', err)
      setError(err.message)
      throw err
    } finally {
      setLoading(false)
    }
  }
  
  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
   */
  function updateFilters(newFilters) {
    filters.value = { ...filters.value, ...newFilters }
    console.log('üîç Filters updated:', filters.value)
  }
  
  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
   */
  function clearFilters() {
    filters.value = {
      specialization_id: null,
      city_district_id: null,
      venue_type_id: null,
      urgency_level: null,
      salary_min: null,
      needed_today: false
    }
  }
  
  /**
   * –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Å—Ä–æ—á–Ω—ã–º –≤—ã—Ö–æ–¥–∞–º
   */
  async function toggleReadyForUrgent() {
    try {
      userSettings.value.readyForUrgent = !userSettings.value.readyForUrgent
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await saveUserSettings()
      
      // –ï—Å–ª–∏ –≤–∫–ª—é—á–∏–ª–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å - –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      if (userSettings.value.readyForUrgent) {
        await initNotifications()
      }
      
      console.log('üîî Ready for urgent jobs:', userSettings.value.readyForUrgent)
      
    } catch (err) {
      console.error('‚ùå Error toggling ready status:', err)
      setError(err.message)
    }
  }
  
  /**
   * Real-time –ø–æ–¥–ø–∏—Å–∫–∏
   */
  async function subscribeToRealTimeUpdates() {
    try {
      if (realTimeUnsubscribe) {
        realTimeUnsubscribe()
      }
      
      realTimeUnsubscribe = urgentJobsAPI.subscribeToUrgentJobs((payload) => {
        handleRealTimeUpdate(payload)
      })
      
      isRealTimeConnected.value = true
      console.log('üì° Subscribed to urgent jobs real-time updates')
      
    } catch (err) {
      console.error('‚ùå Error subscribing to real-time updates:', err)
      isRealTimeConnected.value = false
    }
  }
  
  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
   */
  function handleRealTimeUpdate(payload) {
    switch (payload.eventType) {
      case 'INSERT':
        // –ù–æ–≤–∞—è —Å—Ä–æ—á–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è
        jobs.value.unshift(payload.new)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if (userSettings.value.readyForUrgent) {
          checkAndNotify(payload.new)
        }
        break
        
      case 'UPDATE':
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        const updateIndex = jobs.value.findIndex(job => job.id === payload.new.id)
        if (updateIndex !== -1) {
          jobs.value[updateIndex] = payload.new
        }
        break
        
      case 'DELETE':
        // –£–¥–∞–ª–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
        const deleteIndex = jobs.value.findIndex(job => job.id === payload.old.id)
        if (deleteIndex !== -1) {
          jobs.value.splice(deleteIndex, 1)
        }
        break
    }
    
    lastUpdateTime.value = new Date()
  }
  
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async function initNotifications() {
    if (!userSettings.value.readyForUrgent || !userSettings.value.notificationsEnabled) {
      return
    }
    
    try {
      const notificationService = useNotificationService()
      await notificationService.requestPermission()
      
      console.log('üîî Urgent jobs notifications initialized')
      
    } catch (err) {
      console.error('‚ùå Error initializing notifications:', err)
    }
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async function checkAndNotify(job) {
    if (!userSettings.value.readyForUrgent || !userSettings.value.notificationsEnabled) {
      return
    }
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const isRelevant = 
        (!userSettings.value.preferredSpecializations.length || 
         userSettings.value.preferredSpecializations.includes(job.specialization_id)) &&
        (!userSettings.value.preferredDistricts.length || 
         userSettings.value.preferredDistricts.includes(job.city_district_id))
      
      if (isRelevant) {
        const notificationService = useNotificationService()
        await notificationService.showUrgentJobNotification(job)
      }
      
    } catch (err) {
      console.error('‚ùå Error sending urgent job notification:', err)
    }
  }
  
  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async function loadUserSettings() {
    // TODO: –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage
    const saved = localStorage.getItem('urgentJobsSettings')
    if (saved) {
      userSettings.value = { ...userSettings.value, ...JSON.parse(saved) }
    }
  }
  
  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async function saveUserSettings() {
    // TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º localStorage
    localStorage.setItem('urgentJobsSettings', JSON.stringify(userSettings.value))
  }
  
  /**
   * –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–æ–≤
   */
  function startTimers() {
    // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    refreshTimer = setInterval(() => {
      loadActiveJobs()
    }, 30000)
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    expiryCheckTimer = setInterval(() => {
      checkExpiredJobs()
    }, 300000)
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π
   */
  function checkExpiredJobs() {
    const now = new Date()
    const expiredJobs = jobs.value.filter(job => 
      job.status === 'active' && new Date(job.expires_at) <= now
    )
    
    if (expiredJobs.length > 0) {
      console.log(`‚è∞ Found ${expiredJobs.length} expired jobs, removing...`)
      
      expiredJobs.forEach(job => {
        const index = jobs.value.findIndex(j => j.id === job.id)
        if (index !== -1) {
          jobs.value[index].status = 'expired'
        }
      })
    }
  }
  
  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤
   */
  function clearTimers() {
    if (refreshTimer) {
      clearInterval(refreshTimer)
      refreshTimer = null
    }
    
    if (expiryCheckTimer) {
      clearInterval(expiryCheckTimer)
      expiryCheckTimer = null
    }
  }
  
  /**
   * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç real-time
   */
  function unsubscribeFromRealTime() {
    if (realTimeUnsubscribe) {
      realTimeUnsubscribe()
      realTimeUnsubscribe = null
      isRealTimeConnected.value = false
    }
  }
  
  /**
   * Helper —Ñ—É–Ω–∫—Ü–∏–∏
   */
  function setLoading(value) {
    loading.value = value
  }
  
  function setError(message) {
    error.value = message
  }
  
  function clearError() {
    error.value = null
  }
  
  /**
   * –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
   */
  function $reset() {
    jobs.value = []
    currentJob.value = null
    clearFilters()
    loading.value = false
    error.value = null
    lastUpdateTime.value = null
    
    clearTimers()
    unsubscribeFromRealTime()
  }
  
  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    jobs,
    currentJob,
    filters,
    loading,
    error,
    lastUpdateTime,
    isRealTimeConnected,
    userSettings,
    
    // Computed
    activeJobs,
    activeCount,
    todayJobs,
    criticalJobs,
    filteredJobs,
    stats,
    
    // –î–µ–π—Å—Ç–≤–∏—è
    init,
    loadActiveJobs,
    loadJobById,
    createUrgentJob,
    applyToJob,
    updateFilters,
    clearFilters,
    toggleReadyForUrgent,
    subscribeToRealTimeUpdates,
    unsubscribeFromRealTime,
    initNotifications,
    clearTimers,
    clearError,
    $reset
  }
})

console.log('üö® Urgent Jobs store ready!')
