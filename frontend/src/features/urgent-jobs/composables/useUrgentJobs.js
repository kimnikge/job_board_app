/**
 * üö® –ö–û–ú–ü–û–ó–ê–ë–õ –î–õ–Ø –°–†–û–ß–ù–´–• –í–ê–ö–ê–ù–°–ò–ô
 * 
 * Vue 3 –∫–æ–º–ø–æ–∑–∞–±–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥—É–ª–µ–º —Å—Ä–æ—á–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
 */

import { computed, watch, onMounted, onUnmounted } from 'vue'
import { useUrgentJobsStore } from '../stores/urgentJobsStore.js'
import { moduleEvents, SYSTEM_EVENTS } from '../../../core/events/moduleEvents.js'

/**
 * üö® –û–°–ù–û–í–ù–û–ô –ö–û–ú–ü–û–ó–ê–ë–õ useUrgentJobs
 */
export function useUrgentJobs() {
  const store = useUrgentJobsStore()
  
  // üìä REACTIVE DATA
  const jobs = computed(() => store.filteredJobs)
  const activeCount = computed(() => store.activeCount)
  const loading = computed(() => store.loading)
  const error = computed(() => store.error)
  const stats = computed(() => store.stats)
  
  // üîÑ ACTIONS
  async function loadJobs() {
    return store.loadActiveJobs()
  }
  
  async function createJob(jobData) {
    return store.createUrgentJob(jobData)
  }
  
  async function applyToJob(jobId, applicationData) {
    return store.applyToJob(jobId, applicationData)
  }
  
  function updateFilters(filters) {
    store.updateFilters(filters)
  }
  
  function clearFilters() {
    store.clearFilters()
  }
  
  function clearError() {
    store.clearError()
  }
  
  return {
    // Data
    jobs,
    activeCount,
    loading,
    error,
    stats,
    
    // Actions
    loadJobs,
    createJob,
    applyToJob,
    updateFilters,
    clearFilters,
    clearError
  }
}

/**
 * üéØ –ö–û–ú–ü–û–ó–ê–ë–õ –î–õ–Ø –û–î–ù–û–ô –°–†–û–ß–ù–û–ô –í–ê–ö–ê–ù–°–ò–ò
 */
export function useUrgentJob(jobId) {
  const store = useUrgentJobsStore()
  
  const job = computed(() => store.currentJob)
  const loading = computed(() => store.loading)
  const error = computed(() => store.error)
  
  async function loadJob() {
    if (!jobId) {
      throw new Error('Job ID is required')
    }
    
    return store.loadJobById(jobId)
  }
  
  async function applyToJob(applicationData) {
    if (!jobId) {
      throw new Error('Job ID is required')
    }
    
    return store.applyToJob(jobId, applicationData)
  }
  
  // –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  onMounted(() => {
    if (jobId) {
      loadJob()
    }
  })
  
  return {
    job,
    loading,
    error,
    loadJob,
    applyToJob
  }
}

/**
 * üîî –ö–û–ú–ü–û–ó–ê–ë–õ –î–õ–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –û –°–†–û–ß–ù–´–• –í–ê–ö–ê–ù–°–ò–Ø–•
 */
export function useUrgentJobNotifications() {
  const store = useUrgentJobsStore()
  
  const isReady = computed(() => store.userSettings.readyForUrgent)
  const notificationsEnabled = computed(() => store.userSettings.notificationsEnabled)
  const preferredSpecializations = computed(() => store.userSettings.preferredSpecializations)
  const preferredDistricts = computed(() => store.userSettings.preferredDistricts)
  
  async function toggleReady() {
    return store.toggleReadyForUrgent()
  }
  
  function updatePreferences(preferences) {
    store.userSettings.preferredSpecializations = preferences.specializations || []
    store.userSettings.preferredDistricts = preferences.districts || []
    store.saveUserSettings()
  }
  
  function toggleNotifications() {
    store.userSettings.notificationsEnabled = !store.userSettings.notificationsEnabled
    store.saveUserSettings()
  }
  
  return {
    isReady,
    notificationsEnabled,
    preferredSpecializations,
    preferredDistricts,
    toggleReady,
    updatePreferences,
    toggleNotifications
  }
}

/**
 * üîç –ö–û–ú–ü–û–ó–ê–ë–õ –î–õ–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–ò –°–†–û–ß–ù–´–• –í–ê–ö–ê–ù–°–ò–ô
 */
export function useUrgentJobFilters() {
  const store = useUrgentJobsStore()
  
  const filters = computed(() => store.filters)
  const filteredCount = computed(() => store.filteredJobs.length)
  const hasActiveFilters = computed(() => 
    Object.values(store.filters).some(value => 
      value !== null && value !== false && value !== ''
    )
  )
  
  function setSpecialization(specializationId) {
    store.updateFilters({ specialization_id: specializationId })
  }
  
  function setDistrict(districtId) {
    store.updateFilters({ city_district_id: districtId })
  }
  
  function setVenueType(venueTypeId) {
    store.updateFilters({ venue_type_id: venueTypeId })
  }
  
  function setUrgencyLevel(level) {
    store.updateFilters({ urgency_level: level })
  }
  
  function setMinSalary(salary) {
    store.updateFilters({ salary_min: salary })
  }
  
  function toggleTodayOnly() {
    store.updateFilters({ needed_today: !store.filters.needed_today })
  }
  
  function clearAll() {
    store.clearFilters()
  }
  
  return {
    filters,
    filteredCount,
    hasActiveFilters,
    setSpecialization,
    setDistrict,
    setVenueType,
    setUrgencyLevel,
    setMinSalary,
    toggleTodayOnly,
    clearAll
  }
}

/**
 * üìä –ö–û–ú–ü–û–ó–ê–ë–õ –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò –°–†–û–ß–ù–´–• –í–ê–ö–ê–ù–°–ò–ô
 */
export function useUrgentJobStats() {
  const store = useUrgentJobsStore()
  
  const stats = computed(() => store.stats)
  const todayJobs = computed(() => store.todayJobs)
  const criticalJobs = computed(() => store.criticalJobs)
  
  const todayCount = computed(() => todayJobs.value.length)
  const criticalCount = computed(() => criticalJobs.value.length)
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  const timeStats = computed(() => {
    const now = new Date()
    const jobs = store.activeJobs
    
    const expiringToday = jobs.filter(job => {
      const expires = new Date(job.expires_at)
      return expires.toDateString() === now.toDateString()
    })
    
    const expiringSoon = jobs.filter(job => {
      const expires = new Date(job.expires_at)
      const hoursLeft = (expires - now) / (1000 * 60 * 60)
      return hoursLeft <= 4 && hoursLeft > 0
    })
    
    return {
      expiringToday: expiringToday.length,
      expiringSoon: expiringSoon.length
    }
  })
  
  return {
    stats,
    todayCount,
    criticalCount,
    timeStats,
    todayJobs,
    criticalJobs
  }
}

/**
 * ‚è±Ô∏è –ö–û–ú–ü–û–ó–ê–ë–õ –î–õ–Ø –†–ê–ë–û–¢–´ –°–û –í–†–ï–ú–ï–ù–ï–ú –°–†–û–ß–ù–´–• –í–ê–ö–ê–ù–°–ò–ô
 */
export function useUrgentJobTiming() {
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
   */
  function getTimeLeft(expiresAt) {
    const now = new Date()
    const expires = new Date(expiresAt)
    const diff = expires - now
    
    if (diff <= 0) {
      return { expired: true, text: '–ò—Å—Ç–µ–∫–ª–∞' }
    }
    
    const hours = Math.floor(diff / (1000 * 60 * 60))
    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60))
    
    if (hours >= 24) {
      const days = Math.floor(hours / 24)
      return { 
        expired: false, 
        urgent: false,
        text: `${days}–¥ ${hours % 24}—á`,
        hours: hours
      }
    } else if (hours > 0) {
      return { 
        expired: false, 
        urgent: hours <= 4,
        text: `${hours}—á ${minutes}–º`,
        hours: hours
      }
    } else {
      return { 
        expired: false, 
        urgent: true,
        text: `${minutes}–º`,
        hours: 0
      }
    }
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å CSS –∫–ª–∞—Å—Å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
   */
  function getTimeClass(expiresAt) {
    const timeInfo = getTimeLeft(expiresAt)
    
    if (timeInfo.expired) return 'time-expired'
    if (timeInfo.urgent) return 'time-urgent'
    if (timeInfo.hours <= 12) return 'time-warning'
    return 'time-normal'
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–∫–æ–Ω–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
   */
  function getTimeIcon(expiresAt) {
    const timeInfo = getTimeLeft(expiresAt)
    
    if (timeInfo.expired) return '‚è∞'
    if (timeInfo.urgent) return 'üî•'
    if (timeInfo.hours <= 12) return '‚ö°'
    return 'üïí'
  }
  
  return {
    getTimeLeft,
    getTimeClass,
    getTimeIcon
  }
}

/**
 * üöÄ –ö–û–ú–ü–û–ó–ê–ë–õ –î–õ–Ø QUICK ACTIONS
 */
export function useUrgentJobActions() {
  const store = useUrgentJobsStore()
  
  /**
   * –ë—ã—Å—Ç—Ä—ã–π –æ—Ç–∫–ª–∏–∫ "–ì–û–¢–û–í –í–´–ô–¢–ò!"
   */
  async function quickApply(jobId, userInfo) {
    const applicationData = {
      user_id: userInfo.id,
      phone: userInfo.phone,
      telegram: userInfo.telegram,
      message: '–ì–û–¢–û–í –í–´–ô–¢–ò –ü–†–Ø–ú–û –°–ï–ô–ß–ê–°!',
      available_immediately: true
    }
    
    return store.applyToJob(jobId, applicationData)
  }
  
  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
   */
  function showTodayOnly() {
    store.updateFilters({ needed_today: true })
  }
  
  /**
   * –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
   */
  function showCriticalOnly() {
    store.updateFilters({ urgency_level: 'critical' })
  }
  
  /**
   * –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ
   */
  function showAll() {
    store.clearFilters()
  }
  
  return {
    quickApply,
    showTodayOnly,
    showCriticalOnly,
    showAll
  }
}

console.log('üö® Urgent Jobs composables ready!')
