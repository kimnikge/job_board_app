// üì± notifications.service.js ‚Äî –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Å–ª—É–∂–±–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
import { sendTelegramNotification } from './telegramNotify.js'
import { profileService } from './profile.service.js'
import { isDemoMode } from './supabase.js'

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Å–ª—É–∂–±–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Job Board App
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –µ–¥–∏–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ
 */
export const notificationsService = {
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å telegram chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserChatId(userId) {
    try {
      const { data: profile } = await profileService.getProfile(userId)
      return profile?.telegram_chat_id || null
    } catch (error) {
      console.warn('Error getting user chat_id:', error)
      return null
    }
  },

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async notifyUser(userId, message, type = 'info') {
    try {
      const chatId = await this.getUserChatId(userId)
      if (!chatId) {
        console.warn('‚ùå No telegram chat_id found for user:', userId)
        return false
      }

      // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
      const typeEmojis = {
        success: '‚úÖ',
        warning: '‚ö†Ô∏è',
        error: '‚ùå',
        info: '‚ÑπÔ∏è',
        job: 'üíº',
        badge: 'üèÖ',
        welcome: 'üéâ',
        urgent: 'üö®'
      }

      const emoji = typeEmojis[type] || '‚ÑπÔ∏è'
      const formattedMessage = `${emoji} ${message}`
      
      await sendTelegramNotification(chatId, formattedMessage)
      return true
    } catch (error) {
      console.error('üí• Error sending notification:', error)
      return false
    }
  },

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
   */
  async notifyNewJob(jobData, targetUsers = []) {
    try {
      const message = `–ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è: ${jobData.title}
üìç ${jobData.location || '–ê—Å—Ç–∞–Ω–∞'}
üí∞ ${this.formatSalary(jobData.salary_from, jobData.salary_to)}
üè¢ ${jobData.company_name || '–ö–æ–º–ø–∞–Ω–∏—è'}

–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Job Board!`

      // –ï—Å–ª–∏ targetUsers –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (targetUsers.length === 0) {
        targetUsers = ['763612632']
      }

      for (const userId of targetUsers) {
        await this.notifyUser(userId, message, 'job')
      }

      return true
    } catch (error) {
      console.error('Error sending job notification:', error)
      return false
    }
  },

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ä–æ—á–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
   */
  async notifyUrgentJob(jobData, targetUsers = []) {
    try {
      const message = `–°–†–û–ß–ù–ê–Ø –í–ê–ö–ê–ù–°–ò–Ø: ${jobData.title}
üìç ${jobData.location || '–ê—Å—Ç–∞–Ω–∞'}
üí∞ ${this.formatSalary(jobData.salary_from, jobData.salary_to)}
üè¢ ${jobData.company_name || '–ö–æ–º–ø–∞–Ω–∏—è'}
‚è∞ –ù—É–∂–Ω–æ ${jobData.needed_date ? this.formatDate(jobData.needed_date) : '—Å—Ä–æ—á–Ω–æ'}

–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è –±—ã—Å—Ç—Ä–µ–µ!`

      // –ï—Å–ª–∏ targetUsers –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (targetUsers.length === 0) {
        targetUsers = ['763612632']
      }

      for (const userId of targetUsers) {
        await this.notifyUser(userId, message, 'urgent')
      }

      return true
    } catch (error) {
      console.error('Error sending urgent job notification:', error)
      return false
    }
  },

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–µ–π–¥–∂–∞
   */
  async notifyBadgeAwarded(userId, badgeData, reason = null) {
    try {
      const message = `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–µ–π–¥–∂ "${badgeData.name}"!
${badgeData.icon_url || 'üèÖ'} ${badgeData.description || '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!'}
${reason ? `\n–ü—Ä–∏—á–∏–Ω–∞: ${reason}` : ''}

–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª–µ Job Board!`

      await this.notifyUser(userId, message, 'badge')
      return true
    } catch (error) {
      console.error('Error sending badge notification:', error)
      return false
    }
  },

  /**
   * –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
   */
  async notifyWelcome(userId, userData) {
    try {
      const message = `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Job Board, ${userData.full_name || '–Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:
üìã –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –æ–±—â–µ–ø–∏—Ç–µ
üíº –°–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–∑—é–º–µ
üèÖ –ü–æ–ª—É—á–∞—Ç—å –±–µ–π–¥–∂–∏ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
üì± –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö

–ù–∞—á–Ω–∏—Ç–µ —Å –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã –º–µ—á—Ç—ã!`

      await this.notifyUser(userId, message, 'welcome')
      return true
    } catch (error) {
      console.error('Error sending welcome notification:', error)
      return false
    }
  },

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é
   */
  async notifyApplicationStatus(userId, jobTitle, status) {
    try {
      const statusMessages = {
        'applied': `–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é "${jobTitle}" —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!`,
        'viewed': `–†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –≤–∞—à—É –∑–∞—è–≤–∫—É –Ω–∞ "${jobTitle}"`,
        'shortlisted': `–í—ã –ø—Ä–æ—à–ª–∏ –≤ –∫–æ—Ä–æ—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é "${jobTitle}"!`,
        'rejected': `–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏ "${jobTitle}" –≤—ã–±—Ä–∞–Ω –¥—Ä—É–≥–æ–π –∫–∞–Ω–¥–∏–¥–∞—Ç`,
        'interview': `–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏ "${jobTitle}"!`,
        'hired': `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–∏–Ω—è—Ç—ã –Ω–∞ —Ä–∞–±–æ—Ç—É –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏ "${jobTitle}"!`
      }

      const message = statusMessages[status] || `–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏ "${jobTitle}"`
      const notificationType = ['hired', 'shortlisted', 'interview'].includes(status) ? 'success' : 'info'

      await this.notifyUser(userId, message, notificationType)
      return true
    } catch (error) {
      console.error('Error sending application status notification:', error)
      return false
    }
  },

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏/–æ—Ç–∫–ª–∏–∫–µ
   */
  async notifyNewMessage(userId, fromUser, message) {
    try {
      const notificationText = `–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${fromUser}:
"${message.length > 100 ? message.substring(0, 100) + '...' : message}"

–û—Ç–≤–µ—Ç–∏—Ç—å –≤ Job Board!`

      await this.notifyUser(userId, notificationText, 'info')
      return true
    } catch (error) {
      console.error('Error sending message notification:', error)
      return false
    }
  },

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—Ä–ø–ª–∞—Ç—ã
   */
  formatSalary(from, to) {
    if (from && to) {
      return `${from.toLocaleString()} - ${to.toLocaleString()} ‚Ç∏`
    } else if (from) {
      return `–æ—Ç ${from.toLocaleString()} ‚Ç∏`
    } else if (to) {
      return `–¥–æ ${to.toLocaleString()} ‚Ç∏`
    }
    return '–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏'
  },

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
   */
  formatDate(dateString) {
    try {
      const date = new Date(dateString)
      return date.toLocaleDateString('ru-RU', {
        day: 'numeric',
        month: 'long',
        year: 'numeric'
      })
    } catch (error) {
      return dateString
    }
  },

  /**
   * –ú–∞—Å—Å–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º
   */
  async notifyBySpecialization(specializationId, message, messageType = 'info') {
    try {
      // TODO: –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      // const users = await profileService.getUsersBySpecialization(specializationId)
      
      // –ü–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await this.notifyUser('763612632', message, messageType)
      return true
    } catch (error) {
      console.error('Error sending specialization notifications:', error)
      return false
    }
  },

  /**
   * –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
   */
  async notifyByLocation(district, message, messageType = 'info') {
    try {
      // TODO: –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–∞–π–æ–Ω—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      // const users = await profileService.getUsersByDistrict(district)
      
      // –ü–æ–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await this.notifyUser('763612632', message, messageType)
      return true
    } catch (error) {
      console.error('Error sending location notifications:', error)
      return false
    }
  }
}
