// ‚ú® API –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò –°–û–ì–õ–ê–°–ù–û –¢–ó: –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô –°–ü–û–°–û–ë –í–•–û–î–ê - TELEGRAM LOGIN
import { supabase, isDemoMode } from './supabase.js'
import { notificationsService } from './notifications.service.js'
import { profileService } from './profile.service.js'

// üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram
export const authService = {
  // –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Telegram
  async loginWithTelegram(telegramData) {
    try {
      if (isDemoMode) {
        // Demo —Ä–µ–∂–∏–º - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ localStorage
        const demoUser = {
          id: `demo-user-${telegramData.id}`,
          user_metadata: { 
            user_type: 'candidate', 
            full_name: telegramData.first_name + (telegramData.last_name ? ' ' + telegramData.last_name : ''),
            telegram_id: telegramData.id,
            telegram_username: telegramData.username,
            telegram_photo_url: telegramData.photo_url
          }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –≤ localStorage
        localStorage.setItem('demo-session', JSON.stringify(demoUser))
        
        return {
          data: { user: demoUser },
          error: null
        }
      }

      // –í—ã–∑—ã–≤–∞–µ–º Edge Function –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram Login
      console.log('üîß Calling Edge Function telegram-login with data:', telegramData)
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥ —á—Ç–æ —ç—Ç–æ Telegram Web App
      if (window.Telegram && window.Telegram.WebApp) {
        telegramData.is_web_app = true
        telegramData.init_data = window.Telegram.WebApp.initData
        console.log('üîß Telegram Web App detected, init_data:', telegramData.init_data)
      }
      
      // –î–µ–ª–∞–µ–º –ø—Ä—è–º–æ–π HTTP –∑–∞–ø—Ä–æ—Å –∫ Edge Function
      const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º anon key –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      const anonKey = import.meta.env.VITE_SUPABASE_ANON_KEY
      
      console.log('üîß Calling Edge Function:', `${supabaseUrl}/functions/v1/telegram-login`)
      console.log('üîß Request payload:', JSON.stringify(telegramData, null, 2))
      
      const response = await fetch(`${supabaseUrl}/functions/v1/telegram-login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${anonKey}`,
          'apikey': anonKey
        },
        body: JSON.stringify(telegramData)
      })

      console.log('üîß Response status:', response.status)
      console.log('üîß Response headers:', Object.fromEntries(response.headers.entries()))
      
      const result = await response.json()
      console.log('üîß Edge Function response:', { response: result, status: response.status })

      if (!response.ok) {
        throw new Error(result.error || 'Edge Function failed')
      }

      const data = result

      // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –ë–î
      if (data?.user) {
        console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –ë–î...')
        try {
          const { data: profile, error: profileError } = await profileService.createOrUpdateProfile(data.user)
          if (profileError) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ):', profileError)
          } else {
            console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω:', profile)
            // –î–æ–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
            if (profile) {
              data.user.profile = profile
            }
          }
        } catch (profileError) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º:', profileError)
        }
      }

      return { data, error: null }
    } catch (error) {
      console.error('Telegram login error:', error)
      return { data: null, error }
    }
  },

  // –í—ã—Ö–æ–¥
  async logout() {
    try {
      if (isDemoMode) {
        // –í demo —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏–∑ localStorage
        localStorage.removeItem('demo-session')
        return { error: null }
      }

      const { error } = await supabase.auth.signOut()
      return { error }
    } catch (error) {
      console.error('Logout error:', error)
      return { error }
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getCurrentUser() {
    try {
      if (isDemoMode) {
        // –í demo —Ä–µ–∂–∏–º–µ —Ç–æ–∂–µ —Ç—Ä–µ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é!
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –≤ localStorage
        const savedSession = localStorage.getItem('demo-session')
        if (savedSession) {
          return {
            data: {
              user: JSON.parse(savedSession)
            },
            error: null
          }
        }
        
        // –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ—Å—Å–∏–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        return {
          data: { user: null },
          error: null
        }
      }

      const { data, error } = await supabase.auth.getUser()
      
      // –í production —Ä–µ–∂–∏–º–µ AuthSessionMissingError —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
      if (error && error.message.includes('Auth session missing')) {
        return {
          data: { user: null },
          error: null
        }
      }
      
      return { data, error }
    } catch (error) {
      console.error('Get user error:', error)
      return { data: null, error }
    }
  },

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏ (–¥–ª—è callback –æ—Ç Telegram)
  async setSession(sessionData) {
    try {
      if (isDemoMode) {
        return {
          data: {
            user: {
              id: 'demo-user',
              user_metadata: { 
                user_type: 'candidate', 
                full_name: 'Demo User',
                telegram_id: 123456789,
                telegram_username: 'demouser'
              }
            }
          },
          error: null
        }
      }

      const { data, error } = await supabase.auth.setSession({
        access_token: sessionData.access_token,
        refresh_token: sessionData.refresh_token
      })
      
      return { data, error }
    } catch (error) {
      console.error('Set session error:', error)
      return { data: null, error }
    }
  },

  // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram Web App (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±)
  async loginWithWebApp(webAppData) {
    try {
      console.log('üì± –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram Web App:', webAppData)
      
      if (isDemoMode) {
        // –í demo —Ä–µ–∂–∏–º–µ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Web App –¥–∞–Ω–Ω—ã—Ö
        const demoUser = {
          id: `webapp-user-${webAppData.id}`,
          user_metadata: { 
            user_type: 'candidate', 
            full_name: webAppData.first_name + (webAppData.last_name ? ' ' + webAppData.last_name : ''),
            telegram_id: webAppData.id,
            telegram_username: webAppData.username,
            telegram_photo_url: webAppData.photo_url,
            auth_method: 'telegram_web_app',
            platform: webAppData.platform || 'web'
          }
        }
        
        localStorage.setItem('demo-session', JSON.stringify(demoUser))
        
        return {
          data: { user: demoUser },
          error: null
        }
      }

      // –í production —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é Edge Function  
      const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
      const anonKey = import.meta.env.VITE_SUPABASE_ANON_KEY
      
      console.log('üîß –ü—Ä–æ—Å—Ç–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Telegram')
      
      const response = await fetch(`${supabaseUrl}/functions/v1/telegram-simple-auth`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${anonKey}`,
          'apikey': anonKey
        },
        body: JSON.stringify(webAppData)
      })

      console.log('üîß Response status:', response.status)
      const result = await response.json()
      console.log('üîß Edge Function response:', result)

      if (!response.ok) {
        throw new Error(result.error || 'Telegram Web App authentication failed')
      }

      // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –ë–î
      if (result?.user) {
        console.log('‚úÖ Web App –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –ë–î...')
        try {
          const { data: profile, error: profileError } = await profileService.createOrUpdateProfile(result.user)
          if (profileError) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ):', profileError)
          } else {
            console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω:', profile)
            // –î–æ–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
            if (profile) {
              result.user.profile = profile
            }
          }
        } catch (profileError) {
          console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º:', profileError)
        }
      }

      return { data: result, error: null }
      
    } catch (error) {
      console.error('Telegram Web App login error:', error)
      return { data: null, error }
    }
  },

  // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ URL —Ç–æ–∫–µ–Ω (Telegram URL Authorization)
  async loginWithURLToken(token, additionalData = {}) {
    try {
      console.log('üîó –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ URL —Ç–æ–∫–µ–Ω:', token)
      
      if (isDemoMode) {
        // –í demo —Ä–µ–∂–∏–º–µ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞
        const demoUser = {
          id: `url-auth-${Date.now()}`,
          user_metadata: { 
            user_type: 'candidate', 
            full_name: 'URL Authorized User',
            telegram_id: `url_${token.slice(-8)}`,
            auth_method: 'telegram_url_auth',
            autologin_token: token,
            ...additionalData
          }
        }
        
        localStorage.setItem('demo-session', JSON.stringify(demoUser))
        
        return {
          data: { user: demoUser },
          error: null
        }
      }

      // –í production —Ä–µ–∂–∏–º–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ backend –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      const supabaseUrl = import.meta.env.VITE_SUPABASE_URL
      const anonKey = import.meta.env.VITE_SUPABASE_ANON_KEY
      
      const response = await fetch(`${supabaseUrl}/functions/v1/telegram-url-auth`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${anonKey}`,
          'apikey': anonKey
        },
        body: JSON.stringify({ 
          autologin_token: token,
          ...additionalData
        })
      })

      if (!response.ok) {
        const errorData = await response.json()
        throw new Error(errorData.error || 'URL authentication failed')
      }

      const result = await response.json()
      return { data: result, error: null }
      
    } catch (error) {
      console.error('URL token login error:', error)
      return { data: null, error }
    }
  },

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  onAuthStateChange(callback) {
    if (isDemoMode) {
      // –í demo —Ä–µ–∂–∏–º–µ –Ω–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑—É–µ–º, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
      const savedSession = localStorage.getItem('demo-session')
      if (savedSession) {
        callback('SIGNED_IN', { user: JSON.parse(savedSession) })
      }
      return { data: { subscription: { unsubscribe: () => {} } } }
    }

    return supabase.auth.onAuthStateChange(callback)
  }
}

console.log('‚úÖ Auth service initialized (Telegram Login only)')
