// ‚ú® API –í–ê–ö–ê–ù–°–ò–ô - –≠–¢–ê–ü 4.1.3
import { supabase, isDemoMode, DEFAULT_SELECT } from './supabase.js'

// üíº –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ (–æ–±—ã—á–Ω—ã–µ + —Å—Ä–æ—á–Ω—ã–µ)
export const jobsService = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏
  async getAllJobs(filters = {}) {
    try {
      if (isDemoMode) {
        return {
          data: [
            {
              id: 1,
              title: '–ü–æ–≤–∞—Ä –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–π –∫—É—Ö–Ω–∏',
              description: '–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—ã—Ç–Ω—ã–π –ø–æ–≤–∞—Ä –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–π –∫—É—Ö–Ω–∏',
              salary_from: 300000,
              salary_to: 500000,
              is_urgent: false,
              specialization_id: 1,
              district_id: 1,
              company_id: 1,
              created_at: new Date().toISOString(),
              specializations: { name: '–ü–æ–≤–∞—Ä', icon: 'üë®‚Äçüç≥' },
              city_districts: { name: '–ï—Å–∏–ª—å—Å–∫–∏–π —Ä–∞–π–æ–Ω' },
              companies: { name: 'Grand Restaurant', logo_url: '/images/default-company.png' }
            },
            {
              id: 2,
              title: '–û—Ñ–∏—Ü–∏–∞–Ω—Ç –≤ –∫–∞—Ñ–µ',
              description: '–ò—â–µ–º –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–≥–æ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞',
              salary_from: 200000,
              salary_to: 300000,
              is_urgent: true,
              specialization_id: 2,
              district_id: 2,
              company_id: 2,
              created_at: new Date().toISOString(),
              specializations: { name: '–û—Ñ–∏—Ü–∏–∞–Ω—Ç', icon: 'ü§µ' },
              city_districts: { name: '–ê–ª–º–∞—Ç–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω' },
              companies: { name: 'Cozy Cafe', logo_url: '/images/default-company.png' }
            }
          ],
          error: null
        }
      }

      let query = supabase
        .from('job_postings')
        .select(`
          *,
          specializations(name, icon),
          city_districts(name),
          venue_types(name, icon),
          companies(name, logo_url)
        `)
        .eq('status', 'active')
        .order('created_at', { ascending: false })

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
      if (filters.specialization_id) {
        query = query.eq('specialization_id', filters.specialization_id)
      }
      if (filters.district_id) {
        query = query.eq('district_id', filters.district_id)
      }
      if (filters.is_urgent !== undefined) {
        query = query.eq('is_urgent', filters.is_urgent)
      }

      const { data, error } = await query

      return { data, error }
    } catch (error) {
      console.error('Get jobs error:', error)
      return { data: null, error }
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ä–æ—á–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
  async getUrgentJobs() {
    return this.getAllJobs({ is_urgent: true })
  },

  // –ü–æ–ª—É—á–∏—Ç—å –æ–±—ã—á–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
  async getRegularJobs() {
    return this.getAllJobs({ is_urgent: false })
  },

  // –ü–æ–ª—É—á–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –ø–æ ID
  async getJobById(id) {
    try {
      if (isDemoMode) {
        return {
          data: {
            id: id,
            title: 'Demo Job',
            description: 'This is a demo job',
            salary_from: 250000,
            salary_to: 400000,
            is_urgent: false,
            specialization_id: 1,
            district_id: 1,
            company_id: 1,
            created_at: new Date().toISOString(),
            specializations: { name: '–ü–æ–≤–∞—Ä', icon: 'üë®‚Äçüç≥' },
            city_districts: { name: '–ï—Å–∏–ª—å—Å–∫–∏–π —Ä–∞–π–æ–Ω' },
            companies: { name: 'Demo Company', logo_url: '/images/default-company.png' }
          },
          error: null
        }
      }

      const { data, error } = await supabase
        .from('job_postings')
        .select(`
          *,
          specializations(name, icon),
          city_districts(name),
          venue_types(name, icon),
          companies(name, logo_url, phone, email)
        `)
        .eq('id', id)
        .single()

      return { data, error }
    } catch (error) {
      console.error('Get job by ID error:', error)
      return { data: null, error }
    }
  },

  // –°–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é
  async createJob(jobData) {
    try {
      if (isDemoMode) {
        return {
          data: {
            id: Date.now(),
            ...jobData,
            created_at: new Date().toISOString(),
            status: 'active'
          },
          error: null
        }
      }

      const { data, error } = await supabase
        .from('job_postings')
        .insert([jobData])
        .select()
        .single()

      return { data, error }
    } catch (error) {
      console.error('Create job error:', error)
      return { data: null, error }
    }
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é
  async updateJob(id, jobData) {
    try {
      if (isDemoMode) {
        return {
          data: { id, ...jobData, updated_at: new Date().toISOString() },
          error: null
        }
      }

      const { data, error } = await supabase
        .from('job_postings')
        .update(jobData)
        .eq('id', id)
        .select()
        .single()

      return { data, error }
    } catch (error) {
      console.error('Update job error:', error)
      return { data: null, error }
    }
  },

  // –£–¥–∞–ª–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é
  async deleteJob(id) {
    try {
      if (isDemoMode) {
        return { error: null }
      }

      const { error } = await supabase
        .from('job_postings')
        .delete()
        .eq('id', id)

      return { error }
    } catch (error) {
      console.error('Delete job error:', error)
      return { error }
    }
  }
}

console.log('‚úÖ Jobs service initialized')
