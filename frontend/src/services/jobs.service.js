// ‚ú® API –í–ê–ö–ê–ù–°–ò–ô - –≠–¢–ê–ü 4.1.3
import { supabase, isDemoMode, DEFAULT_SELECT, isAuthenticated, handleAuthError } from './supabase.js'
import { notificationsService } from './notifications.service.js'
import { monetizationService } from './monetization.service.js'

// üíº –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ (–æ–±—ã—á–Ω—ã–µ + —Å—Ä–æ—á–Ω—ã–µ)
export const jobsService = {
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏
  async getAllJobs(filters = {}) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      const userAuthenticated = await isAuthenticated()
      
      if (isDemoMode || !userAuthenticated) {
        // Demo —Ä–µ–∂–∏–º –∏–ª–∏ –Ω–µ–∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
        return {
          data: [
            {
              id: 1,
              title: '–ü–æ–≤–∞—Ä –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–π –∫—É—Ö–Ω–∏',
              description: '–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—ã—Ç–Ω—ã–π –ø–æ–≤–∞—Ä –¥–ª—è —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞ –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–π –∫—É—Ö–Ω–∏. –û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏: –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Å—Ç—ã, –ø–∏—Ü—Ü—ã, —Ä–∏–∑–æ—Ç—Ç–æ.',
              category: 'kitchen',
              position_type: 'cook',
              employment_type: 'full_time',
              schedule_type: 'shift',
              salary_min: 300000,
              salary_max: 500000,
              salary_type: 'monthly',
              salary_currency: 'KZT',
              required_skills: ['–ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Å—Ç—ã', '–∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è', '—Ä–∞–±–æ—Ç–∞ —Å –ø–∏—Ü—Ü–µ–π'],
              preferred_skills: ['–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫', '–æ–ø—ã—Ç –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞—Ö'],
              benefits: ['–ø–∏—Ç–∞–Ω–∏–µ', '—É–Ω–∏—Ñ–æ—Ä–º–∞', '–æ–±—É—á–µ–Ω–∏–µ'],
              address: '—É–ª. –ê–±–∞—è, 150',
              district: '–ê–ª–º–∞–ª–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω',
              contact_method: 'application',
              is_urgent: false,
              is_active: true,
              status: 'active',
              city_id: 1,
              created_at: new Date().toISOString(),
              employers: { 
                company_name: 'Grand Italian Restaurant', 
                company_type: 'restaurant',
                logo_url: '/images/default-company.png',
                is_verified: true,
                rating: 4.5
              }
            },
            {
              id: 2,
              title: '–û—Ñ–∏—Ü–∏–∞–Ω—Ç –≤ –∫–∞—Ñ–µ',
              description: '–ò—â–µ–º –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–≥–æ –æ—Ñ–∏—Ü–∏–∞–Ω—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —É—é—Ç–Ω–æ–º –∫–∞—Ñ–µ –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞.',
              category: 'service',
              position_type: 'waiter',
              employment_type: 'part_time',
              schedule_type: 'flexible',
              salary_min: 150000,
              salary_max: 250000,
              salary_type: 'monthly',
              salary_currency: 'KZT',
              required_skills: ['–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤', '–∑–Ω–∞–Ω–∏–µ –º–µ–Ω—é', '–∫–∞—Å—Å–∞'],
              benefits: ['—á–∞–µ–≤—ã–µ', '–ø–∏—Ç–∞–Ω–∏–µ', '–≥–∏–±–∫–∏–π –≥—Ä–∞—Ñ–∏–∫'],
              address: '–ø—Ä. –î–æ—Å—Ç—ã–∫, 36',
              district: '–ú–µ–¥–µ—É—Å–∫–∏–π —Ä–∞–π–æ–Ω',
              contact_method: 'telegram',
              contact_telegram: '@cafe_jobs',
              is_urgent: true,
              is_active: true,
              status: 'active',
              city_id: 1,
              created_at: new Date().toISOString(),
              employers: { 
                company_name: 'Cozy Corner Cafe', 
                company_type: 'cafe',
                logo_url: '/images/default-company.png',
                is_verified: false,
                rating: 4.2
              }
            }
          ],
          error: null
        }
      }

      let query = supabase
        .from('job_postings')
        .select(`
          *,
          employers!company_id(company_name, company_type, logo_url, is_verified, rating)
        `)
        .eq('is_active', true)
        .eq('status', 'active')
        .order('created_at', { ascending: false })

      // –ü—Ä–∏–º–µ–Ω—è–µ–º HoReCa —Ñ–∏–ª—å—Ç—Ä—ã
      if (filters.category) {
        query = query.eq('category', filters.category)
      }
      if (filters.position_type) {
        query = query.eq('position_type', filters.position_type)
      }
      if (filters.city_id) {
        query = query.eq('city_id', filters.city_id)
      }
      if (filters.employment_type) {
        query = query.eq('employment_type', filters.employment_type)
      }
      if (filters.schedule_type) {
        query = query.eq('schedule_type', filters.schedule_type)
      }
      if (filters.salary_min) {
        query = query.gte('salary_max', filters.salary_min)
      }
      if (filters.salary_max) {
        query = query.lte('salary_min', filters.salary_max)
      }
      if (filters.is_urgent !== undefined) {
        query = query.eq('is_urgent', filters.is_urgent)
      }
      if (filters.district) {
        query = query.eq('district', filters.district)
      }
      if (filters.required_skills && filters.required_skills.length > 0) {
        query = query.overlaps('required_skills', filters.required_skills)
      }

      const { data, error } = await query

      return { data, error }
    } catch (error) {
      console.error('Get jobs error:', error)
      
      // –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
      if (handleAuthError(error)) {
        return this.getAllJobs(filters) // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º–∏
      }
      
      return { data: null, error }
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ä–æ—á–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
  async getUrgentJobs() {
    return this.getAllJobs({ is_urgent: true })
  },

  // –ü–æ–ª—É—á–∏—Ç—å –æ–±—ã—á–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
  async getRegularJobs() {
    return this.getAllJobs({ is_urgent: false })
  },

  // –ü–æ–ª—É—á–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –ø–æ ID
  async getJobById(id) {
    try {
      if (isDemoMode) {
        return {
          data: {
            id: id,
            title: 'Demo Job',
            description: 'This is a demo job',
            salary_from: 250000,
            salary_to: 400000,
            is_urgent: false,
            specialization_id: 1,
            district_id: 1,
            company_id: 1,
            created_at: new Date().toISOString(),
            specializations: { name: '–ü–æ–≤–∞—Ä', icon: 'üë®‚Äçüç≥' },
            city_districts: { name: '–ï—Å–∏–ª—å—Å–∫–∏–π —Ä–∞–π–æ–Ω' },
            companies: { name: 'Demo Company', logo_url: '/images/default-company.png' }
          },
          error: null
        }
      }

      const { data, error } = await supabase
        .from('job_postings')
        .select(`
          *,
          employers!company_id(
            company_name, 
            company_type, 
            company_description,
            logo_url, 
            contact_phone, 
            contact_email,
            website_url,
            address,
            is_verified,
            rating,
            reviews_count
          )
        `)
        .eq('id', id)
        .single()

      return { data, error }
    } catch (error) {
      console.error('Get job by ID error:', error)
      return { data: null, error }
    }
  },

  // –°–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é
  async createJob(jobData) {
    try {
      if (isDemoMode) {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ demo —Ä–µ–∂–∏–º–µ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–ª—É–∂–±—É
        try {
          await notificationsService.notifyNewJob({
            title: jobData.title || '–ù–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è',
            location: jobData.location,
            salary_from: jobData.salary_from,
            salary_to: jobData.salary_to,
            company_name: jobData.company_name
          })
        } catch (notifyError) {
          console.log('Demo notification error:', notifyError)
        }
        return {
          data: {
            id: Date.now(),
            ...jobData,
            created_at: new Date().toISOString(),
            status: 'active'
          },
          error: null
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –∫–æ–º–ø–∞–Ω–∏—è –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é
      const companyId = jobData.company_id
      const jobType = jobData.is_urgent ? 'urgent' : 'regular'
      
      const canPost = await monetizationService.canCompanyPostJob(companyId, jobType)
      if (!canPost) {
        return {
          data: null,
          error: {
            message: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –≤–∞—à–µ–≥–æ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
            code: 'QUOTA_EXCEEDED'
          }
        }
      }

      const { data, error } = await supabase
        .from('job_postings')
        .insert([jobData])
        .select()
        .single()

      // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏
      if (data && !error) {
        try {
          if (data.is_urgent) {
            // –°—Ä–æ—á–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è - –æ—Å–æ–±–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await notificationsService.notifyUrgentJob({
              title: data.title,
              location: data.location,
              salary_from: data.salary_from,
              salary_to: data.salary_to,
              company_name: data.company_name,
              needed_date: data.needed_date
            })
          } else {
            // –û–±—ã—á–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è
            await notificationsService.notifyNewJob({
              title: data.title,
              location: data.location,
              salary_from: data.salary_from,
              salary_to: data.salary_to,
              company_name: data.company_name
            })
          }
        } catch (notifyError) {
          console.warn('Notification error:', notifyError)
        }
      }

      return { data, error }
    } catch (error) {
      console.error('Create job error:', error)
      return { data: null, error }
    }
  },

  // –û–±–Ω–æ–≤–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é
  async updateJob(id, jobData) {
    try {
      if (isDemoMode) {
        return {
          data: { id, ...jobData, updated_at: new Date().toISOString() },
          error: null
        }
      }

      const { data, error } = await supabase
        .from('job_postings')
        .update(jobData)
        .eq('id', id)
        .select()
        .single()

      return { data, error }
    } catch (error) {
      console.error('Update job error:', error)
      return { data: null, error }
    }
  },

  // –£–¥–∞–ª–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é
  async deleteJob(id) {
    try {
      if (isDemoMode) {
        return { error: null }
      }

      const { error } = await supabase
        .from('job_postings')
        .delete()
        .eq('id', id)

      return { error }
    } catch (error) {
      console.error('Delete job error:', error)
      return { error }
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ HoReCa
  async getJobsByCategory(category) {
    return this.getAllJobs({ category })
  },

  // –ü–æ–ª—É—á–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ —Ç–∏–ø—É –ø–æ–∑–∏—Ü–∏–∏
  async getJobsByPosition(positionType) {
    return this.getAllJobs({ position_type: positionType })
  },

  // –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ –Ω–∞–≤—ã–∫–∞–º
  async searchJobsBySkills(skills) {
    return this.getAllJobs({ required_skills: skills })
  },

  // –ü–æ–ª—É—á–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ —Å –∑–∞—Ä–ø–ª–∞—Ç–æ–π –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
  async getJobsBySalaryRange(minSalary, maxSalary) {
    return this.getAllJobs({ salary_min: minSalary, salary_max: maxSalary })
  },

  // –ü–æ–ª—É—á–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ —Ä–∞–π–æ–Ω—É
  async getJobsByDistrict(district) {
    return this.getAllJobs({ district })
  },

  // –ü–æ–ª—É—á–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ —Ç–∏–ø—É –∑–∞–Ω—è—Ç–æ—Å—Ç–∏
  async getJobsByEmploymentType(employmentType) {
    return this.getAllJobs({ employment_type: employmentType })
  },

  // –ü–æ–ª—É—á–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ –≥—Ä–∞—Ñ–∏–∫—É —Ä–∞–±–æ—Ç—ã
  async getJobsBySchedule(scheduleType) {
    return this.getAllJobs({ schedule_type: scheduleType })
  },

  // –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
  async incrementViewCount(jobId) {
    try {
      if (isDemoMode) {
        return { data: { views_count: Math.floor(Math.random() * 100) }, error: null }
      }

      const { data, error } = await supabase
        .from('job_postings')
        .update({ 
          views_count: supabase.raw('views_count + 1') 
        })
        .eq('id', jobId)
        .select('views_count')
        .single()

      return { data, error }
    } catch (error) {
      console.error('Increment view count error:', error)
      return { data: null, error }
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ (–ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º)
  async getPopularJobs(limit = 10) {
    try {
      if (isDemoMode) {
        const allJobs = await this.getAllJobs()
        return {
          data: allJobs.data?.slice(0, limit) || [],
          error: null
        }
      }

      const { data, error } = await supabase
        .from('job_postings')
        .select(`
          *,
          employers!company_id(company_name, company_type, logo_url, is_verified)
        `)
        .eq('is_active', true)
        .eq('status', 'active')
        .order('views_count', { ascending: false })
        .order('created_at', { ascending: false })
        .limit(limit)

      return { data, error }
    } catch (error) {
      console.error('Get popular jobs error:', error)
      return { data: null, error }
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏
  async getRecentJobs(limit = 10) {
    try {
      if (isDemoMode) {
        const allJobs = await this.getAllJobs()
        return {
          data: allJobs.data?.slice(0, limit) || [],
          error: null
        }
      }

      const { data, error } = await supabase
        .from('job_postings')
        .select(`
          *,
          employers!company_id(company_name, company_type, logo_url, is_verified)
        `)
        .eq('is_active', true)
        .eq('status', 'active')
        .order('created_at', { ascending: false })
        .limit(limit)

      return { data, error }
    } catch (error) {
      console.error('Get recent jobs error:', error)
      return { data: null, error }
    }
  },

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–∏
  validateJobData(jobData) {
    const errors = []

    if (!jobData.title || jobData.title.trim().length < 5) {
      errors.push('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤')
    }

    if (!jobData.description || jobData.description.trim().length < 20) {
      errors.push('–û–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤')
    }

    if (!jobData.category) {
      errors.push('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
    }

    if (!jobData.position_type) {
      errors.push('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∑–∏—Ü–∏–∏')
    }

    if (!jobData.address || jobData.address.trim().length < 5) {
      errors.push('–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å —Ä–∞–±–æ—Ç—ã')
    }

    if (jobData.salary_min && jobData.salary_max && jobData.salary_min > jobData.salary_max) {
      errors.push('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π')
    }

    if (jobData.min_age && (jobData.min_age < 14 || jobData.min_age > 65)) {
      errors.push('–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 14 –¥–æ 65 –ª–µ—Ç')
    }

    if (jobData.max_age && (jobData.max_age < 14 || jobData.max_age > 65)) {
      errors.push('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 14 –¥–æ 65 –ª–µ—Ç')
    }

    if (jobData.min_age && jobData.max_age && jobData.min_age > jobData.max_age) {
      errors.push('–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ')
    }

    if (errors.length > 0) {
      return {
        message: '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
        details: errors,
        code: 'VALIDATION_ERROR'
      }
    }

    return null
  }
}

console.log('‚úÖ Jobs service initialized')
