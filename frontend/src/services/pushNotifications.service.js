// üì± pushNotifications.service.js ‚Äî –°–µ—Ä–≤–∏—Å –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
import { supabase } from './supabase.js'

export const pushNotificationsService = {
  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  isSupported() {
    return 'serviceWorker' in navigator && 'PushManager' in window
  },

  /**
   * –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å Service Worker
   */
  async registerServiceWorker() {
    if (!this.isSupported()) {
      throw new Error('Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ')
    }

    try {
      const registration = await navigator.serviceWorker.register('/sw.js')
      console.log('Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', registration)
      return registration
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ Service Worker:', error)
      throw error
    }
  },

  /**
   * –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  async requestPermission() {
    if (!this.isSupported()) {
      throw new Error('Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è')
    }

    const permission = await Notification.requestPermission()
    return permission === 'granted'
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
   */
  getPermissionStatus() {
    if (!this.isSupported()) return 'unsupported'
    return Notification.permission
  },

  /**
   * –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  async subscribe() {
    try {
      const registration = await this.registerServiceWorker()
      const permission = await this.requestPermission()

      if (!permission) {
        throw new Error('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ')
      }

      // –ü–æ–ª—É—á–∞–µ–º VAPID –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–≤—Ä–µ–º–µ–Ω–Ω–æ)
      const vapidPublicKey = 'BN3oK1oWZaJzJJXnfTyV5JJvDZZgXCJjuoV4R3vZp1oVJJv2FnE5Jv2VnNJJjJvVZJJJzJ1nVp3oZ1oWZnVJ'
      
      if (!vapidPublicKey) {
        throw new Error('VAPID –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
      }

      const subscription = await registration.pushManager.subscribe({
        userVisibleOnly: true,
        applicationServerKey: this.urlBase64ToUint8Array(vapidPublicKey)
      })

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const { data: user } = await supabase.auth.getUser()
      if (user?.user) {
        await supabase
          .from('push_subscriptions')
          .upsert({
            user_id: user.user.id,
            subscription: subscription,
            created_at: new Date().toISOString()
          })
      }

      return subscription
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error)
      throw error
    }
  },

  /**
   * –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  async unsubscribe() {
    try {
      const registration = await navigator.serviceWorker.ready
      const subscription = await registration.pushManager.getSubscription()

      if (subscription) {
        await subscription.unsubscribe()

        // –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const { data: user } = await supabase.auth.getUser()
        if (user?.user) {
          await supabase
            .from('push_subscriptions')
            .delete()
            .eq('user_id', user.user.id)
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error)
      throw error
    }
  },

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  async sendTestNotification() {
    if (this.getPermissionStatus() !== 'granted') {
      throw new Error('–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ')
    }

    const notification = new Notification('ShiftworkKZ', {
      body: '–¢–µ—Å—Ç–æ–≤–æ–µ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ! üéâ',
      icon: '/favicon.ico',
      badge: '/favicon.ico',
      tag: 'test-notification'
    })

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã—Ç—å —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => notification.close(), 4000)
  },

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å VAPID –∫–ª—é—á –∏–∑ base64 –≤ Uint8Array
   */
  urlBase64ToUint8Array(base64String) {
    const padding = '='.repeat((4 - base64String.length % 4) % 4)
    const base64 = (base64String + padding)
      .replace(/-/g, '+')
      .replace(/_/g, '/')

    const rawData = window.atob(base64)
    const outputArray = new Uint8Array(rawData.length)

    for (let i = 0; i < rawData.length; ++i) {
      outputArray[i] = rawData.charCodeAt(i)
    }
    return outputArray
  }
}
