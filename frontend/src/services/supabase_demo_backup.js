// ‚ú® –ë–ê–ó–û–í–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø SUPABASE - –≠–¢–ê–ü 4.1.1
import { createClient } from '@supabase/supabase-js'

// –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
if (globalThis.supabaseClient) {
  console.warn('‚ö†Ô∏è Supabase client already exists, reusing existing instance')
}

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å fallback
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL || ''
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY || ''
const forceDemoEnv = (import.meta.env.VITE_USE_DEMO_MODE || import.meta.env.VITE_USE_DEMO_DATA)
  ? String(import.meta.env.VITE_USE_DEMO_MODE || import.meta.env.VITE_USE_DEMO_DATA).toLowerCase() === 'true'
  : false

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π demo —Ä–µ–∂–∏–º –∏–∑ localStorage (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—Ä–∞—É–∑–µ—Ä–µ)
const forceDemoFromStorage = typeof window !== 'undefined' 
  ? localStorage.getItem('force-demo-mode') === 'true'
  : false

// –§–ª–∞–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è demo —Ä–µ–∂–∏–º–∞ (–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ü–ï–†–ï–î –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º)
export const isDemoMode = forceDemoEnv || forceDemoFromStorage

console.log('üîß Supabase config:', {
  isDemoMode,
  forceDemoEnv,
  forceDemoFromStorage,
  hasUrl: !!supabaseUrl,
  hasKey: !!supabaseAnonKey,
  url: isDemoMode ? 'demo-mode' : supabaseUrl.substring(0, 30) + '...',
  env: import.meta.env.MODE
})

// –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏
const finalUrl = isDemoMode ? 'https://demo.localhost' : supabaseUrl
const finalKey = isDemoMode ? 'demo-key-12345' : supabaseAnonKey

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–∞–∂–µ —Å demo –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ—à–∏–±–æ–∫
let clientConfig = {
  auth: {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π storage key –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    storageKey: 'job-board-auth-token',
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    autoRefreshToken: true,
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    persistSession: true,
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
    detectSessionInUrl: false
  }
}

// –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–∫–ª—é—á–∞–µ–º realtime –¥–ª—è demo —Ä–µ–∂–∏–º–∞
if (isDemoMode) {
  clientConfig.realtime = {
    params: {
      eventsPerSecond: 0
    }
  }
  console.log('üîá Realtime disabled for demo mode')
}

// –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –±–µ–∑ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
let supabaseClient
if (isDemoMode) {
  console.log('üé≠ Creating demo Supabase client (no network calls)')
  
  supabaseClient = {
    auth: {
      getUser: () => Promise.resolve({ data: { user: null }, error: null }),
      signInWithPassword: () => Promise.resolve({ data: { user: null }, error: null }),
      signOut: () => Promise.resolve({ error: null }),
      onAuthStateChange: () => ({ data: { subscription: { unsubscribe: () => {} } } })
    },
    from: (table) => ({
      select: () => Promise.resolve({ data: [], error: null }),
      insert: () => Promise.resolve({ data: [], error: null }),
      update: () => Promise.resolve({ data: [], error: null }),
      delete: () => Promise.resolve({ data: [], error: null })
    }),
    channel: () => ({
      on: () => ({}),
      subscribe: () => ({})
    })
  }
} else {
  supabaseClient = globalThis.supabaseClient || createClient(finalUrl, finalKey, clientConfig)
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
  globalThis.supabaseClient = supabaseClient
}

export const supabase = supabaseClient

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
export const isAuthenticated = async () => {
  if (isDemoMode) {
    console.log('üé≠ Demo mode: returning false for auth check')
    return false
  }
  
  try {
    const { data: { user } } = await supabase.auth.getUser()
    return !!user
  } catch (error) {
    console.warn('Auth check failed:', error)
    return false
  }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
export const handleAuthError = (error) => {
  if (isDemoMode) {
    console.log('üé≠ Demo mode: ignoring auth error')
    return
  }
  
  if (error?.message?.includes('AuthSessionMissingError') || 
      error?.status === 401 || 
      error?.message?.includes('session missing')) {
    console.warn('Auth session missing, falling back to demo data')
    return true // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
  }
  return false
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è realtime –ø–æ–¥–ø–∏—Å–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
export const createRealtimeSubscription = async (table, callback) => {
  const userAuthenticated = await isAuthenticated()
  if (!userAuthenticated || isDemoMode) {
    console.log('Skipping realtime subscription - user not authenticated or demo mode')
    return null
  }
  
  return supabase
    .channel(`public:${table}`)
    .on('postgres_changes', { 
      event: '*', 
      schema: 'public', 
      table: table 
    }, callback)
    .subscribe()
}

// –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
export const DEFAULT_SELECT = '*'
export const DEFAULT_LIMIT = 50

console.log('‚úÖ Supabase service initialized:', { 
  url: finalUrl, 
  isDemoMode,
  forceDemoEnv
})
