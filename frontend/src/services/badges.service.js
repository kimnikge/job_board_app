// üèÖ badges.service.js ‚Äî R4 Extended Badge Service
import { supabase, isDemoMode } from './supabase.js'

export const badgesService = {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –±–µ–π–¥–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (R1 function enhanced)
   */
  async list(userId) {
    try {
      if (isDemoMode) {
        // –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –±–µ–π–¥–∂–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const demoBadges = [
          {
            id: 'demo-badge-1',
            user_id: userId,
            employer_id: 'demo-employer-1',
            awarded_by: 'demo-manager-1',
            awarded_at: '2025-08-10T10:00:00Z',
            reason: '–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤ –∫–æ—Ñ–µ–π–Ω–µ',
            source: 'manual',
            badges: {
              id: 'badge-barista-bronze',
              name: 'Barista Bronze',
              description: '–ë–∞–∑–æ–≤—ã–µ –Ω–∞–≤—ã–∫–∏ –±–∞—Ä–∏—Å—Ç–∞',
              icon_url: '‚òï',
              category: 'Hard Skills',
              level: 'Bronze',
              is_company_generated: false,
              company_id: null
            },
            employers: {
              name: '–ö–æ—Ñ–µ–π–Ω—è "–£—Ç—Ä–æ"',
              logo_url: '/images/cafe-logo.png'
            }
          },
          {
            id: 'demo-badge-2',
            user_id: userId,
            employer_id: 'demo-employer-1',
            awarded_by: 'demo-manager-1',
            awarded_at: '2025-08-09T15:30:00Z',
            reason: '–ö–æ–º–∞–Ω–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
            source: 'auto',
            badges: {
              id: 'badge-team-player',
              name: 'Team Player',
              description: '–ö–æ–º–∞–Ω–¥–Ω—ã–π –∏–≥—Ä–æ–∫',
              icon_url: 'ü§ù',
              category: 'Soft Skills',
              level: 'Bronze',
              is_company_generated: false,
              company_id: null
            },
            employers: {
              name: '–ö–æ—Ñ–µ–π–Ω—è "–£—Ç—Ä–æ"',
              logo_url: '/images/cafe-logo.png'
            }
          },
          {
            id: 'demo-badge-3',
            user_id: userId,
            employer_id: 'demo-employer-2',
            awarded_by: 'demo-manager-2',
            awarded_at: '2025-08-08T12:00:00Z',
            reason: '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –º–µ—Å—è—Ü',
            source: 'manual',
            badges: {
              id: 'badge-company-best',
              name: '–õ—É—á—à–∏–π –±–∞—Ä–∏—Å—Ç–∞ –º–µ—Å—è—Ü–∞',
              description: '–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –æ—Ç–ª–∏—á–Ω—É—é —Ä–∞–±–æ—Ç—É',
              icon_url: 'üèÜ',
              category: 'Other',
              level: 'Gold',
              is_company_generated: true,
              company_id: 'demo-employer-2'
            },
            employers: {
              name: '–†–µ—Å—Ç–æ—Ä–∞–Ω "–í–µ—á–µ—Ä"',
              logo_url: '/images/restaurant-logo.png'
            }
          }
        ]
        return { data: demoBadges, error: null }
      }
      
      const { data, error } = await supabase
        .from('user_badges')
        .select(`
          id,
          user_id,
          employer_id,
          awarded_by,
          awarded_at,
          reason,
          source,
          badges!inner(
            id,
            name,
            description,
            icon_url,
            category,
            level,
            is_company_generated,
            company_id
          ),
          employers(name, logo_url)
        `)
        .eq('user_id', userId)
        .order('awarded_at', { ascending: false })
      
      return { data, error }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–µ–π–¥–∂–µ–π:', err)
      return { data: null, error: err }
    }
  },

  /**
   * –í—ã–¥–∞—Ç—å –±–µ–π–¥–∂ –≤—Ä—É—á–Ω—É—é (R4 enhanced)
   */
  async awardBadge(badgeId, userId, reason, awarderId = null) {
    try {
      if (isDemoMode) {
        const mockAward = {
          id: Date.now(),
          badge_id: badgeId,
          user_id: userId,
          awarded_by: awarderId,
          source: 'manual',
          reason: reason,
          awarded_at: new Date().toISOString()
        }
        return { data: mockAward, error: null }
      }

      const { data, error } = await supabase.rpc('award_manual_badge', {
        p_badge_id: badgeId,
        p_user_id: userId,
        p_reason: reason,
        p_awarded_by: awarderId
      })

      return { data, error }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ –±–µ–π–¥–∂–∞:', err)
      return { data: null, error: err }
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –±–µ–π–¥–∂–∏ —Å –≤–ª–∏—è–Ω–∏–µ–º –Ω–∞ –Ω–∞–≤—ã–∫–∏ (R1 enhanced)
   */
  async listWithSkills(userId) {
    try {
      if (isDemoMode) return { data: [], error: null }
      
      const { data, error } = await supabase
        .from('user_badges')
        .select(`
          id,
          awarded_at,
          reason,
          source,
          badges!inner(
            id,
            name,
            description,
            category,
            level,
            badge_skill_links(
              skill_name,
              delta
            )
          )
        `)
        .eq('user_id', userId)
        .order('awarded_at', { ascending: false })
      
      return { data, error }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–µ–π–¥–∂–µ–π —Å –Ω–∞–≤—ã–∫–∞–º–∏:', err)
      return { data: null, error: err }
    }
  },

  /**
   * –°–æ–∑–¥–∞—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–µ–π–¥–∂ (R4 new)
   */
  async createCompanyBadge(companyId, badgeData) {
    try {
      if (isDemoMode) {
        const mockBadge = {
          id: Date.now().toString(),
          ...badgeData,
          is_company_generated: true,
          company_id: companyId,
          created_at: new Date().toISOString()
        }
        return { data: mockBadge, error: null }
      }

      const { data, error } = await supabase.rpc('create_company_badge', {
        p_company_id: companyId,
        p_name: badgeData.name,
        p_description: badgeData.description,
        p_icon_url: badgeData.icon_url || null,
        p_category: badgeData.category || 'Company',
        p_level: badgeData.level || 'Bronze',
        p_skill_bonuses: badgeData.skill_bonuses || {}
      })

      return { data: data?.[0], error }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –±–µ–π–¥–∂–∞:', err)
      return { data: null, error: err }
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–µ–π–¥–∂–µ–π (R4 new)
   */
  async getCatalog(companyId = null) {
    try {
      if (isDemoMode) {
        const mockCatalog = [
          {
            id: 'badge-1',
            name: '5 Shifts',
            description: '–ü—Ä–æ—Ä–∞–±–æ—Ç–∞—Ç—å 5 —Å–º–µ–Ω',
            category: 'Experience',
            level: 'Bronze',
            is_company_generated: false
          },
          {
            id: 'badge-2',
            name: 'Night Owl',
            description: '–†–∞–±–æ—Ç–∞—Ç—å –≤ –Ω–æ—á–Ω—ã–µ —Å–º–µ–Ω—ã',
            category: 'Hard Skills',
            level: 'Bronze',
            is_company_generated: false
          }
        ]
        return { data: mockCatalog, error: null }
      }

      let query = supabase
        .from('badges')
        .select(`
          id,
          name,
          description,
          icon_url,
          category,
          level,
          is_company_generated,
          company_id,
          created_at
        `)

      if (companyId) {
        query = query.or(`company_id.is.null,company_id.eq.${companyId}`)
      } else {
        query = query.is('company_id', null)
      }

      const { data, error } = await query.order('created_at', { ascending: false })
      
      return { data, error }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –±–µ–π–¥–∂–µ–π:', err)
      return { data: null, error: err }
    }
  },

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–µ–π–¥–∂–∞ (R4 new)
   */
  async getById(badgeId) {
    try {
      if (isDemoMode) {
        const mockBadge = {
          id: badgeId,
          name: 'Sample Badge',
          description: 'This is a sample badge',
          category: 'Experience',
          level: 'Bronze'
        }
        return { data: mockBadge, error: null }
      }

      const { data, error } = await supabase
        .from('badges')
        .select(`
          *,
          badge_skill_links(skill_name, delta),
          user_badges(count)
        `)
        .eq('id', badgeId)
        .single()

      return { data, error }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–µ—Ç–∞–ª–∏ –±–µ–π–¥–∂–∞:', err)
      return { data: null, error: err }
    }
  },

  /**
   * –£–¥–∞–ª–∏—Ç—å –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–µ–π–¥–∂ (R4 new)
   */
  async deleteCompanyBadge(badgeId, companyId) {
    try {
      if (isDemoMode) {
        console.log('Demo mode: deleted badge', badgeId)
        return { data: { success: true }, error: null }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–µ–π–¥–∂ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫–æ–º–ø–∞–Ω–∏–∏
      const { data, error } = await supabase
        .from('badges')
        .delete()
        .eq('id', badgeId)
        .eq('company_id', companyId)
        .eq('is_company_generated', true)

      return { data, error }
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –±–µ–π–¥–∂–∞:', err)
      return { data: null, error: err }
    }
  }
}

console.log('‚úÖ Badges service R4 ready')
