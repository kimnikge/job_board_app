// ‚ö° –°–ï–†–í–ò–° –°–†–û–ß–ù–´–• –í–ê–ö–ê–ù–°–ò–ô - HoReCa –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
import { supabase, isDemoMode } from './supabase.js'
import { notificationsService } from './notifications.service.js'

// üö® –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å—Ä–æ—á–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
export const urgentJobsService = {
  
  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ä–æ—á–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
  async getUrgentJobs(filters = {}) {
    try {
      if (isDemoMode) {
        return {
          data: [
            {
              id: 'urgent-1',
              title: '–°–†–û–ß–ù–û! –ù—É–∂–µ–Ω –±–∞—Ä–º–µ–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞',
              description: '–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—ã—Ç–Ω—ã–π –±–∞—Ä–º–µ–Ω –Ω–∞ —Å–º–µ–Ω—É –∑–∞–≤—Ç—Ä–∞ —Å 18:00 –¥–æ 02:00',
              position_type: 'bartender',
              needed_date: new Date(Date.now() + 86400000).toISOString().split('T')[0], // –∑–∞–≤—Ç—Ä–∞
              needed_time_start: '18:00',
              needed_time_end: '02:00',
              payment_per_shift: 25000,
              payment_currency: 'KZT',
              instant_payment: true,
              positions_needed: 1,
              positions_filled: 0,
              application_deadline: new Date(Date.now() + 3600000).toISOString(), // +1 —á–∞—Å
              address: '—É–ª. –ñ–µ–ª—Ç–æ–∫—Å–∞–Ω, 175',
              district: '–ê–ª–º–∞–ª–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω',
              contact_method: 'telegram',
              contact_telegram: '@urgent_bar_jobs',
              status: 'active',
              priority: 'high',
              urgency_level: 3,
              city_id: 1,
              created_at: new Date().toISOString(),
              employers: {
                company_name: 'Night Bar "–ê–ª–º–∞—Ç—ã"',
                company_type: 'bar',
                contact_phone: '+7 777 123 45 67'
              }
            },
            {
              id: 'urgent-2',
              title: '–û—Ñ–∏—Ü–∏–∞–Ω—Ç –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω –°–ï–ì–û–î–ù–Ø',
              description: '–°—Ä–æ—á–Ω–æ –Ω—É–∂–µ–Ω –æ—Ñ–∏—Ü–∏–∞–Ω—Ç –Ω–∞ —Å–º–µ–Ω—É —Å–µ–≥–æ–¥–Ω—è –≤–µ—á–µ—Ä–æ–º',
              position_type: 'waiter',
              needed_date: new Date().toISOString().split('T')[0], // —Å–µ–≥–æ–¥–Ω—è
              needed_time_start: '19:00',
              needed_time_end: '24:00',
              payment_per_shift: 20000,
              payment_currency: 'KZT',
              instant_payment: true,
              positions_needed: 2,
              positions_filled: 1,
              application_deadline: new Date(Date.now() + 1800000).toISOString(), // +30 –º–∏–Ω—É—Ç
              address: '–ø—Ä. –î–æ—Å—Ç—ã–∫, 200',
              district: '–ú–µ–¥–µ—É—Å–∫–∏–π —Ä–∞–π–æ–Ω',
              contact_method: 'phone',
              contact_phone: '+7 701 234 56 78',
              status: 'active',
              priority: 'critical',
              urgency_level: 5,
              city_id: 1,
              created_at: new Date().toISOString(),
              employers: {
                company_name: '–†–µ—Å—Ç–æ—Ä–∞–Ω "–î–∞—Å—Ç–∞—Ä—Ö–∞–Ω"',
                company_type: 'restaurant',
                contact_phone: '+7 701 234 56 78'
              }
            }
          ],
          error: null
        }
      }

      let query = supabase
        .from('urgent_jobs')
        .select(`
          *,
          employers!company_id(
            company_name,
            company_type,
            logo_url,
            contact_phone,
            contact_email,
            is_verified,
            rating
          )
        `)
        .eq('is_active', true)
        .eq('status', 'active')
        .gt('application_deadline', new Date().toISOString())
        .lt('positions_filled', supabase.raw('positions_needed'))
        .order('urgency_level', { ascending: false })
        .order('created_at', { ascending: false })

      // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
      if (filters.position_type) {
        query = query.eq('position_type', filters.position_type)
      }
      if (filters.city_id) {
        query = query.eq('city_id', filters.city_id)
      }
      if (filters.district) {
        query = query.eq('district', filters.district)
      }
      if (filters.payment_min) {
        query = query.gte('payment_per_shift', filters.payment_min)
      }
      if (filters.needed_date) {
        query = query.eq('needed_date', filters.needed_date)
      }
      if (filters.priority) {
        query = query.eq('priority', filters.priority)
      }

      const { data, error } = await query
      return { data, error }

    } catch (error) {
      console.error('Get urgent jobs error:', error)
      return { data: null, error }
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ä–æ—á–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é –ø–æ ID
  async getUrgentJobById(id) {
    try {
      if (isDemoMode) {
        return {
          data: {
            id: id,
            title: '–°–†–û–ß–ù–û! –î–µ–º–æ –≤–∞–∫–∞–Ω—Å–∏—è',
            description: '–°—Ä–æ—á–Ω–∞—è –¥–µ–º–æ –≤–∞–∫–∞–Ω—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
            position_type: 'cook',
            needed_date: new Date().toISOString().split('T')[0],
            needed_time_start: '18:00',
            needed_time_end: '02:00',
            payment_per_shift: 30000,
            positions_needed: 1,
            positions_filled: 0,
            status: 'active',
            urgency_level: 4,
            created_at: new Date().toISOString()
          },
          error: null
        }
      }

      const { data, error } = await supabase
        .from('urgent_jobs')
        .select(`
          *,
          employers!company_id(
            company_name,
            company_type,
            company_description,
            logo_url,
            contact_phone,
            contact_email,
            website_url,
            address,
            is_verified,
            rating,
            reviews_count
          )
        `)
        .eq('id', id)
        .single()

      return { data, error }
    } catch (error) {
      console.error('Get urgent job by ID error:', error)
      return { data: null, error }
    }
  },

  // –°–æ–∑–¥–∞—Ç—å —Å—Ä–æ—á–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é
  async createUrgentJob(jobData) {
    try {
      if (isDemoMode) {
        const demoJob = {
          id: `urgent-${Date.now()}`,
          ...jobData,
          created_at: new Date().toISOString(),
          status: 'active',
          is_active: true
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –¥–µ–º–æ —Ä–µ–∂–∏–º–µ
        try {
          await notificationsService.notifyUrgentJob({
            title: jobData.title,
            position_type: jobData.position_type,
            payment_per_shift: jobData.payment_per_shift,
            needed_date: jobData.needed_date,
            needed_time_start: jobData.needed_time_start,
            address: jobData.address
          })
        } catch (notifyError) {
          console.log('Demo urgent notification error:', notifyError)
        }

        return { data: demoJob, error: null }
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Ä–æ—á–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
      const validationError = this.validateUrgentJobData(jobData)
      if (validationError) {
        return { data: null, error: validationError }
      }

      const { data, error } = await supabase
        .from('urgent_jobs')
        .insert([jobData])
        .select(`
          *,
          employers!company_id(company_name, company_type)
        `)
        .single()

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
      if (data && !error) {
        try {
          await notificationsService.notifyUrgentJob({
            id: data.id,
            title: data.title,
            position_type: data.position_type,
            payment_per_shift: data.payment_per_shift,
            needed_date: data.needed_date,
            needed_time_start: data.needed_time_start,
            needed_time_end: data.needed_time_end,
            address: data.address,
            company_name: data.employers?.company_name,
            urgency_level: data.urgency_level,
            application_deadline: data.application_deadline
          })
        } catch (notifyError) {
          console.warn('Urgent job notification error:', notifyError)
        }
      }

      return { data, error }
    } catch (error) {
      console.error('Create urgent job error:', error)
      return { data: null, error }
    }
  },

  // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ä–æ—á–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é
  async updateUrgentJob(id, updateData) {
    try {
      if (isDemoMode) {
        return {
          data: { id, ...updateData, updated_at: new Date().toISOString() },
          error: null
        }
      }

      const { data, error } = await supabase
        .from('urgent_jobs')
        .update(updateData)
        .eq('id', id)
        .select()
        .single()

      return { data, error }
    } catch (error) {
      console.error('Update urgent job error:', error)
      return { data: null, error }
    }
  },

  // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–∞ —Å—Ä–æ—á–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é (–∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é)
  async applyToUrgentJob(jobId, candidateData) {
    try {
      if (isDemoMode) {
        return {
          data: { 
            success: true, 
            message: '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç.' 
          },
          error: null
        }
      }

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
      const { data, error } = await supabase
        .from('urgent_jobs')
        .update({ 
          positions_filled: supabase.raw('positions_filled + 1'),
          applications_count: supabase.raw('applications_count + 1')
        })
        .eq('id', jobId)
        .select()
        .single()

      if (error) {
        return { data: null, error }
      }

      // –ï—Å–ª–∏ –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é
      if (data.positions_filled >= data.positions_needed) {
        await supabase
          .from('urgent_jobs')
          .update({ status: 'filled' })
          .eq('id', jobId)
      }

      return {
        data: { 
          success: true, 
          message: '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –†–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
          job: data
        },
        error: null
      }
    } catch (error) {
      console.error('Apply to urgent job error:', error)
      return { data: null, error }
    }
  },

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å—Ä–æ—á–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
  validateUrgentJobData(jobData) {
    const errors = []

    if (!jobData.title || jobData.title.trim().length < 5) {
      errors.push('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 5 —Å–∏–º–≤–æ–ª–æ–≤')
    }

    if (!jobData.needed_date) {
      errors.push('–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É, –∫–æ–≥–¥–∞ –Ω—É–∂–µ–Ω —Ä–∞–±–æ—Ç–Ω–∏–∫')
    } else {
      const neededDate = new Date(jobData.needed_date)
      const today = new Date()
      today.setHours(0, 0, 0, 0)
      
      if (neededDate < today) {
        errors.push('–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º')
      }
    }

    if (!jobData.needed_time_start || !jobData.needed_time_end) {
      errors.push('–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–º–µ–Ω—ã')
    }

    if (!jobData.payment_per_shift || jobData.payment_per_shift < 1000) {
      errors.push('–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –æ–ø–ª–∞—Ç—É –∑–∞ —Å–º–µ–Ω—É (–Ω–µ –º–µ–Ω–µ–µ 1000 —Ç–µ–Ω–≥–µ)')
    }

    if (!jobData.application_deadline) {
      errors.push('–£–∫–∞–∂–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫')
    } else {
      const deadline = new Date(jobData.application_deadline)
      if (deadline <= new Date()) {
        errors.push('–î–µ–¥–ª–∞–π–Ω –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º')
      }
    }

    if (!jobData.address || jobData.address.trim().length < 5) {
      errors.push('–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å —Ä–∞–±–æ—Ç—ã')
    }

    if (!jobData.position_type) {
      errors.push('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∑–∏—Ü–∏–∏')
    }

    if (errors.length > 0) {
      return {
        message: '–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
        details: errors,
        code: 'VALIDATION_ERROR'
      }
    }

    return null
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ä–æ—á–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç—ã
  async getUrgentJobsForDate(date) {
    const filters = { needed_date: date }
    return this.getUrgentJobs(filters)
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ä–æ—á–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø–æ —Ç–∏–ø—É –ø–æ–∑–∏—Ü–∏–∏
  async getUrgentJobsByPosition(positionType) {
    const filters = { position_type: positionType }
    return this.getUrgentJobs(filters)
  },

  // –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ —Å—Ä–æ—á–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
  async closeExpiredJobs() {
    try {
      if (isDemoMode) {
        return { data: { updated: 0 }, error: null }
      }

      const { data, error } = await supabase
        .from('urgent_jobs')
        .update({ status: 'expired', is_active: false })
        .lt('application_deadline', new Date().toISOString())
        .eq('status', 'active')
        .select('id')

      return { data: { updated: data?.length || 0 }, error }
    } catch (error) {
      console.error('Close expired jobs error:', error)
      return { data: null, error }
    }
  }
}