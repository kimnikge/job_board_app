// ‚ú® API –ü–†–û–§–ò–õ–Ø - –≠–¢–ê–ü 4.1.4
import { supabase } from './supabase.js'

// üë§ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º –∏ —Ä–µ–∑—é–º–µ
export const profileService = {
  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getProfile(userId) {
    try {
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (userId === 'test-user') {
        return {
          data: {
            id: 'test-user',
            user_id: 'test-user',
            full_name: 'Test User',
            phone: '+7 777 123 45 67',
            avatar_url: null,
            telegram_chat_id: '763612632', // –í–∞—à —Ä–µ–∞–ª—å–Ω—ã–π chat_id –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            specialization_id: 1,
            district_id: 1,
            experience_years: 1,
            about: '–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
            created_at: new Date().toISOString(),
            specializations: { name: '–¢–µ—Å—Ç–µ—Ä', icon: 'üß™' },
            city_districts: { name: '–¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞–π–æ–Ω' }
          },
          error: null
        }
      }

      const { data, error } = await supabase
        .from('user_profiles')
        .select(`
          *,
          specializations(name, icon),
          city_districts(name)
        `)
        .eq('user_id', userId)
        .single()

      return { data, error }
    } catch (error) {
      console.error('Get profile error:', error)
      return { data: null, error }
    }
  },

  // –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
  async upsertProfile(profileData) {
    try {
      if (isDemoMode) {
        return {
          data: {
            id: 1,
            ...profileData,
            updated_at: new Date().toISOString()
          },
          error: null
        }
      }

      const { data, error } = await supabase
        .from('user_profiles')
        .upsert([profileData])
        .select(`
          *,
          specializations(name, icon),
          city_districts(name)
        `)
        .single()

      return { data, error }
    } catch (error) {
      console.error('Upsert profile error:', error)
      return { data: null, error }
    }
  },

  // –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö Telegram –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  async createOrUpdateProfile(userData) {
    try {
      if (isDemoMode) {
        // –í demo —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
        const profileData = {
          id: userData.id,
          telegram_id: userData.user_metadata?.telegram_id || userData.telegram_id,
          telegram_username: userData.user_metadata?.telegram_username || userData.username,
          full_name: userData.user_metadata?.full_name || `${userData.first_name || ''} ${userData.last_name || ''}`.trim(),
          role: userData.user_metadata?.user_type || 'candidate',
          phone: userData.user_metadata?.phone || null,
          photo_url: userData.user_metadata?.telegram_photo_url || userData.photo_url,
          is_ready_for_urgent: false,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        }
        
        console.log('üìù Demo —Ä–µ–∂–∏–º: –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ', profileData)
        return { data: profileData, error: null }
      }

      // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≤ user_profiles —Ç–∞–±–ª–∏—Ü–µ
      const profileData = {
        telegram_id: parseInt(userData.telegram_id || userData.user_metadata?.telegram_id),
        telegram_username: userData.telegram_username || userData.user_metadata?.telegram_username || userData.username,
        full_name: userData.full_name || userData.user_metadata?.full_name || `${userData.first_name || ''} ${userData.last_name || ''}`.trim(),
        role: userData.role || userData.user_metadata?.user_type || 'candidate',
        phone: userData.phone || userData.user_metadata?.phone || null,
        photo_url: userData.photo_url || userData.user_metadata?.telegram_photo_url || null,
        is_ready_for_urgent: false // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –≥–æ—Ç–æ–≤ –∫ —Å—Ä–æ—á–Ω—ã–º –≤–∞–∫–∞–Ω—Å–∏—è–º
      }

      console.log('üìù –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤ Supabase user_profiles:', profileData)

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º upsert –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ telegram_id
      const { data, error } = await supabase
        .from('user_profiles')
        .upsert(profileData, {
          onConflict: 'telegram_id', // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º telegram_id —É–∂–µ –µ—Å—Ç—å - –æ–±–Ω–æ–≤–ª—è–µ–º
          returning: 'representation'
        })
        .select()
        .single()

      if (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≤ user_profiles:', error)
        return { data: null, error }
      }

      console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω –≤ user_profiles:', data)
      return { data, error: null }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ profileService.createOrUpdateProfile:', error)
      return { data: null, error }
    }
  },

  // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞–≤–∞—Ç–∞—Ä
  async uploadAvatar(file, userId) {
    try {
      if (isDemoMode) {
        return {
          data: {
            path: `avatars/demo-${userId}.jpg`,
            publicUrl: '/images/default-avatar.png'
          },
          error: null
        }
      }

      const fileExt = file.name.split('.').pop()
      const fileName = `${userId}-${Math.random()}.${fileExt}`
      const filePath = `avatars/${fileName}`

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
      const { error: uploadError } = await supabase.storage
        .from('avatars')
        .upload(filePath, file)

      if (uploadError) {
        return { data: null, error: uploadError }
      }

      // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
      const { data: { publicUrl } } = supabase.storage
        .from('avatars')
        .getPublicUrl(filePath)

      return { data: { path: filePath, publicUrl }, error: null }
    } catch (error) {
      console.error('Upload avatar error:', error)
      return { data: null, error }
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∑—é–º–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getResume(userId) {
    try {
      if (isDemoMode) {
        return {
          data: {
            id: 1,
            user_id: userId,
            title: '–ü–æ–≤–∞—Ä-—É–Ω–∏–≤–µ—Ä—Å–∞–ª',
            description: '–û–ø—ã—Ç–Ω—ã–π –ø–æ–≤–∞—Ä —Å 5-–ª–µ—Ç–Ω–∏–º —Å—Ç–∞–∂–µ–º',
            experience_years: 5,
            skills: ['–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è', '–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Å—Ç—ã', '–î–µ—Å–µ—Ä—Ç—ã'],
            work_experience: [
              {
                company: '–†–µ—Å—Ç–æ—Ä–∞–Ω Bella Vista',
                position: '–ü–æ–≤–∞—Ä',
                period: '2020-2023',
                description: '–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –±–ª—é–¥ –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–π –∫—É—Ö–Ω–∏'
              }
            ],
            education: ['–ö—É–ª–∏–Ω–∞—Ä–Ω—ã–π –∫–æ–ª–ª–µ–¥–∂'],
            languages: ['–†—É—Å—Å–∫–∏–π', '–ö–∞–∑–∞—Ö—Å–∫–∏–π'],
            created_at: new Date().toISOString()
          },
          error: null
        }
      }

      const { data, error } = await supabase
        .from('user_resumes')
        .select('*')
        .eq('user_id', userId)
        .single()

      return { data, error }
    } catch (error) {
      console.error('Get resume error:', error)
      return { data: null, error }
    }
  },

  // –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ä–µ–∑—é–º–µ
  async upsertResume(resumeData) {
    try {
      if (isDemoMode) {
        return {
          data: {
            id: 1,
            ...resumeData,
            updated_at: new Date().toISOString()
          },
          error: null
        }
      }

      const { data, error } = await supabase
        .from('user_resumes')
        .upsert([resumeData])
        .select()
        .single()

      return { data, error }
    } catch (error) {
      console.error('Upsert resume error:', error)
      return { data: null, error }
    }
  },

  // –ü–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
  async getUserApplications(userId) {
    try {
      if (isDemoMode) {
        return {
          data: [
            {
              id: 1,
              user_id: userId,
              job_id: 1,
              status: 'pending',
              created_at: new Date().toISOString(),
              job_postings: {
                title: '–ü–æ–≤–∞—Ä –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–π –∫—É—Ö–Ω–∏',
                companies: { name: 'Grand Restaurant' }
              }
            }
          ],
          error: null
        }
      }

      const { data, error } = await supabase
        .from('job_applications')
        .select(`
          *,
          job_postings(
            title,
            companies(name)
          )
        `)
        .eq('user_id', userId)
        .order('created_at', { ascending: false })

      return { data, error }
    } catch (error) {
      console.error('Get user applications error:', error)
      return { data: null, error }
    }
  }
}

console.log('‚úÖ Profile service initialized')
