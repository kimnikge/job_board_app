/**
 * üîê –ö–û–ú–ü–û–ó–ê–ë–õ –î–õ–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò
 * 
 * Vue 3 –∫–æ–º–ø–æ–∑–∞–±–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π —á–µ—Ä–µ–∑ Supabase
 */

import { ref, computed, watch } from 'vue'
import { supabase, getCurrentUser, getCurrentSession } from '../core/api/supabaseClient.js'
import { moduleEvents, SYSTEM_EVENTS } from '../core/events/moduleEvents.js'

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
const user = ref(null)
const session = ref(null)
const loading = ref(true)
const error = ref(null)

/**
 * üîê –û–°–ù–û–í–ù–û–ô –ö–û–ú–ü–û–ó–ê–ë–õ useAuth
 */
export function useAuth() {
  // Computed —Å–≤–æ–π—Å—Ç–≤–∞
  const isAuthenticated = computed(() => !!user.value)
  const isAdmin = computed(() => user.value?.user_metadata?.role === 'admin')
  const isCompany = computed(() => user.value?.user_metadata?.role === 'company')
  const isSeeker = computed(() => user.value?.user_metadata?.role === 'seeker')
  
  const userProfile = computed(() => ({
    id: user.value?.id,
    email: user.value?.email,
    name: user.value?.user_metadata?.name || user.value?.email?.split('@')[0],
    role: user.value?.user_metadata?.role || 'seeker',
    avatar: user.value?.user_metadata?.avatar_url,
    phone: user.value?.user_metadata?.phone,
    created_at: user.value?.created_at
  }))

  /**
   * üîÑ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
   */
  async function initialize() {
    try {
      loading.value = true
      error.value = null
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
      const currentSession = await getCurrentSession()
      
      if (currentSession) {
        session.value = currentSession
        user.value = currentSession.user
        
        console.log('‚úÖ User session restored:', user.value.email)
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
        moduleEvents.emit(SYSTEM_EVENTS.AUTH_SESSION_RESTORED, {
          user: user.value,
          session: session.value
        })
      }
      
    } catch (err) {
      console.error('‚ùå Auth initialization error:', err)
      error.value = err.message
    } finally {
      loading.value = false
    }
  }

  /**
   * üìß –í–•–û–î –ü–û EMAIL –ò –ü–ê–†–û–õ–Æ
   */
  async function signIn(email, password) {
    try {
      loading.value = true
      error.value = null
      
      const { data, error: signInError } = await supabase.auth.signInWithPassword({
        email: email.trim(),
        password
      })
      
      if (signInError) {
        throw signInError
      }
      
      user.value = data.user
      session.value = data.session
      
      console.log('‚úÖ User signed in:', user.value.email)
      
      return { success: true, user: user.value }
      
    } catch (err) {
      console.error('‚ùå Sign in error:', err)
      error.value = getAuthErrorMessage(err)
      return { success: false, error: error.value }
    } finally {
      loading.value = false
    }
  }

  /**
   * üìù –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø
   */
  async function signUp(email, password, metadata = {}) {
    try {
      loading.value = true
      error.value = null
      
      const { data, error: signUpError } = await supabase.auth.signUp({
        email: email.trim(),
        password,
        options: {
          data: {
            role: 'seeker',
            ...metadata
          }
        }
      })
      
      if (signUpError) {
        throw signUpError
      }
      
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ email
      if (data.user && !data.session) {
        return { 
          success: true, 
          user: data.user,
          needsConfirmation: true 
        }
      }
      
      user.value = data.user
      session.value = data.session
      
      console.log('‚úÖ User signed up:', user.value.email)
      
      return { success: true, user: user.value }
      
    } catch (err) {
      console.error('‚ùå Sign up error:', err)
      error.value = getAuthErrorMessage(err)
      return { success: false, error: error.value }
    } finally {
      loading.value = false
    }
  }

  /**
   * üö™ –í–´–•–û–î
   */
  async function signOut() {
    try {
      loading.value = true
      error.value = null
      
      const { error: signOutError } = await supabase.auth.signOut()
      
      if (signOutError) {
        throw signOutError
      }
      
      user.value = null
      session.value = null
      
      console.log('‚úÖ User signed out')
      
      return { success: true }
      
    } catch (err) {
      console.error('‚ùå Sign out error:', err)
      error.value = err.message
      return { success: false, error: error.value }
    } finally {
      loading.value = false
    }
  }

  /**
   * üîÑ –°–ë–†–û–° –ü–ê–†–û–õ–Ø
   */
  async function resetPassword(email) {
    try {
      loading.value = true
      error.value = null
      
      const { error: resetError } = await supabase.auth.resetPasswordForEmail(
        email.trim(),
        {
          redirectTo: `${window.location.origin}/auth/reset-password`
        }
      )
      
      if (resetError) {
        throw resetError
      }
      
      console.log('‚úÖ Password reset email sent')
      
      return { success: true }
      
    } catch (err) {
      console.error('‚ùå Password reset error:', err)
      error.value = getAuthErrorMessage(err)
      return { success: false, error: error.value }
    } finally {
      loading.value = false
    }
  }

  /**
   * üîê –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–ê–†–û–õ–Ø
   */
  async function updatePassword(newPassword) {
    try {
      loading.value = true
      error.value = null
      
      const { error: updateError } = await supabase.auth.updateUser({
        password: newPassword
      })
      
      if (updateError) {
        throw updateError
      }
      
      console.log('‚úÖ Password updated')
      
      return { success: true }
      
    } catch (err) {
      console.error('‚ùå Password update error:', err)
      error.value = getAuthErrorMessage(err)
      return { success: false, error: error.value }
    } finally {
      loading.value = false
    }
  }

  /**
   * üë§ –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø
   */
  async function updateProfile(updates) {
    try {
      loading.value = true
      error.value = null
      
      const { data, error: updateError } = await supabase.auth.updateUser({
        data: updates
      })
      
      if (updateError) {
        throw updateError
      }
      
      user.value = data.user
      
      console.log('‚úÖ Profile updated')
      
      return { success: true, user: user.value }
      
    } catch (err) {
      console.error('‚ùå Profile update error:', err)
      error.value = getAuthErrorMessage(err)
      return { success: false, error: error.value }
    } finally {
      loading.value = false
    }
  }

  /**
   * üì± –°–û–¶–ò–ê–õ–¨–ù–ê–Ø –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø
   */
  async function signInWithProvider(provider) {
    try {
      loading.value = true
      error.value = null
      
      const { error: providerError } = await supabase.auth.signInWithOAuth({
        provider,
        options: {
          redirectTo: window.location.origin
        }
      })
      
      if (providerError) {
        throw providerError
      }
      
      return { success: true }
      
    } catch (err) {
      console.error(`‚ùå ${provider} sign in error:`, err)
      error.value = getAuthErrorMessage(err)
      return { success: false, error: error.value }
    } finally {
      loading.value = false
    }
  }

  /**
   * üîç –ü–†–û–í–ï–†–ö–ê –†–û–õ–ò
   */
  function hasRole(role) {
    if (Array.isArray(role)) {
      return role.includes(userProfile.value.role)
    }
    return userProfile.value.role === role
  }

  /**
   * üõ°Ô∏è –ü–†–û–í–ï–†–ö–ê –†–ê–ó–†–ï–®–ï–ù–ò–ô
   */
  function hasPermission(permission) {
    const rolePermissions = {
      admin: ['read', 'write', 'delete', 'manage'],
      company: ['read', 'write'],
      seeker: ['read']
    }
    
    const userRole = userProfile.value.role
    const permissions = rolePermissions[userRole] || []
    
    return permissions.includes(permission)
  }

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    user: computed(() => user.value),
    session: computed(() => session.value),
    loading: computed(() => loading.value),
    error: computed(() => error.value),
    
    // Computed —Å–≤–æ–π—Å—Ç–≤–∞
    isAuthenticated,
    isAdmin,
    isCompany,
    isSeeker,
    userProfile,
    
    // –ú–µ—Ç–æ–¥—ã
    initialize,
    signIn,
    signUp,
    signOut,
    resetPassword,
    updatePassword,
    updateProfile,
    signInWithProvider,
    hasRole,
    hasPermission,
    
    // Utilities
    clearError: () => { error.value = null }
  }
}

/**
 * üõ†Ô∏è HELPER –§–£–ù–ö–¶–ò–ò
 */

/**
 * –ü–æ–ª—É—á–∏—Ç—å –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
function getAuthErrorMessage(error) {
  const errorMessages = {
    'Invalid login credentials': '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å',
    'Email not confirmed': 'Email –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É.',
    'Password should be at least 6 characters': '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤',
    'User already registered': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
    'Invalid email': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email',
    'Signup requires a valid password': '–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å',
    'Token has expired or is invalid': '–¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω'
  }
  
  return errorMessages[error.message] || error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'
}

/**
 * üîÑ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
 */

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª—è
let isInitialized = false

export async function initializeAuth() {
  if (isInitialized) return
  
  const auth = useAuth()
  await auth.initialize()
  
  isInitialized = true
  console.log('üîê Auth system initialized')
}

/**
 * üéØ –ö–û–ú–ü–û–ó–ê–ë–õ –î–õ–Ø PROTECTED ROUTES
 */
export function useAuthGuard() {
  const auth = useAuth()
  
  function requireAuth() {
    if (!auth.isAuthenticated.value) {
      throw new Error('Authentication required')
    }
  }
  
  function requireRole(role) {
    requireAuth()
    if (!auth.hasRole(role)) {
      throw new Error(`Role ${role} required`)
    }
  }
  
  function requirePermission(permission) {
    requireAuth()
    if (!auth.hasPermission(permission)) {
      throw new Error(`Permission ${permission} required`)
    }
  }
  
  return {
    requireAuth,
    requireRole,
    requirePermission
  }
}

console.log('üîê Auth composable ready!')
