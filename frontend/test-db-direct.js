// –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π Supabase
import { createClient } from '@supabase/supabase-js'

// –õ–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Supabase (–∏—Å–ø–æ–ª—å–∑—É–µ–º service_role –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
const supabaseUrl = 'http://127.0.0.1:54321'
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZS1kZW1vIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImV4cCI6MTk4MzgxMjk5Nn0.EGIM96RAZx35lJzdJsyH-qQwv8Hdp7fsn3W0YpN81IU'

const supabase = createClient(supabaseUrl, supabaseKey)

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testUser = {
  telegram_id: 12345678,
  telegram_username: 'testuser',
  full_name: 'Test User HoReCa',
  phone: null,
  email: 'test@example.com'
}

async function testDatabaseIntegration() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...')
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
    console.log('\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π Supabase')
    const { data: connection, error: connectionError } = await supabase
      .from('user_profiles')
      .select('id')
      .limit(1)
    
    if (connectionError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', connectionError)
      return false
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ')
    
    // 2. –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\n2Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ user_profiles')
    
    const { data: profile, error: profileError } = await supabase
      .from('user_profiles')
      .insert(testUser)
      .select()
      .single()
    
    if (profileError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', profileError)
      return false
    }
    
    console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª–µ–Ω:', profile)
    
    // 3. –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏—é
    console.log('\n3Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é –≤ employers')
    
    const { data: employer, error: employerError } = await supabase
      .from('employers')
      .insert({
        user_id: profile.id,
        company_name: '–¢–µ—Å—Ç–æ–≤–∞—è HoReCa –∫–æ–º–ø–∞–Ω–∏—è',
        company_type: 'restaurant',
        contact_email: 'test@horeca.kz',
        address: '–≥. –ê–ª–º–∞—Ç—ã, —É–ª. –ê–±–∞—è, 1',
        city_id: 1
      })
      .select()
      .single()
    
    if (employerError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è:', employerError)
      return false
    }
    
    console.log('‚úÖ –ö–æ–º–ø–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞:', employer)
    
    // 4. –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é
    console.log('\n4Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é –≤ job_postings')
    
    const { data: job, error: jobError } = await supabase
      .from('job_postings')
      .insert({
        title: '–û—Ñ–∏—Ü–∏–∞–Ω—Ç –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω "–î–∞—Å—Ç–∞—Ä—Ö–∞–Ω"',
        description: '–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—ã—Ç–Ω—ã–π –æ—Ñ–∏—Ü–∏–∞–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ –∫–∞–∑–∞—Ö—Å–∫–æ–π –∫—É—Ö–Ω–∏',
        company_id: employer.id,
        creator_id: profile.id,
        city_id: 1,
        category: 'service',
        position_type: 'waiter',
        employment_type: 'full_time',
        schedule_type: 'shift',
        salary_min: 150000,
        salary_max: 200000,
        salary_type: 'monthly',
        required_skills: ['–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤', '–∑–Ω–∞–Ω–∏–µ –º–µ–Ω—é', '—Ä–∞–±–æ—Ç–∞ —Å POS'],
        benefits: ['–ø–∏—Ç–∞–Ω–∏–µ', '—Ñ–æ—Ä–º–∞', '—Å–∫–∏–¥–∫–∏'],
        address: '–≥. –ê–ª–º–∞—Ç—ã, —É–ª. –ê–±–∞—è, 1',
        district: '–ê–ª–º–∞–ª–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω'
      })
      .select()
      .single()
    
    if (jobError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏:', jobError)
      return false
    }
    
    console.log('‚úÖ –û–±—ã—á–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', job)
    
    // 5. –°–æ–∑–¥–∞–µ–º —Å—Ä–æ—á–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é
    console.log('\n5Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —Å—Ä–æ—á–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é –≤ urgent_jobs')
    
    const tomorrow = new Date()
    tomorrow.setDate(tomorrow.getDate() + 1)
    
    const { data: urgentJob, error: urgentError } = await supabase
      .from('urgent_jobs')
      .insert({
        title: '–°–†–û–ß–ù–û! –ù—É–∂–µ–Ω –±–∞—Ä–º–µ–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞',
        description: '–ù–∞ —Å–º–µ–Ω—É –∑–∞–≤—Ç—Ä–∞ –≤ –±–∞—Ä–±–µ—Ä—à–æ–ø–µ —Å –∫–∞—Ñ–µ. –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –∫–æ—Ñ–µ-–º–∞—à–∏–Ω–æ–π –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω.',
        company_id: employer.id,
        creator_id: profile.id,
        city_id: 1,
        position_type: 'bartender',
        needed_date: tomorrow.toISOString().split('T')[0],
        needed_time_start: '18:00',
        needed_time_end: '02:00',
        payment_per_shift: 25000,
        application_deadline: new Date(Date.now() + 2 * 3600000).toISOString(), // +2 —á–∞—Å–∞
        address: '–≥. –ê–ª–º–∞—Ç—ã, –ø—Ä. –î–æ—Å—Ç—ã–∫, 123',
        district: '–ú–µ–¥–µ—É—Å–∫–∏–π —Ä–∞–π–æ–Ω',
        contact_method: 'telegram',
        contact_telegram: '@testuser_horeca',
        priority: 'high'
      })
      .select()
      .single()
    
    if (urgentError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ä–æ—á–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏:', urgentError)
      return false
    }
    
    console.log('‚úÖ –°—Ä–æ—á–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞:', urgentJob)
    
    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –º–æ–∂–Ω–æ —á–∏—Ç–∞—Ç—å (RLS —Ä–∞–±–æ—Ç–∞–µ—Ç)
    console.log('\n6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ RLS –ø–æ–ª–∏—Ç–∏–∫–∏')
    
    // –ß–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
    const { data: activeJobs, error: activeJobsError } = await supabase
      .from('job_postings')
      .select('*')
      .eq('is_active', true)
    
    if (!activeJobsError) {
      console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —á–∏—Ç–∞—é—Ç—Å—è:', activeJobs.length, '—à—Ç.')
    }
    
    // –ß–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Ä–æ—á–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
    const { data: activeUrgentJobs, error: activeUrgentError } = await supabase
      .from('urgent_jobs')
      .select('*')
      .eq('is_active', true)
    
    if (!activeUrgentError) {
      console.log('‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å—Ä–æ—á–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ —á–∏—Ç–∞—é—Ç—Å—è:', activeUrgentJobs.length, '—à—Ç.')
    }
    
    // 7. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    console.log('\n7Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º')
    
    const stats = await Promise.all([
      supabase.from('user_profiles').select('*', { count: 'exact', head: true }),
      supabase.from('employers').select('*', { count: 'exact', head: true }),
      supabase.from('job_postings').select('*', { count: 'exact', head: true }),
      supabase.from('urgent_jobs').select('*', { count: 'exact', head: true })
    ])
    
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:')
    console.log(`   - user_profiles: ${stats[0].count} –∑–∞–ø–∏—Å–µ–π`)
    console.log(`   - employers: ${stats[1].count} –∑–∞–ø–∏—Å–µ–π`)
    console.log(`   - job_postings: ${stats[2].count} –∑–∞–ø–∏—Å–µ–π`)
    console.log(`   - urgent_jobs: ${stats[3].count} –∑–∞–ø–∏—Å–µ–π`)
    
    console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!')
    console.log('‚úÖ HoReCa —Å—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞!')
    
    return true
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    return false
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testDatabaseIntegration()
  .then(success => {
    console.log(success ? 
      '\nüöÄ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!' : 
      '\n‚ùå –¢—Ä–µ–±—É—é—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏'
    )
    process.exit(success ? 0 : 1)
  })