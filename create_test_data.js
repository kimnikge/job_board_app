/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Supabase API
 */

import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://kuyudpxqlrinkcxvorom.supabase.co'
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt1eXVkcHhxbHJpbmtjeHZvcm9tIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0ODk2ODE5OSwiZXhwIjoyMDY0NTQ0MTk5fQ.yJIhTRV-TqzFDy0sQTgcfCa7Xw7b8IHZMO2-s3OtS3g'

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function checkExistingTables() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã...')
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã —É–∂–µ –µ—Å—Ç—å
  const tables = [
    'city_districts',
    'specializations', 
    'venue_types',
    'user_profiles',
    'companies',
    'urgent_jobs'
  ]
  
  for (const table of tables) {
    try {
      const { data, error } = await supabase
        .from(table)
        .select('id')
        .limit(1)
      
      if (error) {
        console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${table}: –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢`)
        console.log(`   –û—à–∏–±–∫–∞: ${error.message}`)
      } else {
        console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table}: –°–£–©–ï–°–¢–í–£–ï–¢ (–∑–∞–ø–∏—Å–µ–π: ${data?.length || 0})`)
      }
    } catch (e) {
      console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${table}: –û–®–ò–ë–ö–ê - ${e.message}`)
    }
  }
}

async function createTestData() {
  console.log('üìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...')
  
  try {
    // –°–æ–∑–¥–∞–µ–º —Ä–∞–π–æ–Ω—ã
    const districtsData = [
      { name: '–ï—Å–∏–ª—å—Å–∫–∏–π —Ä–∞–π–æ–Ω', description: '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω' },
      { name: '–ê–ª–º–∞—Ç–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω', description: '–Æ–∂–Ω—ã–π —Ä–∞–π–æ–Ω' },
      { name: '–°–∞—Ä—ã–∞—Ä–∫–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω', description: '–°–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–π–æ–Ω' }
    ]
    
    const { data: districts, error: districtsError } = await supabase
      .from('city_districts')
      .upsert(districtsData)
      .select()
    
    if (districtsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–π–æ–Ω–æ–≤:', districtsError.message)
    } else {
      console.log('‚úÖ –†–∞–π–æ–Ω—ã —Å–æ–∑–¥–∞–Ω—ã:', districts?.length || 0)
    }
    
    // –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    const specializationsData = [
      { name: '–ü–æ–≤–∞—Ä', category: 'kitchen' },
      { name: '–û—Ñ–∏—Ü–∏–∞–Ω—Ç', category: 'service' },
      { name: '–ë–∞—Ä–º–µ–Ω', category: 'service' },
      { name: '–ö—É—Ö–æ–Ω–Ω—ã–π —Ä–∞–±–æ—Ç–Ω–∏–∫', category: 'kitchen' }
    ]
    
    const { data: specializations, error: specializationsError } = await supabase
      .from('specializations')
      .upsert(specializationsData)
      .select()
    
    if (specializationsError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π:', specializationsError.message)
    } else {
      console.log('‚úÖ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã:', specializations?.length || 0)
    }
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏–∏
    const companiesData = [
      {
        name: '–†–µ—Å—Ç–æ—Ä–∞–Ω "–ê—Å—Ç–∞–Ω–∞"',
        industry: '–†–µ—Å—Ç–æ—Ä–∞–Ω',
        description: '–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞',
        verified: true,
        employees_count: '50-100'
      },
      {
        name: '–ö–∞—Ñ–µ "–î–æ—Å—Ç—ã–∫"',
        industry: '–ö–∞—Ñ–µ',
        description: '–£—é—Ç–Ω–æ–µ —Å–µ–º–µ–π–Ω–æ–µ –∫–∞—Ñ–µ',
        verified: true,
        employees_count: '10-50'
      }
    ]
    
    const { data: companies, error: companiesError } = await supabase
      .from('companies')
      .upsert(companiesData)
      .select()
    
    if (companiesError) {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–π:', companiesError.message)
    } else {
      console.log('‚úÖ –ö–æ–º–ø–∞–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω—ã:', companies?.length || 0)
    }
    
    console.log('üéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã!')
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
async function main() {
  await checkExistingTables()
  console.log('\n' + '='.repeat(50) + '\n')
  await createTestData()
}

main()
