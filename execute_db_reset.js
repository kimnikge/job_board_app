/**
 * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL —á–µ—Ä–µ–∑ Supabase API
 */

import { createClient } from '@supabase/supabase-js'
import fs from 'fs'

const supabaseUrl = 'https://kuyudpxqlrinkcxvorom.supabase.co'
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt1eXVkcHhxbHJpbmtjeHZvcm9tIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0ODk2ODE5OSwiZXhwIjoyMDY0NTQ0MTk5fQ.yJIhTRV-TqzFDy0sQTgcfCa7Xw7b8IHZMO2-s3OtS3g'

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function executeSQLFile() {
  console.log('üóÑÔ∏è –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
  
  try {
    // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª
    const sqlContent = fs.readFileSync('./database_reset.sql', 'utf8')
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ —Ç–æ—á–∫–µ —Å –∑–∞–ø—è—Ç–æ–π
    const commands = sqlContent
      .split(';')
      .map(cmd => cmd.trim())
      .filter(cmd => cmd.length > 0 && !cmd.startsWith('--') && cmd !== '')
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥: ${commands.length}`)
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –æ–¥–Ω–æ–π —á–µ—Ä–µ–∑ REST API
    for (let i = 0; i < commands.length; i++) {
      const command = commands[i].trim()
      if (command) {
        console.log(`‚ö° –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É ${i + 1}/${commands.length}`)
        console.log(`SQL: ${command.substring(0, 80)}...`)
        
        try {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º REST API –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL
          const response = await fetch(`${supabaseUrl}/rest/v1/rpc/exec_sql`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${supabaseServiceKey}`,
              'apikey': supabaseServiceKey
            },
            body: JSON.stringify({ sql: command + ';' })
          })
          
          if (!response.ok) {
            const error = await response.text()
            console.log(`‚ö†Ô∏è  –ö–æ–º–∞–Ω–¥–∞ ${i + 1} - –≤–æ–∑–º–æ–∂–Ω–∞—è –æ—à–∏–±–∫–∞: ${error}`)
          } else {
            console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${i + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞`)
          }
        } catch (error) {
          console.log(`‚ö†Ô∏è  –ö–æ–º–∞–Ω–¥–∞ ${i + 1} - –æ—à–∏–±–∫–∞: ${error.message}`)
        }
      }
    }
    
    console.log('üéâ –°–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω!')
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
  }
}

async function executeManually() {
  console.log('üîß –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ Supabase –∫–ª–∏–µ–Ω—Ç...')
  
  try {
    // –ö–æ–º–∞–Ω–¥–∞ 1: –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    console.log('üóëÔ∏è  –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã...')
    const dropCommands = [
      'DROP TABLE IF EXISTS urgent_job_responses CASCADE',
      'DROP TABLE IF EXISTS job_applications CASCADE',
      'DROP TABLE IF EXISTS urgent_jobs CASCADE', 
      'DROP TABLE IF EXISTS job_postings CASCADE',
      'DROP TABLE IF EXISTS companies CASCADE',
      'DROP TABLE IF EXISTS user_profiles CASCADE',
      'DROP TABLE IF EXISTS candidate_profiles CASCADE',
      'DROP TABLE IF EXISTS employer_profiles CASCADE'
    ]
    
    for (const cmd of dropCommands) {
      try {
        await supabase.rpc('exec_sql', { sql: cmd })
        console.log(`‚úÖ ${cmd}`)
      } catch (e) {
        console.log(`‚ö†Ô∏è  ${cmd} - ${e.message}`)
      }
    }
    
    console.log('‚úÖ –°—Ç–∞—Ä—ã–µ —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã')
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  }
}

// –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ INSERT –∫–æ–º–∞–Ω–¥—ã
async function createBasicStructure() {
  console.log('üèóÔ∏è  –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—Ä—É—á–Ω—É—é...')
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã –µ—Å—Ç—å
    const { data: existingTables, error } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public')
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü:', error)
      return
    }
    
    const tableNames = existingTables.map(t => t.table_name)
    console.log('üìä –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:', tableNames.join(', '))
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    const requiredTables = ['user_profiles', 'companies', 'urgent_jobs']
    const missingTables = requiredTables.filter(table => !tableNames.includes(table))
    
    if (missingTables.length > 0) {
      console.log('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã:', missingTables.join(', '))
      console.log('üîß –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ Supabase Dashboard')
    } else {
      console.log('‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç!')
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
      for (const table of requiredTables) {
        try {
          const { count } = await supabase
            .from(table)
            .select('*', { count: 'exact', head: true })
          
          console.log(`üìà ${table}: ${count} –∑–∞–ø–∏—Å–µ–π`)
        } catch (e) {
          console.log(`‚ö†Ô∏è  ${table}: –æ—à–∏–±–∫–∞ - ${e.message}`)
        }
      }
    }
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞:', error)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
createBasicStructure()
