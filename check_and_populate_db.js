/**
 * –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ API –≤—ã–∑–æ–≤—ã
 */

import { createClient } from '@supabase/supabase-js'

const supabaseUrl = 'https://kuyudpxqlrinkcxvorom.supabase.co'
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt1eXVkcHhxbHJpbmtjeHZvcm9tIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0ODk2ODE5OSwiZXhwIjoyMDY0NTQ0MTk5fQ.yJIhTRV-TqzFDy0sQTgcfCa7Xw7b8IHZMO2-s3OtS3g'

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function checkTableAccess() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–∞–º...')
  
  const tables = [
    'city_districts',
    'specializations', 
    'venue_types',
    'user_profiles',
    'companies',
    'urgent_jobs'
  ]
  
  for (const table of tables) {
    try {
      const { data, error, count } = await supabase
        .from(table)
        .select('*', { count: 'exact' })
        .limit(1)
      
      if (error) {
        console.log(`‚ùå ${table}: ${error.message}`)
      } else {
        console.log(`‚úÖ ${table}: –¥–æ—Å—Ç—É–ø–µ–Ω (–≤—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${count})`)
        if (data && data.length > 0) {
          const columns = Object.keys(data[0])
          console.log(`   –ö–æ–ª–æ–Ω–∫–∏: ${columns.slice(0, 5).join(', ')}${columns.length > 5 ? '...' : ''}`)
        }
      }
    } catch (e) {
      console.log(`üí• ${table}: –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ - ${e.message}`)
    }
  }
}

async function createTestData() {
  console.log('\nüìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö...')
  
  try {
    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ city_districts (–µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    try {
      const districtsData = [
        { name: '–ï—Å–∏–ª—å—Å–∫–∏–π —Ä–∞–π–æ–Ω', description: '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–∞–π–æ–Ω' },
        { name: '–ê–ª–º–∞—Ç–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω', description: '–Æ–∂–Ω—ã–π —Ä–∞–π–æ–Ω' },
        { name: '–°–∞—Ä—ã–∞—Ä–∫–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω', description: '–°–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–π–æ–Ω' }
      ]
      
      const { data: districts, error } = await supabase
        .from('city_districts')
        .upsert(districtsData, { onConflict: 'name' })
        .select()
      
      if (error) {
        console.log('‚ö†Ô∏è  city_districts:', error.message)
      } else {
        console.log('‚úÖ city_districts: –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
      }
    } catch (e) {
      console.log('‚ùå city_districts: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
    }
    
    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ specializations
    try {
      const specializationsData = [
        { name: '–ü–æ–≤–∞—Ä', category: 'kitchen', description: '–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –≥–æ—Ä—è—á–∏—Ö –±–ª—é–¥' },
        { name: '–û—Ñ–∏—Ü–∏–∞–Ω—Ç', category: 'service', description: '–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≥–æ—Å—Ç–µ–π' },
        { name: '–ë–∞—Ä–º–µ–Ω', category: 'service', description: '–ü—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–∏—Ç–∫–æ–≤' },
        { name: '–ö—É—Ö–æ–Ω–Ω—ã–π —Ä–∞–±–æ—Ç–Ω–∏–∫', category: 'kitchen', description: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤' }
      ]
      
      const { data: specializations, error } = await supabase
        .from('specializations')
        .upsert(specializationsData, { onConflict: 'name' })
        .select()
      
      if (error) {
        console.log('‚ö†Ô∏è  specializations:', error.message)
      } else {
        console.log('‚úÖ specializations: –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
      }
    } catch (e) {
      console.log('‚ùå specializations: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
    }
    
    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ venue_types
    try {
      const venueTypesData = [
        { name: '–†–µ—Å—Ç–æ—Ä–∞–Ω', description: '–ó–∞–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞' },
        { name: '–ö–∞—Ñ–µ', description: '–ë—ã—Å—Ç—Ä–æ–µ –ø–∏—Ç–∞–Ω–∏–µ' },
        { name: '–ü–∏—Ü—Ü–µ—Ä–∏—è', description: '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –ø–∏—Ü—Ü–µ' },
        { name: '–ö–æ—Ñ–µ–π–Ω—è', description: '–ö–æ—Ñ–µ –∏ –ª–µ–≥–∫–∏–µ –∑–∞–∫—É—Å–∫–∏' }
      ]
      
      const { data: venueTypes, error } = await supabase
        .from('venue_types')
        .upsert(venueTypesData, { onConflict: 'name' })
        .select()
      
      if (error) {
        console.log('‚ö†Ô∏è  venue_types:', error.message)
      } else {
        console.log('‚úÖ venue_types: –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
      }
    } catch (e) {
      console.log('‚ùå venue_types: –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
    }
    
    console.log('\nüéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü!')
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
  }
}

async function main() {
  await checkTableAccess()
  await createTestData()
  
  console.log('\n' + '='.repeat(60))
  console.log('üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:')
  console.log('='.repeat(60))
  console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
  console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã')
  console.log('üîß –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã user_profiles, companies, urgent_jobs –Ω–µ –Ω–∞–π–¥–µ–Ω—ã,')
  console.log('   –∏—Ö –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —á–µ—Ä–µ–∑ Supabase Dashboard')
}

main()
