/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü —á–µ—Ä–µ–∑ HTTP API
 */

async function createMissingTables() {
  console.log('üèóÔ∏è  –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã —á–µ—Ä–µ–∑ HTTP API...')
  
  const supabaseUrl = 'https://kuyudpxqlrinkcxvorom.supabase.co'
  const serviceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt1eXVkcHhxbHJpbmtjeHZvcm9tIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0ODk2ODE5OSwiZXhwIjoyMDY0NTQ0MTk5fQ.yJIhTRV-TqzFDy0sQTgcfCa7Xw7b8IHZMO2-s3OtS3g'
  
  // SQL –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
  const createUserProfilesSQL = `
CREATE TABLE IF NOT EXISTS user_profiles (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,
    role varchar(20) NOT NULL CHECK (role IN ('candidate', 'employer', 'admin')),
    first_name varchar(100),
    last_name varchar(100),
    phone varchar(20),
    email varchar(255),
    specialization_id integer REFERENCES specializations(id),
    experience_years integer DEFAULT 0,
    preferred_district_id integer REFERENCES city_districts(id),
    preferred_salary_min integer DEFAULT 0,
    preferred_salary_max integer DEFAULT 0,
    available_immediately boolean DEFAULT false,
    available_weekends boolean DEFAULT false,
    has_own_transport boolean DEFAULT false,
    ready_for_urgent boolean DEFAULT false,
    has_health_book boolean DEFAULT false,
    has_food_safety_cert boolean DEFAULT false,
    avatar_url text,
    bio text,
    telegram_username varchar(100),
    created_at timestamp with time zone DEFAULT NOW(),
    updated_at timestamp with time zone DEFAULT NOW()
);`

  const createCompaniesSQL = `
CREATE TABLE IF NOT EXISTS companies (
    id serial PRIMARY KEY,
    name varchar(200) NOT NULL,
    industry varchar(100),
    description text,
    logo text,
    website varchar(255),
    phone varchar(20),
    email varchar(255),
    address text,
    district_id integer REFERENCES city_districts(id),
    venue_type_id integer REFERENCES venue_types(id),
    verified boolean DEFAULT false,
    employees_count varchar(50),
    working_hours varchar(100),
    location varchar(255),
    created_at timestamp with time zone DEFAULT NOW(),
    updated_at timestamp with time zone DEFAULT NOW()
);`

  const createUrgentJobsSQL = `
CREATE TABLE IF NOT EXISTS urgent_jobs (
    id serial PRIMARY KEY,
    title varchar(200) NOT NULL,
    company_id integer REFERENCES companies(id) ON DELETE CASCADE,
    venue_name varchar(200) NOT NULL,
    specialization_id integer REFERENCES specializations(id),
    district_id integer REFERENCES city_districts(id),
    venue_type_id integer REFERENCES venue_types(id),
    description text,
    requirements text,
    needed_date date NOT NULL,
    needed_time time,
    duration_hours integer DEFAULT 8,
    pay_per_shift integer NOT NULL,
    address text,
    contact_phone varchar(20),
    contact_person varchar(100),
    status varchar(20) DEFAULT 'active' CHECK (status IN ('active', 'filled', 'cancelled')),
    created_at timestamp with time zone DEFAULT NOW(),
    updated_at timestamp with time zone DEFAULT NOW()
);`

  const sqlCommands = [
    { name: 'user_profiles', sql: createUserProfilesSQL },
    { name: 'companies', sql: createCompaniesSQL },
    { name: 'urgent_jobs', sql: createUrgentJobsSQL }
  ]
  
  for (const { name, sql } of sqlCommands) {
    try {
      console.log(`‚ö° –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É ${name}...`)
      
      const response = await fetch(`${supabaseUrl}/rest/v1/query`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${serviceKey}`,
          'apikey': serviceKey
        },
        body: JSON.stringify({ query: sql })
      })
      
      if (response.ok) {
        console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${name} —Å–æ–∑–¥–∞–Ω–∞`)
      } else {
        const error = await response.text()
        console.log(`‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ ${name}: ${error}`)
      }
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ${name}: ${error.message}`)
    }
  }
}

// –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± - –≤—ã–≤–æ–¥–∏–º SQL –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ Dashboard
function outputSQLForDashboard() {
  console.log('\nüìã SQL –î–õ–Ø –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø –í SUPABASE DASHBOARD:')
  console.log('=' * 60)
  console.log(`
-- –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ Supabase Dashboard > SQL Editor

-- 1. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ—Ñ–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
CREATE TABLE IF NOT EXISTS user_profiles (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,
    role varchar(20) NOT NULL CHECK (role IN ('candidate', 'employer', 'admin')),
    first_name varchar(100),
    last_name varchar(100),
    phone varchar(20),
    email varchar(255),
    specialization_id integer REFERENCES specializations(id),
    experience_years integer DEFAULT 0,
    preferred_district_id integer REFERENCES city_districts(id),
    preferred_salary_min integer DEFAULT 0,
    preferred_salary_max integer DEFAULT 0,
    available_immediately boolean DEFAULT false,
    available_weekends boolean DEFAULT false,
    has_own_transport boolean DEFAULT false,
    ready_for_urgent boolean DEFAULT false,
    has_health_book boolean DEFAULT false,
    has_food_safety_cert boolean DEFAULT false,
    avatar_url text,
    bio text,
    telegram_username varchar(100),
    created_at timestamp with time zone DEFAULT NOW(),
    updated_at timestamp with time zone DEFAULT NOW()
);

-- 2. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–æ–º–ø–∞–Ω–∏–π
CREATE TABLE IF NOT EXISTS companies (
    id serial PRIMARY KEY,
    name varchar(200) NOT NULL,
    industry varchar(100),
    description text,
    logo text,
    website varchar(255),
    phone varchar(20),
    email varchar(255),
    address text,
    district_id integer REFERENCES city_districts(id),
    venue_type_id integer REFERENCES venue_types(id),
    verified boolean DEFAULT false,
    employees_count varchar(50),
    working_hours varchar(100),
    location varchar(255),
    created_at timestamp with time zone DEFAULT NOW(),
    updated_at timestamp with time zone DEFAULT NOW()
);

-- 3. –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ä–æ—á–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
CREATE TABLE IF NOT EXISTS urgent_jobs (
    id serial PRIMARY KEY,
    title varchar(200) NOT NULL,
    company_id integer REFERENCES companies(id) ON DELETE CASCADE,
    venue_name varchar(200) NOT NULL,
    specialization_id integer REFERENCES specializations(id),
    district_id integer REFERENCES city_districts(id),
    venue_type_id integer REFERENCES venue_types(id),
    description text,
    requirements text,
    needed_date date NOT NULL,
    needed_time time,
    duration_hours integer DEFAULT 8,
    pay_per_shift integer NOT NULL,
    address text,
    contact_phone varchar(20),
    contact_person varchar(100),
    status varchar(20) DEFAULT 'active' CHECK (status IN ('active', 'filled', 'cancelled')),
    created_at timestamp with time zone DEFAULT NOW(),
    updated_at timestamp with time zone DEFAULT NOW()
);

-- 4. –í–∫–ª—é—á–∞–µ–º RLS (Row Level Security)
ALTER TABLE user_profiles ENABLE ROW LEVEL SECURITY;
ALTER TABLE companies ENABLE ROW LEVEL SECURITY;
ALTER TABLE urgent_jobs ENABLE ROW LEVEL SECURITY;

-- 5. –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø–æ–ª–∏—Ç–∏–∫–∏ RLS
CREATE POLICY "Public profiles are viewable by everyone" 
ON user_profiles FOR SELECT 
USING (true);

CREATE POLICY "Companies are viewable by everyone" 
ON companies FOR SELECT 
USING (true);

CREATE POLICY "Urgent jobs are viewable by everyone" 
ON urgent_jobs FOR SELECT 
USING (true);

-- 6. –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–π
INSERT INTO companies (name, industry, description, verified, employees_count, district_id, venue_type_id, location) VALUES
('–†–µ—Å—Ç–æ—Ä–∞–Ω "–ê—Å—Ç–∞–Ω–∞"', '–†–µ—Å—Ç–æ—Ä–∞–Ω –≤—ã—Å–æ–∫–æ–π –∫—É—Ö–Ω–∏', '–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω —Å –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–π –∫—É—Ö–Ω–µ–π –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞', true, '50-100', 1, 1, '–ï—Å–∏–ª—å—Å–∫–∏–π —Ä–∞–π–æ–Ω'),
('–ö–∞—Ñ–µ "–î–æ—Å—Ç—ã–∫"', '–°–µ–º–µ–π–Ω–æ–µ –∫–∞—Ñ–µ', '–£—é—Ç–Ω–æ–µ —Å–µ–º–µ–π–Ω–æ–µ –∫–∞—Ñ–µ —Å –¥–æ–º–∞—à–Ω–µ–π –∫—É—Ö–Ω–µ–π', true, '10-50', 2, 2, '–ê–ª–º–∞—Ç–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω'),
('–ü–∏—Ü—Ü–µ—Ä–∏—è "–ú–∞–º–∞ –ú–∏—è"', '–ò—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è', '–ê—É—Ç–µ–Ω—Ç–∏—á–Ω–∞—è –∏—Ç–∞–ª—å—è–Ω—Å–∫–∞—è –ø–∏—Ü—Ü–µ—Ä–∏—è', true, '20-50', 3, 3, '–°–∞—Ä—ã–∞—Ä–∫–∏–Ω—Å–∫–∏–π —Ä–∞–π–æ–Ω');

-- 7. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
INSERT INTO user_profiles (role, first_name, last_name, specialization_id, experience_years, ready_for_urgent, available_immediately, has_own_transport, preferred_district_id) VALUES
('candidate', '–ê–π–¥–∞—Ä', '–ö–∞—Å—ã–º–æ–≤', 1, 3, true, true, false, 1),
('candidate', '–ê—Å–µ–ª—å', '–ù—É—Ä–ª–∞–Ω–æ–≤–∞', 4, 2, false, true, true, 2),
('candidate', '–î–∞–Ω–∏—è—Ä', '–¢–æ–∫—Ç–∞—Ä–æ–≤', 5, 5, true, false, true, 3);

-- 8. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ä–æ—á–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
INSERT INTO urgent_jobs (title, company_id, venue_name, specialization_id, district_id, venue_type_id, description, needed_date, needed_time, pay_per_shift, address, contact_phone, status) VALUES
('–ü–æ–≤–∞—Ä –Ω–∞ —É—Ç—Ä–µ–Ω–Ω—é—é —Å–º–µ–Ω—É', 1, '–†–µ—Å—Ç–æ—Ä–∞–Ω "–ê—Å—Ç–∞–Ω–∞"', 1, 1, 1, '–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø—ã—Ç–Ω—ã–π –ø–æ–≤–∞—Ä –Ω–∞ —É—Ç—Ä–µ–Ω–Ω—é—é —Å–º–µ–Ω—É. –†–∞–±–æ—Ç–∞ —Å –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–π –∫—É—Ö–Ω–µ–π.', CURRENT_DATE, '09:00', 8000, '—É–ª. –†–µ—Å–ø—É–±–ª–∏–∫–∏, 15', '+7 701 123 4567', 'active'),
('–û—Ñ–∏—Ü–∏–∞–Ω—Ç –Ω–∞ –≤–µ—á–µ—Ä–Ω—é—é —Å–º–µ–Ω—É', 2, '–ö–∞—Ñ–µ "–î–æ—Å—Ç—ã–∫"', 4, 2, 2, '–ù—É–∂–µ–Ω –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ—Ñ–∏—Ü–∏–∞–Ω—Ç –Ω–∞ –≤–µ—á–µ—Ä–Ω—é—é —Å–º–µ–Ω—É. –û–ø—ã—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç—Å—è.', CURRENT_DATE, '18:00', 5000, '–ø—Ä. –î–æ—Å—Ç—ã–∫, 20', '+7 701 234 5678', 'active');

-- –ì–æ—Ç–æ–≤–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–∞–±–ª–∏—Ü—ã –∫–æ–º–∞–Ω–¥–æ–π:
-- SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' ORDER BY table_name;
  `)
  
  console.log('\nüîó –°–°–´–õ–ö–ê –ù–ê SUPABASE DASHBOARD:')
  console.log('https://supabase.com/dashboard/project/kuyudpxqlrinkcxvorom/sql/new')
}

outputSQLForDashboard()
