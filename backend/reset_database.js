/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
 */

import { createClient } from '@supabase/supabase-js'
import fs from 'fs'
import path from 'path'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const supabaseUrl = 'https://kuyudpxqlrinkcxvorom.supabase.co'
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imt1eXVkcHhxbHJpbmtjeHZvcm9tIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0ODk2ODE5OSwiZXhwIjoyMDY0NTQ0MTk5fQ.yJIhTRV-TqzFDy0sQTgcfCa7Xw7b8IHZMO2-s3OtS3g'

const supabase = createClient(supabaseUrl, supabaseServiceKey)

async function resetDatabase() {
  console.log('üóÑÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...')
  
  try {
    // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏
    const migrationPath = path.join(process.cwd(), 'supabase/migrations/20250808000000_complete_database_reset.sql')
    const sqlContent = fs.readFileSync(migrationPath, 'utf8')
    
    console.log('üìÑ SQL –º–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞, —Ä–∞–∑–º–µ—Ä:', sqlContent.length, '—Å–∏–º–≤–æ–ª–æ–≤')
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    const statements = sqlContent
      .split(';')
      .map(stmt => stmt.trim())
      .filter(stmt => stmt.length > 0 && !stmt.startsWith('--'))
    
    console.log('üìã –ù–∞–π–¥–µ–Ω–æ SQL –∫–æ–º–∞–Ω–¥:', statements.length)
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É
    for (let i = 0; i < statements.length; i++) {
      const statement = statements[i]
      if (statement.trim()) {
        console.log(`‚ö° –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É ${i + 1}/${statements.length}`)
        
        const { error } = await supabase.rpc('exec_sql', { sql: statement + ';' })
        
        if (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ${i + 1}:`, error.message)
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
        } else {
          console.log(`‚úÖ –ö–æ–º–∞–Ω–¥–∞ ${i + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
        }
      }
    }
    
    console.log('üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞!')
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    const { data: tables, error: tablesError } = await supabase
      .from('information_schema.tables')
      .select('table_name')
      .eq('table_schema', 'public')
      .neq('table_name', 'schema_migrations')
    
    if (tablesError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü:', tablesError)
    } else {
      console.log('üìä –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:', tables.map(t => t.table_name).join(', '))
    }
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
  }
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SQL
async function resetDatabaseDirect() {
  console.log('üóÑÔ∏è –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø—Ä—è–º–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL...')
  
  const basicSQL = `
-- –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã
DROP TABLE IF EXISTS urgent_job_responses CASCADE;
DROP TABLE IF EXISTS job_applications CASCADE; 
DROP TABLE IF EXISTS urgent_jobs CASCADE;
DROP TABLE IF EXISTS job_postings CASCADE;
DROP TABLE IF EXISTS companies CASCADE;
DROP TABLE IF EXISTS user_profiles CASCADE;
DROP TABLE IF EXISTS venue_types CASCADE;
DROP TABLE IF EXISTS specializations CASCADE;
DROP TABLE IF EXISTS city_districts CASCADE;
DROP TABLE IF EXISTS notification_queue CASCADE;
DROP TABLE IF EXISTS notification_settings CASCADE;
DROP TABLE IF EXISTS automation_logs CASCADE;
DROP TABLE IF EXISTS daily_statistics CASCADE;

-- –°–æ–∑–¥–∞–µ–º —Ä–∞–π–æ–Ω—ã –ê—Å—Ç–∞–Ω—ã
CREATE TABLE city_districts (
    id serial PRIMARY KEY,
    name varchar(100) NOT NULL UNIQUE,
    description text,
    metro_stations text[],
    coordinates point,
    created_at timestamp with time zone DEFAULT NOW(),
    updated_at timestamp with time zone DEFAULT NOW()
);

-- –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
CREATE TABLE specializations (
    id serial PRIMARY KEY,
    name varchar(100) NOT NULL UNIQUE,
    description text,
    category varchar(50) DEFAULT 'general',
    is_active boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT NOW(),
    updated_at timestamp with time zone DEFAULT NOW()
);

-- –°–æ–∑–¥–∞–µ–º —Ç–∏–ø—ã –∑–∞–≤–µ–¥–µ–Ω–∏–π
CREATE TABLE venue_types (
    id serial PRIMARY KEY,
    name varchar(100) NOT NULL UNIQUE,
    description text,
    typical_specializations integer[],
    created_at timestamp with time zone DEFAULT NOW(),
    updated_at timestamp with time zone DEFAULT NOW()
);

-- –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
CREATE TABLE user_profiles (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id uuid REFERENCES auth.users(id) ON DELETE CASCADE,
    role varchar(20) NOT NULL CHECK (role IN ('candidate', 'employer', 'admin')),
    
    first_name varchar(100),
    last_name varchar(100),
    phone varchar(20),
    email varchar(255),
    
    specialization_id integer REFERENCES specializations(id),
    experience_years integer DEFAULT 0,
    preferred_district_id integer REFERENCES city_districts(id),
    preferred_salary_min integer DEFAULT 0,
    preferred_salary_max integer DEFAULT 0,
    available_immediately boolean DEFAULT false,
    available_weekends boolean DEFAULT false,
    has_own_transport boolean DEFAULT false,
    ready_for_urgent boolean DEFAULT false,
    
    has_health_book boolean DEFAULT false,
    has_food_safety_cert boolean DEFAULT false,
    
    avatar_url text,
    bio text,
    telegram_username varchar(100),
    created_at timestamp with time zone DEFAULT NOW(),
    updated_at timestamp with time zone DEFAULT NOW()
);

-- –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏–∏
CREATE TABLE companies (
    id serial PRIMARY KEY,
    name varchar(200) NOT NULL,
    industry varchar(100),
    description text,
    logo text,
    website varchar(255),
    phone varchar(20),
    email varchar(255),
    address text,
    
    district_id integer REFERENCES city_districts(id),
    venue_type_id integer REFERENCES venue_types(id),
    
    verified boolean DEFAULT false,
    employees_count varchar(50),
    working_hours varchar(100),
    
    created_at timestamp with time zone DEFAULT NOW(),
    updated_at timestamp with time zone DEFAULT NOW()
);

-- –°–æ–∑–¥–∞–µ–º —Å—Ä–æ—á–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
CREATE TABLE urgent_jobs (
    id serial PRIMARY KEY,
    title varchar(200) NOT NULL,
    company_id integer REFERENCES companies(id) ON DELETE CASCADE,
    venue_name varchar(200) NOT NULL,
    
    specialization_id integer REFERENCES specializations(id),
    district_id integer REFERENCES city_districts(id),
    venue_type_id integer REFERENCES venue_types(id),
    
    description text,
    requirements text,
    
    needed_date date NOT NULL,
    needed_time time,
    duration_hours integer DEFAULT 8,
    
    pay_per_shift integer NOT NULL,
    
    address text,
    contact_phone varchar(20),
    contact_person varchar(100),
    
    status varchar(20) DEFAULT 'active' CHECK (status IN ('active', 'filled', 'cancelled')),
    
    created_at timestamp with time zone DEFAULT NOW(),
    updated_at timestamp with time zone DEFAULT NOW()
);
  `
  
  try {
    // –í—ã–ø–æ–ª–Ω—è–µ–º –±–∞–∑–æ–≤—ã–π SQL
    const { error } = await supabase.rpc('exec_sql', { sql: basicSQL })
    
    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü:', error)
    } else {
      console.log('‚úÖ –ë–∞–∑–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã!')
    }
    
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞:', error)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ
resetDatabaseDirect()
