-- 20250810150000_implement_rpc_functions.sql
-- –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π recalc_skills –∏ get_user_profile_full (—É—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Ö–¥–æ–ª–≥–∞ R1)

-- –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ—Å—á—ë—Ç–∞ –Ω–∞–≤—ã–∫–æ–≤
CREATE OR REPLACE FUNCTION public.recalc_skills(p_user_id uuid)
RETURNS SETOF public.skills AS $$
DECLARE
    skill_record RECORD;
    badge_delta INTEGER;
BEGIN
    -- –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º calculated_level –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–≤—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    FOR skill_record IN 
        SELECT id, name, base_level FROM public.skills WHERE user_id = p_user_id
    LOOP
        -- –°—É–º–º–∏—Ä—É–µ–º –¥–µ–ª—å—Ç—ã –æ—Ç –≤—Å–µ—Ö –±–µ–π–¥–∂–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–≤—ã–∫–∞
        SELECT COALESCE(SUM(bsl.delta), 0) INTO badge_delta
        FROM public.badges b
        JOIN public.badge_skill_links bsl ON b.id = bsl.badge_id
        WHERE b.user_id = p_user_id 
        AND bsl.skill_name = skill_record.name;
        
        -- –û–±–Ω–æ–≤–ª—è–µ–º calculated_level (base_level + –¥–µ–ª—å—Ç—ã –æ—Ç –±–µ–π–¥–∂–µ–π)
        -- –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω 0-100
        UPDATE public.skills 
        SET calculated_level = GREATEST(0, LEAST(100, skill_record.base_level + badge_delta)),
            updated_at = now()
        WHERE id = skill_record.id;
    END LOOP;
    
    -- –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
    RETURN QUERY 
    SELECT * FROM public.skills 
    WHERE user_id = p_user_id 
    ORDER BY updated_at DESC;
END; 
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
CREATE OR REPLACE FUNCTION public.get_user_profile_full(p_user_id uuid)
RETURNS jsonb AS $$
DECLARE
    profile_data jsonb;
    skills_data jsonb;
    badges_data jsonb;
    work_logs_data jsonb;
    stats_data jsonb;
BEGIN
    -- –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª—å
    SELECT to_jsonb(up) INTO profile_data 
    FROM public.user_profiles up 
    WHERE up.id = p_user_id;
    
    -- –ü–æ–ª—É—á–∞–µ–º –Ω–∞–≤—ã–∫–∏
    SELECT jsonb_agg(to_jsonb(s)) INTO skills_data
    FROM public.skills s 
    WHERE s.user_id = p_user_id
    ORDER BY s.updated_at DESC;
    
    -- –ü–æ–ª—É—á–∞–µ–º –±–µ–π–¥–∂–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ
    SELECT jsonb_agg(
        jsonb_build_object(
            'id', b.id,
            'name', b.name,
            'icon_url', b.icon_url,
            'description', b.description,
            'source', b.source,
            'awarded_at', b.awarded_at,
            'employer_name', COALESCE(e.name, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        )
    ) INTO badges_data
    FROM public.badges b 
    LEFT JOIN public.employers e ON b.employer_id = e.id
    WHERE b.user_id = p_user_id
    ORDER BY b.awarded_at DESC;
    
    -- –ü–æ–ª—É—á–∞–µ–º –∂—É—Ä–Ω–∞–ª —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ
    SELECT jsonb_agg(
        jsonb_build_object(
            'id', wl.id,
            'period_from', wl.period_from,
            'period_to', wl.period_to,
            'shifts_count', wl.shifts_count,
            'total_hours', wl.total_hours,
            'employer_name', COALESCE(e.name, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'),
            'employer_logo', e.logo_url
        )
    ) INTO work_logs_data
    FROM public.work_logs wl
    LEFT JOIN public.employers e ON wl.employer_id = e.id
    WHERE wl.user_id = p_user_id
    ORDER BY wl.period_from DESC;
    
    -- –í—ã—á–∏—Å–ª—è–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    SELECT jsonb_build_object(
        'total_shifts', COALESCE(SUM(wl.shifts_count), 0),
        'total_hours', COALESCE(SUM(wl.total_hours), 0),
        'badges_count', (
            SELECT COUNT(*) FROM public.badges WHERE user_id = p_user_id
        ),
        'average_skill_level', (
            SELECT COALESCE(ROUND(AVG(calculated_level)), 0) 
            FROM public.skills WHERE user_id = p_user_id
        )
    ) INTO stats_data
    FROM public.work_logs wl
    WHERE wl.user_id = p_user_id;
    
    -- –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JSON
    RETURN jsonb_build_object(
        'profile', COALESCE(profile_data, '{}'::jsonb),
        'skills', COALESCE(skills_data, '[]'::jsonb),
        'badges', COALESCE(badges_data, '[]'::jsonb),
        'work_logs', COALESCE(work_logs_data, '[]'::jsonb),
        'stats', COALESCE(stats_data, '{}'::jsonb),
        'generated_at', to_jsonb(now())
    );
END; 
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- –°–æ–∑–¥–∞—ë–º —Ñ—É–Ω–∫—Ü–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—ã–¥–∞—á–∏ –±–µ–π–¥–∂–µ–π (–±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è)
CREATE OR REPLACE FUNCTION public.auto_award_badges(p_user_id uuid)
RETURNS jsonb AS $$
DECLARE
    total_shifts INTEGER;
    new_badges jsonb := '[]'::jsonb;
    badge_exists BOOLEAN;
BEGIN
    -- –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–º–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    SELECT COALESCE(SUM(shifts_count), 0) INTO total_shifts
    FROM public.work_logs 
    WHERE user_id = p_user_id;
    
    -- –ë–µ–π–¥–∂ "–ù–∞–¥—ë–∂–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫" –∑–∞ 50+ —Å–º–µ–Ω
    IF total_shifts >= 50 THEN
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –±–µ–π–¥–∂–∞
        SELECT EXISTS(
            SELECT 1 FROM public.badges 
            WHERE user_id = p_user_id AND name = '–ù–∞–¥—ë–∂–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫'
        ) INTO badge_exists;
        
        IF NOT badge_exists THEN
            INSERT INTO public.badges (user_id, name, icon_url, description, source)
            VALUES (
                p_user_id, 
                '–ù–∞–¥—ë–∂–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫', 
                '‚≠ê', 
                '–û—Ç—Ä–∞–±–æ—Ç–∞–ª –±–æ–ª–µ–µ 50 —Å–º–µ–Ω', 
                'auto'
            );
            
            new_badges := new_badges || jsonb_build_object(
                'name', '–ù–∞–¥—ë–∂–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫',
                'reason', '–ó–∞ ' || total_shifts || ' –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω'
            );
        END IF;
    END IF;
    
    -- –ë–µ–π–¥–∂ "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª" –∑–∞ 100+ —Å–º–µ–Ω
    IF total_shifts >= 100 THEN
        SELECT EXISTS(
            SELECT 1 FROM public.badges 
            WHERE user_id = p_user_id AND name = '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª'
        ) INTO badge_exists;
        
        IF NOT badge_exists THEN
            INSERT INTO public.badges (user_id, name, icon_url, description, source)
            VALUES (
                p_user_id, 
                '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª', 
                'üíé', 
                '–û—Ç—Ä–∞–±–æ—Ç–∞–ª –±–æ–ª–µ–µ 100 —Å–º–µ–Ω', 
                'auto'
            );
            
            new_badges := new_badges || jsonb_build_object(
                'name', '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª',
                'reason', '–ó–∞ ' || total_shifts || ' –æ—Ç—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Å–º–µ–Ω'
            );
        END IF;
    END IF;
    
    RETURN jsonb_build_object(
        'total_shifts', total_shifts,
        'new_badges', new_badges,
        'checked_at', to_jsonb(now())
    );
END; 
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- –°–æ–∑–¥–∞—ë–º —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—ã–¥–∞—á–∏ –±–µ–π–¥–∂–µ–π –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ work_logs
CREATE OR REPLACE FUNCTION trigger_auto_award_badges()
RETURNS TRIGGER AS $$
BEGIN
    -- –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–π–¥–∂–µ–π –≤ —Ñ–æ–Ω–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é)
    PERFORM public.auto_award_badges(NEW.user_id);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
DO $$ BEGIN
    IF NOT EXISTS (
        SELECT 1 FROM pg_trigger WHERE tgname = 'work_logs_auto_badges'
    ) THEN
        CREATE TRIGGER work_logs_auto_badges
        AFTER INSERT ON public.work_logs
        FOR EACH ROW
        EXECUTE FUNCTION trigger_auto_award_badges();
    END IF;
END $$;

-- –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
COMMENT ON FUNCTION public.recalc_skills(uuid) IS '–ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É—Ä–æ–≤–Ω–∏ –Ω–∞–≤—ã–∫–æ–≤ —Å —É—á—ë—Ç–æ–º –¥–µ–ª—å—Ç –æ—Ç –±–µ–π–¥–∂–µ–π';
COMMENT ON FUNCTION public.get_user_profile_full(uuid) IS '–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞–≤—ã–∫–∞–º–∏, –±–µ–π–¥–∂–∞–º–∏ –∏ –æ–ø—ã—Ç–æ–º';
COMMENT ON FUNCTION public.auto_award_badges(uuid) IS '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞—ë—Ç –±–µ–π–¥–∂–∏ –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';

-- DOWN (–¥–ª—è –æ—Ç–∫–∞—Ç–∞):
-- DROP TRIGGER IF EXISTS work_logs_auto_badges ON public.work_logs;
-- DROP FUNCTION IF EXISTS trigger_auto_award_badges();
-- DROP FUNCTION IF EXISTS public.auto_award_badges(uuid);
-- –§—É–Ω–∫—Ü–∏–∏ recalc_skills –∏ get_user_profile_full –æ—Å—Ç–∞–≤–ª—è–µ–º (–≤–æ–∑–≤—Ä–∞—Ç –∫ –∑–∞–≥–ª—É—à–∫–∞–º —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é)
