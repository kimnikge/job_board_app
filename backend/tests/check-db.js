import { createClient } from '@supabase/supabase-js'
import { config } from 'dotenv'
import path from 'path'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
config({ path: path.join(process.cwd(), '../supabase/.env') })

function createTestSupabaseClient() {
  const supabaseUrl = process.env.SUPABASE_URL
  const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY

  if (!supabaseUrl || !supabaseServiceKey) {
    throw new Error('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_ROLE_KEY')
  }

  return createClient(supabaseUrl, supabaseServiceKey)
}

async function checkDatabase() {
  const supabase = createTestSupabaseClient()
  
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...')
  
  const tableNames = ['profiles', 'user_profiles', 'jobs', 'companies']
  
  for (const tableName of tableNames) {
    try {
      const { data, error } = await supabase
        .from(tableName)
        .select('*')
        .limit(1)
      
      if (error) {
        console.log(`‚ùå ${tableName}: ${error.message}`)
      } else {
        console.log(`‚úÖ ${tableName}: –Ω–∞–π–¥–µ–Ω–∞ (${data?.length || 0} –∑–∞–ø–∏—Å–µ–π)`)
        if (data && data.length > 0) {
          console.log(`   –ü–æ–ª—è: ${Object.keys(data[0]).join(', ')}`)
        }
      }
    } catch (err) {
      console.log(`‚ùå ${tableName}: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è`)
    }
  }
}

checkDatabase().catch(console.error)
