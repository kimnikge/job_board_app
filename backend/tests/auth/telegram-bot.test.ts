import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest'
import { 
  generateTelegramUserData, 
  createTestSupabaseClient, 
  cleanupTestData,
  type TelegramUserData 
} from '../utils/test-helpers'
import '../utils/deno-mocks'

// –ú–æ–∫–∏ –¥–ª—è Telegram Bot API
const mockTelegramAPI = {
  sendMessage: vi.fn(),
  answerCallbackQuery: vi.fn(),
  editMessageText: vi.fn()
}

// –ú–æ–∫ –¥–ª—è Grammy bot
const mockBot = {
  command: vi.fn(),
  on: vi.fn(),
  api: mockTelegramAPI
}

vi.mock('https://deno.land/x/grammy@v1.19.2/mod.ts', () => ({
  Bot: vi.fn(() => mockBot),
  webhookCallback: vi.fn()
}))

describe('Telegram Bot Integration', () => {
  let testUsers: TelegramUserData[] = []
  let supabase: ReturnType<typeof createTestSupabaseClient>

  beforeEach(() => {
    testUsers = []
    supabase = createTestSupabaseClient()
    vi.clearAllMocks()
  })

  afterEach(async () => {
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
    const telegramIds = testUsers.map(user => user.id.toString())
    await cleanupTestData(telegramIds)
  })

  describe('–ö–æ–º–∞–Ω–¥–∞ /start', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', async () => {
      const mockContext = createMockContext({
        message: { text: '/start' },
        from: { id: 123456789 }
      })

      await simulateStartCommand(mockContext)
      
      expect(mockContext.reply).toHaveBeenCalledWith(
        expect.stringContaining('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HR-–ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –æ–±—â–µ–ø–∏—Ç–∞!'),
        expect.objectContaining({
          reply_markup: expect.objectContaining({
            inline_keyboard: expect.any(Array)
          })
        })
      )
    })

    it('–¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è', async () => {
      const mockContext = createMockContext({
        message: { text: '/start' },
        from: { id: 123456789 }
      })

      await simulateStartCommand(mockContext)
      
      const lastCall = mockContext.reply.mock.calls[0]
      const replyMarkup = lastCall[1].reply_markup
      
      expect(replyMarkup.inline_keyboard[0][0]).toEqual({
        text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
        web_app: { url: expect.stringContaining('http') }
      })
    })
  })

  describe('–ö–æ–º–∞–Ω–¥–∞ /urgent', () => {
    it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ä–æ—á–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏', async () => {
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Å—Ä–æ—á–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é
      await createTestUrgentJob()

      const mockContext = createMockContext({
        message: { text: '/urgent' },
        from: { id: 123456789 }
      })

      await simulateUrgentCommand(mockContext)
      
      expect(mockContext.reply).toHaveBeenCalledWith(
        expect.stringContaining('–°—Ä–æ—á–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:'),
        expect.objectContaining({
          parse_mode: 'HTML',
          reply_markup: expect.objectContaining({
            inline_keyboard: expect.any(Array)
          })
        })
      )
    })

    it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Å—Ä–æ—á–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π', async () => {
      const mockContext = createMockContext({
        message: { text: '/urgent' },
        from: { id: 123456789 }
      })

      await simulateUrgentCommand(mockContext)
      
      expect(mockContext.reply).toHaveBeenCalledWith(
        'üîç –°–µ–π—á–∞—Å –Ω–µ—Ç —Å—Ä–æ—á–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π'
      )
    })
  })

  describe('–ö–æ–º–∞–Ω–¥–∞ /jobs', () => {
    it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ–±—ã—á–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏', async () => {
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –æ–±—ã—á–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é
      await createTestRegularJob()

      const mockContext = createMockContext({
        message: { text: '/jobs' },
        from: { id: 123456789 }
      })

      await simulateJobsCommand(mockContext)
      
      expect(mockContext.reply).toHaveBeenCalledWith(
        expect.stringContaining('–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:'),
        expect.objectContaining({
          parse_mode: 'HTML',
          reply_markup: expect.objectContaining({
            inline_keyboard: expect.any(Array)
          })
        })
      )
    })

    it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π', async () => {
      const mockContext = createMockContext({
        message: { text: '/jobs' },
        from: { id: 123456789 }
      })

      await simulateJobsCommand(mockContext)
      
      expect(mockContext.reply).toHaveBeenCalledWith(
        'üîç –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π'
      )
    })
  })

  describe('–ö–æ–º–∞–Ω–¥–∞ /ready', () => {
    it('–¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å —Ä–µ–∂–∏–º "–≥–æ—Ç–æ–≤ –≤—ã–π—Ç–∏ –∑–∞–≤—Ç—Ä–∞" –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
      const userData = await generateTelegramUserData()
      testUsers.push(userData)
      
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
      await createTestUser(userData)

      const mockContext = createMockContext({
        message: { text: '/ready' },
        from: { id: userData.id }
      })

      await simulateReadyCommand(mockContext)
      
      expect(mockContext.reply).toHaveBeenCalledWith(
        expect.stringContaining('‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
      )

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–ª–∞–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const { data: profile } = await supabase
        .from('profiles')
        .select('ready_for_urgent, urgent_available_until')
        .eq('telegram_id', userData.id.toString())
        .single()

      expect(profile?.ready_for_urgent).toBe(true)
      expect(profile?.urgent_available_until).toBeDefined()
    })

    it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
      const mockContext = createMockContext({
        message: { text: '/ready' },
        from: { id: 999999999 }
      })

      await simulateReadyCommand(mockContext)
      
      expect(mockContext.reply).toHaveBeenCalledWith(
        '‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏'
      )
    })
  })

  describe('–ö–æ–º–∞–Ω–¥–∞ /profile', () => {
    it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
      const userData = await generateTelegramUserData({
        first_name: '–ò–≤–∞–Ω',
        last_name: '–ü–µ—Ç—Ä–æ–≤',
        username: 'ivan_petrov'
      })
      testUsers.push(userData)
      
      await createTestUser(userData)

      const mockContext = createMockContext({
        message: { text: '/profile' },
        from: { id: userData.id }
      })

      await simulateProfileCommand(mockContext)
      
      expect(mockContext.reply).toHaveBeenCalledWith(
        expect.stringContaining('üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:'),
        expect.objectContaining({
          reply_markup: expect.objectContaining({
            inline_keyboard: expect.any(Array)
          })
        })
      )
    })

    it('–¥–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', async () => {
      const mockContext = createMockContext({
        message: { text: '/profile' },
        from: { id: 999999999 }
      })

      await simulateProfileCommand(mockContext)
      
      expect(mockContext.reply).toHaveBeenCalledWith(
        '‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:',
        expect.objectContaining({
          reply_markup: expect.objectContaining({
            inline_keyboard: expect.arrayContaining([
              expect.arrayContaining([
                expect.objectContaining({
                  text: 'üëâ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'
                })
              ])
            ])
          })
        })
      )
    })
  })

  describe('–ö–æ–º–∞–Ω–¥–∞ /help', () => {
    it('–¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º', async () => {
      const mockContext = createMockContext({
        message: { text: '/help' },
        from: { id: 123456789 }
      })

      await simulateHelpCommand(mockContext)
      
      expect(mockContext.reply).toHaveBeenCalledWith(
        expect.stringContaining('ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:')
      )
    })
  })

  describe('Webhook –æ–±—Ä–∞–±–æ—Ç–∫–∞', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', async () => {
      const update = {
        message: {
          message_id: 1,
          from: { id: 123456789, first_name: 'Test' },
          chat: { id: 123456789, type: 'private' },
          date: Math.floor(Date.now() / 1000),
          text: '/start'
        }
      }

      const response = await simulateWebhookUpdate(update)
      
      expect(response.status).toBe(200)
    })

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–º–∞–Ω–¥—ã', async () => {
      const update = {
        message: {
          message_id: 1,
          from: { id: 123456789, first_name: 'Test' },
          chat: { id: 123456789, type: 'private' },
          date: Math.floor(Date.now() / 1000),
          text: '/unknown_command'
        }
      }

      const response = await simulateWebhookUpdate(update)
      
      expect(response.status).toBe(200)
    })
  })
})

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤

function createMockContext(data: any) {
  return {
    message: data.message,
    from: data.from,
    reply: vi.fn(),
    chat: data.chat || { id: data.from?.id }
  }
}

async function simulateStartCommand(ctx: any) {
  const miniAppUrl = process.env.MINI_APP_URL || 'http://localhost:3000'
  await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HR-–ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –æ–±—â–µ–ø–∏—Ç–∞! üçΩÔ∏è\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:', {
    reply_markup: {
      inline_keyboard: [[{ text: 'üöÄ –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', web_app: { url: miniAppUrl } }]]
    }
  })
}

async function simulateUrgentCommand(ctx: any) {
  const supabase = createTestSupabaseClient()

  const { data: urgentJobs } = await supabase
    .from('jobs')
    .select('*')
    .eq('is_urgent', true)
    .order('created_at', { ascending: false })
    .limit(5)

  if (!urgentJobs?.length) {
    await ctx.reply('üîç –°–µ–π—á–∞—Å –Ω–µ—Ç —Å—Ä–æ—á–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π')
    return
  }

  const message = urgentJobs.map(job => `
üö® ${job.title}
üí∞ ${job.payment_per_shift}‚ÇΩ –∑–∞ —Å–º–µ–Ω—É
üìç ${job.district}
‚è∞ –ù—É–∂–µ–Ω: ${new Date(job.work_date).toLocaleDateString()}
  `).join('\n')

  await ctx.reply(`–°—Ä–æ—á–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:\n${message}`, {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: [[{ text: 'üëâ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ', web_app: { url: `${process.env.MINI_APP_URL}/urgent` } }]]
    }
  })
}

async function simulateJobsCommand(ctx: any) {
  const supabase = createTestSupabaseClient()

  const { data: jobs } = await supabase
    .from('jobs')
    .select('*')
    .eq('is_urgent', false)
    .order('created_at', { ascending: false })
    .limit(5)

  if (!jobs?.length) {
    await ctx.reply('üîç –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π')
    return
  }

  const message = jobs.map(job => `
üíº ${job.title}
üí∞ ${job.salary_min}-${job.salary_max}‚ÇΩ/–º–µ—Å
üìç ${job.district}
`).join('\n')

  await ctx.reply(`–ü–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏:\n${message}`, {
    parse_mode: 'HTML',
    reply_markup: {
      inline_keyboard: [[{ text: 'üëâ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ', web_app: { url: `${process.env.MINI_APP_URL}/jobs` } }]]
    }
  })
}

async function simulateReadyCommand(ctx: any) {
  const supabase = createTestSupabaseClient()

  const telegramId = ctx.from?.id.toString()
  if (!telegramId) return

  const { data: profile } = await supabase
    .from('profiles')
    .update({ 
      ready_for_urgent: true,
      urgent_available_until: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString()
    })
    .eq('telegram_id', telegramId)
    .select()
    .single()

  if (profile) {
    await ctx.reply('‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ä–æ—á–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏—è—Ö –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.\n\n–ß—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /ready –µ—â—ë —Ä–∞–∑.')
  } else {
    await ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏')
  }
}

async function simulateProfileCommand(ctx: any) {
  const supabase = createTestSupabaseClient()

  const telegramId = ctx.from?.id.toString()
  if (!telegramId) return

  const { data: profile } = await supabase
    .from('profiles')
    .select('*')
    .eq('telegram_id', telegramId)
    .single()

  if (profile) {
    const readyStatus = profile.ready_for_urgent ? '‚úÖ –ì–æ—Ç–æ–≤ –∫ —Å—Ä–æ—á–Ω—ã–º –∑–∞–º–µ–Ω–∞–º' : '‚ùå –ù–µ –≥–æ—Ç–æ–≤ –∫ —Å—Ä–æ—á–Ω—ã–º –∑–∞–º–µ–Ω–∞–º'
    const message = `
üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:
${profile.first_name} ${profile.last_name}
üì± ${profile.phone}
üë®‚Äçüç≥ ${profile.specialization}
üìç ${profile.preferred_districts}

${readyStatus}
    `
    await ctx.reply(message, {
      reply_markup: {
        inline_keyboard: [[{ text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', web_app: { url: `${process.env.MINI_APP_URL}/profile` } }]]
      }
    })
  } else {
    await ctx.reply('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:',
      {
        reply_markup: {
          inline_keyboard: [[{ text: 'üëâ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', web_app: { url: `${process.env.MINI_APP_URL}/profile` } }]]
        }
      }
    )
  }
}

async function simulateHelpCommand(ctx: any) {
  const helpText = `
ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
/urgent - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ä–æ—á–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
/jobs - –ø–æ–∫–∞–∑–∞—Ç—å –æ–±—ã—á–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
/ready - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º "–≥–æ—Ç–æ–≤ –≤—ã–π—Ç–∏ –∑–∞–≤—Ç—Ä–∞"
/profile - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

‚ùì –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @support
  `
  await ctx.reply(helpText)
}

async function simulateWebhookUpdate(update: any): Promise<Response> {
  // –≠–º—É–ª—è—Ü–∏—è webhook –æ–±—Ä–∞–±–æ—Ç–∫–∏
  return new Response('OK', { status: 200 })
}

async function createTestUser(userData: TelegramUserData) {
  const supabase = createTestSupabaseClient()
  
  // –°–æ–∑–¥–∞–µ–º auth –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const { data: authUser } = await supabase.auth.admin.createUser({
    email: `telegram_${userData.id}@telegram.local`,
    password: `temp_${userData.hash}_${Date.now()}`,
    email_confirm: true,
    user_metadata: {
      telegram_id: userData.id,
      first_name: userData.first_name,
      last_name: userData.last_name,
      username: userData.username,
    },
  })

  if (authUser?.user) {
    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    await supabase
      .from('profiles')
      .insert({
        user_id: authUser.user.id,
        telegram_id: userData.id.toString(),
        first_name: userData.first_name,
        last_name: userData.last_name,
        username: userData.username,
        photo_url: userData.photo_url,
        user_type: 'candidate',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      })
  }
}

async function createTestUrgentJob() {
  const supabase = createTestSupabaseClient()
  
  await supabase
    .from('jobs')
    .insert({
      title: '–°—Ä–æ—á–Ω–æ –Ω—É–∂–µ–Ω –ø–æ–≤–∞—Ä',
      payment_per_shift: 15000,
      district: '–ê–ª–º–∞–ª–∏–Ω—Å–∫–∏–π',
      work_date: new Date().toISOString(),
      is_urgent: true,
      status: 'active'
    })
}

async function createTestRegularJob() {
  const supabase = createTestSupabaseClient()
  
  await supabase
    .from('jobs')
    .insert({
      title: '–ü–æ–≤–∞—Ä –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω',
      salary_min: 200000,
      salary_max: 350000,
      district: '–ú–µ–¥–µ—É—Å–∫–∏–π',
      is_urgent: false,
      status: 'active'
    })
}
