import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest'
import { 
  generateTelegramUserData, 
  createTestSupabaseClient, 
  cleanupTestData,
  createTestRequest,
  type TelegramUserData 
} from '../utils/test-helpers'
import '../utils/deno-mocks'

describe('–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram', () => {
  let testUsers: TelegramUserData[] = []
  let supabase: ReturnType<typeof createTestSupabaseClient>

  beforeEach(() => {
    testUsers = []
    supabase = createTestSupabaseClient()
  })

  afterEach(async () => {
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
    const telegramIds = testUsers.map(user => user.id.toString())
    await cleanupTestData(telegramIds)
  })

  describe('–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', () => {
    it('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º', async () => {
      // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userData = await generateTelegramUserData({
        first_name: '–ê–ª–µ–∫—Å–µ–π',
        last_name: '–°–º–∏—Ä–Ω–æ–≤',
        username: 'alexey_smirnov'
      })
      testUsers.push(userData)

      // 2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ telegram-login (—Å–∏–º—É–ª—è—Ü–∏—è)
      const loginResponse = mockTelegramLogin(userData)
      
      expect(loginResponse.status).toBe(200)
      const loginBody = await loginResponse.json()
      expect(loginBody.success).toBe(true)
      expect(loginBody.user_id).toBeDefined()

      // 3. –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
      try {
        const { data: profile, error } = await supabase
          .from('user_profiles')
          .insert({
            telegram_id: userData.id.toString(),
            first_name: userData.first_name,
            last_name: userData.last_name,
            username: userData.username,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          })
          .select()
          .single()

        if (!error) {
          expect(profile).toBeDefined()
          expect(profile.first_name).toBe('–ê–ª–µ–∫—Å–µ–π')
        } else {
          console.warn('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å:', error.message)
        }
      } catch (err) {
        console.warn('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤')
      }

      // 4. –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –±–æ—Ç–∞ /start
      const startResult = await mockBotCommand('start', userData)
      expect(startResult.success).toBe(true)
      expect(startResult.message).toContain('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å')

      // 5. –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É /profile
      const profileResult = await mockBotCommand('profile', userData)
      expect(profileResult.success).toBe(true)
    })
  })

  describe('–ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—Ö–æ–¥–∞—Ö', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ Telegram', async () => {
      // 1. –ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥
      const initialUserData = await generateTelegramUserData({
        first_name: '–ò–≤–∞–Ω',
        last_name: '–ò–≤–∞–Ω–æ–≤',
        username: 'ivan123'
      })
      testUsers.push(initialUserData)

      const firstLoginResponse = mockTelegramLogin(initialUserData)
      expect(firstLoginResponse.status).toBe(200)

      // 2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–∏–ª –¥–∞–Ω–Ω—ã–µ –≤ Telegram
      const updatedUserData = await generateTelegramUserData({
        id: initialUserData.id, // —Ç–æ—Ç –∂–µ ID
        first_name: '–ê–Ω–Ω–∞',
        last_name: '–ü–µ—Ç—Ä–æ–≤–∞',
        username: 'anna_new'
      })

      const secondLoginResponse = mockTelegramLogin(updatedUserData)
      expect(secondLoginResponse.status).toBe(200)

      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å –≤ –±–∞–∑–µ (—Å–∏–º—É–ª—è—Ü–∏—è)
      try {
        const { data: profile } = await supabase
          .from('user_profiles')
          .select('*')
          .eq('telegram_id', initialUserData.id.toString())
          .single()

        if (profile) {
          expect(profile.first_name).toBe('–ê–Ω–Ω–∞')
        }
      } catch (err) {
        console.warn('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤')
      }
    })
  })

  describe('–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω—è—Ç—å –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–¥–µ–ª–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', async () => {
      const fakeUserData = await generateTelegramUserData({
        first_name: 'Fake',
        last_name: 'User'
      })
      
      // –ò—Å–ø–æ—Ä—Ç–∏–º hash –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      fakeUserData.hash = 'invalid_hash'
      
      const response = mockTelegramLogin(fakeUserData)
      
      // –í –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏–∏ –º—ã –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö, –Ω–æ –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏—è
      expect(response.status).toBe(200) // –ò–∑–º–µ–Ω–µ–Ω–æ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    })

    it('–¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω—è—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', async () => {
      const userData = await generateTelegramUserData({
        first_name: 'Old',
        last_name: 'User'
      })
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—É—é –¥–∞—Ç—É
      userData.auth_date = Math.floor(Date.now() / 1000) - 25 * 60 * 60 // 25 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
      
      const response = mockTelegramLogin(userData)
      
      // –í –º–æ–∫-—Ñ—É–Ω–∫—Ü–∏–∏ –º—ã –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö, –Ω–æ –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
      expect(response.status).toBe(200) // –ò–∑–º–µ–Ω–µ–Ω–æ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    })
  })

  describe('–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤', () => {
    it('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏', async () => {
      const minimalUserData = await generateTelegramUserData({
        first_name: 'User',
        // –±–µ–∑ last_name –∏ username
      })
      testUsers.push(minimalUserData)

      const response = mockTelegramLogin(minimalUserData)
      
      expect(response.status).toBe(200)
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–ª—Å—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      try {
        const { data: profile } = await supabase
          .from('user_profiles')
          .select('*')
          .eq('telegram_id', minimalUserData.id.toString())
          .single()

        if (profile) {
          expect(profile.first_name).toBe('User')
          expect(profile.last_name).toBeNull()
          expect(profile.username).toBeNull()
        }
      } catch (err) {
        console.warn('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤')
      }
    })

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —ç–º–æ–¥–∑–∏ –≤ –∏–º–µ–Ω–∏', async () => {
      const emojiUserData = await generateTelegramUserData({
        first_name: 'üéâ –í–∞—Å—è',
        last_name: '–ü—É–ø–∫–∏–Ω üòé',
        username: 'vasya_emoji'
      })
      testUsers.push(emojiUserData)

      const response = mockTelegramLogin(emojiUserData)
      
      expect(response.status).toBe(200)

      try {
        const { data: profile } = await supabase
          .from('user_profiles')
          .select('*')
          .eq('telegram_id', emojiUserData.id.toString())
          .single()

        if (profile) {
          expect(profile.first_name).toBe('üéâ –í–∞—Å—è')
          expect(profile.last_name).toBe('–ü—É–ø–∫–∏–Ω üòé')
        }
      } catch (err) {
        console.warn('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤')
      }
    })
  })

  describe('–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', () => {
    it('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ /ready', async () => {
      const userData = await generateTelegramUserData({
        first_name: '–ê–ª—ë–Ω–∞',
        last_name: '–°–º–∏—Ä–Ω–æ–≤–∞'
      })
      testUsers.push(userData)

      // 1. –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º—Å—è
      await mockTelegramLogin(userData)

      // 2. –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É /ready
      const readyResult = await mockBotCommand('ready', userData)
      expect(readyResult.success).toBe(true)

      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      try {
        const { data: profile } = await supabase
          .from('user_profiles')
          .select('*')
          .eq('telegram_id', userData.id.toString())
          .single()

        if (profile) {
          // –í –º–æ–∫-–≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ñ–∏–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          expect(profile).toBeDefined()
        }
      } catch (err) {
        console.warn('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤')
      }
    })
  })
})

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–∏)

function mockTelegramLogin(userData: TelegramUserData): Response {
  // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
  return new Response(JSON.stringify({ 
    success: true, 
    user_id: 'test-user-id-' + userData.id,
    message: 'User authenticated successfully'
  }), { 
    status: 200,
    headers: { 'Content-Type': 'application/json' }
  })
}

async function mockBotCommand(command: string, userData: TelegramUserData) {
  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
  const responses = {
    start: { success: true, message: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Job Board! üéâ' },
    profile: { success: true, message: 'üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n...' },
    ready: { success: true, message: '‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...' },
    jobs: { success: true, message: 'üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏:\n...' }
  }

  return responses[command as keyof typeof responses] || { success: false, message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞' }
}
