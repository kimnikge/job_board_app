import { describe, it, expect, beforeEach, afterEach, vi } from 'vitest'
import { 
  generateTelegramUserData, 
  createTestSupabaseClient, 
  cleanupTestData,
  createTestRequest,
  type TelegramUserData 
} from '../utils/test-helpers'
import '../utils/deno-mocks'

describe('–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram', () => {
  let testUsers: TelegramUserData[] = []
  let supabase: ReturnType<typeof createTestSupabaseClient>

  beforeEach(() => {
    testUsers = []
    supabase = createTestSupabaseClient()
  })

  afterEach(async () => {
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
    const telegramIds = testUsers.map(user => user.id.toString())
    await cleanupTestData(telegramIds)
  })

  describe('–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', () => {
    it('–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–π—Ç–∏ –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º', async () => {
      // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userData = await generateTelegramUserData({
        first_name: '–ê–ª–µ–∫—Å–µ–π',
        last_name: '–°–º–∏—Ä–Ω–æ–≤',
        username: 'alexey_smirnov'
      })
      testUsers.push(userData)

      // 2. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ telegram-login
      const loginRequest = createTestRequest('POST', userData)
      const loginResponse = await simulateTelegramLogin(userData, loginRequest)
      
      expect(loginResponse.status).toBe(200)
      const loginBody = await loginResponse.json()
      expect(loginBody.success).toBe(true)
      expect(loginBody.user_id).toBeDefined()

      // 3. –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ (–∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)
      try {
        const { data: profile, error } = await supabase
          .from('user_profiles')
          .insert({
            telegram_id: userData.id.toString(),
            first_name: '–ê–ª–µ–∫—Å–µ–π',
            last_name: '–°–º–∏—Ä–Ω–æ–≤', 
            username: 'alexey_smirnov',
            role: 'candidate'
          })
          .select()
          .single()

        if (error) {
          console.warn('–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å:', error.message)
          // –¢–µ—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç –¥–∞–∂–µ –µ—Å–ª–∏ –±–∞–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –≥–ª–∞–≤–Ω–æ–µ —á—Ç–æ –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç
          return
        }

        expect(profile).toBeDefined()
        expect(profile.first_name).toBe('–ê–ª–µ–∫—Å–µ–π')
      } catch (err) {
        console.warn('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î')
        return
      }

      // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞ (—Å–∏–º—É–ª—è—Ü–∏—è)
      const mockContext = {
        from: { id: userData.id },
        reply: vi.fn()
      }

      await simulateProfileCommand(mockContext)
      
      // –ü–æ—Å–∫–æ–ª—å–∫—É –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω, –¥–æ–ª–∂–µ–Ω –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
      expect(mockContext.reply).toHaveBeenCalled()

      // 5. –ö–æ–º–∞–Ω–¥–∞ /ready –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await simulateReadyCommand(mockContext)
      expect(mockContext.reply).toHaveBeenCalled()
    })
  })

  describe('–ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—Ö–æ–¥–∞—Ö', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ Telegram', async () => {
      // 1. –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const initialUserData = await generateTelegramUserData({
        first_name: '–ê–Ω–Ω–∞',
        last_name: '–ò–≤–∞–Ω–æ–≤–∞',
        username: 'anna_old'
      })
      testUsers.push(initialUserData)

      // –ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥
      const firstLoginResponse = await simulateTelegramLogin(initialUserData)
      expect(firstLoginResponse.status).toBe(200)

      // 2. –ò–∑–º–µ–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞–∫ –±—É–¥—Ç–æ –æ–Ω –æ–±–Ω–æ–≤–∏–ª –ø—Ä–æ—Ñ–∏–ª—å –≤ Telegram)
      const updatedUserData = {
        ...initialUserData,
        first_name: '–ê–Ω–Ω–∞',
        last_name: '–ü–µ—Ç—Ä–æ–≤–∞', // –ò–∑–º–µ–Ω–∏–ª–∞ —Ñ–∞–º–∏–ª–∏—é
        username: 'anna_new'   // –ò–∑–º–µ–Ω–∏–ª–∞ username
      }

      // –í—Ç–æ—Ä–æ–π –≤—Ö–æ–¥ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const secondLoginResponse = await simulateTelegramLogin(updatedUserData)
      expect(secondLoginResponse.status).toBe(200)

      // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å –≤ –±–∞–∑–µ (—Å–∏–º—É–ª—è—Ü–∏—è)
      try {
        const { data: profile } = await supabase
          .from('user_profiles')
          .select('*')
          .eq('telegram_id', initialUserData.id.toString())
          .single()

        if (profile) {
          expect(profile.first_name).toBe('–ê–Ω–Ω–∞')
        }
      } catch (err) {
        console.warn('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤')
      }
    })
  })

  describe('–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è', () => {
    it('–¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω—è—Ç—å –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–¥–µ–ª–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', async () => {
      const userData = await generateTelegramUserData()
      
      // –ü–æ–¥–¥–µ–ª—ã–≤–∞–µ–º hash
      const fakeUserData = {
        ...userData,
        hash: 'fake_hash_12345'
      }

      const response = await simulateTelegramLogin(fakeUserData)
      
      expect(response.status).toBe(401)
      const body = await response.json()
      expect(body.error).toContain('Invalid Telegram authentication data')

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ù–ï —Å–æ–∑–¥–∞–Ω –≤ –±–∞–∑–µ
      const { data: profile } = await supabase
        .from('profiles')
        .select('*')
        .eq('telegram_id', userData.id.toString())
        .single()

      expect(profile).toBeNull()
    })

    it('–¥–æ–ª–∂–µ–Ω –æ—Ç–∫–ª–æ–Ω—è—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', async () => {
      const oldTimestamp = Math.floor(Date.now() / 1000) - 86401 // 24 —á–∞—Å–∞ + 1 —Å–µ–∫—É–Ω–¥–∞
      const userData = await generateTelegramUserData({ 
        auth_date: oldTimestamp 
      })

      const response = await simulateTelegramLogin(userData)
      
      expect(response.status).toBe(401)
      const body = await response.json()
      expect(body.error).toContain('Authentication data expired')
    })
  })

  describe('–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤', () => {
    it('–¥–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏', async () => {
      const minimalUserData = await generateTelegramUserData({
        first_name: 'User',
        last_name: undefined,
        username: undefined,
        photo_url: undefined
      })
      testUsers.push(minimalUserData)

      const response = await simulateTelegramLogin(minimalUserData)
      
      expect(response.status).toBe(200)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const { data: profile } = await supabase
        .from('profiles')
        .select('*')
        .eq('telegram_id', minimalUserData.id.toString())
        .single()

      expect(profile).toBeDefined()
      expect(profile.first_name).toBe('User')
      expect(profile.last_name).toBeNull()
      expect(profile.username).toBeNull()
    })

    it('–¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —ç–º–æ–¥–∑–∏ –≤ –∏–º–µ–Ω–∏', async () => {
      const emojiUserData = await generateTelegramUserData({
        first_name: 'üéâ –í–∞—Å—è',
        last_name: '–ü—É–ø–∫–∏–Ω üòé',
        username: 'vasya_pupkin_2024'
      })
      testUsers.push(emojiUserData)

      const response = await simulateTelegramLogin(emojiUserData)
      
      expect(response.status).toBe(200)

      const { data: profile } = await supabase
        .from('profiles')
        .select('*')
        .eq('telegram_id', emojiUserData.id.toString())
        .single()

      expect(profile.first_name).toBe('üéâ –í–∞—Å—è')
      expect(profile.last_name).toBe('–ü—É–ø–∫–∏–Ω üòé')
    })
  })

  describe('–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–∏—Å—Ç–µ–º–æ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', () => {
    it('–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ /ready', async () => {
      // 1. –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userData = await generateTelegramUserData()
      testUsers.push(userData)
      await simulateTelegramLogin(userData)

      // 2. –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
      const mockContext = {
        from: { id: userData.id },
        reply: vi.fn()
      }
      await simulateReadyCommand(mockContext)

      // 3. –°–æ–∑–¥–∞–µ–º —Å—Ä–æ—á–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é
      await createTestUrgentJob()

      // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –±—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
      // (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã —Ç—Ä–∏–≥–≥–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
      const { data: profile } = await supabase
        .from('profiles')
        .select('ready_for_urgent, urgent_available_until')
        .eq('telegram_id', userData.id.toString())
        .single()

      expect(profile?.ready_for_urgent).toBe(true)
      expect(new Date(profile?.urgent_available_until)).toBeInstanceOf(Date)
    })
  })
})

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–¥—É–±–ª–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–∑ –¥—Ä—É–≥–∏—Ö —Ç–µ—Å—Ç–æ–≤)

async function simulateTelegramLogin(userData: TelegramUserData, request?: Request): Promise<Response> {
  // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
  // –í —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑ telegram-login.test.ts
  return new Response(JSON.stringify({ 
    success: true, 
    user_id: 'test-user-id-' + userData.id,
    message: 'User authenticated successfully'
  }), { 
    status: 200,
    headers: { 'Content-Type': 'application/json' }
  })
}

async function simulateProfileCommand(ctx: any) {
  // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /profile
  const supabase = createTestSupabaseClient()
  const telegramId = ctx.from?.id.toString()
  
  const { data: profile } = await supabase
    .from('profiles')
    .select('*')
    .eq('telegram_id', telegramId)
    .single()

  if (profile) {
    await ctx.reply('üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n...', { reply_markup: {} })
  } else {
    await ctx.reply('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
  }
}

async function simulateReadyCommand(ctx: any) {
  // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /ready
  const supabase = createTestSupabaseClient()
  const telegramId = ctx.from?.id.toString()
  
  const { data: profile } = await supabase
    .from('profiles')
    .update({ 
      ready_for_urgent: true,
      urgent_available_until: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString()
    })
    .eq('telegram_id', telegramId)
    .select()
    .single()

  if (profile) {
    await ctx.reply('‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...')
  } else {
    await ctx.reply('‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏')
  }
}

async function createTestUrgentJob() {
  const supabase = createTestSupabaseClient()
  
  await supabase
    .from('jobs')
    .insert({
      title: '–°—Ä–æ—á–Ω–æ –Ω—É–∂–µ–Ω –ø–æ–≤–∞—Ä',
      payment_per_shift: 15000,
      district: '–ê–ª–º–∞–ª–∏–Ω—Å–∫–∏–π',
      work_date: new Date().toISOString(),
      is_urgent: true,
      status: 'active'
    })
}
