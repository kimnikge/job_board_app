#!/usr/bin/env node

/**
 * –°–ö–†–ò–ü–¢ –ù–ê–ü–û–õ–ù–ï–ù–ò–Ø –ë–î –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò
 * –°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±—â–µ–ø–∏—Ç–∞ –ê—Å—Ç–∞–Ω—ã
 * 
 * –í–∫–ª—é—á–∞–µ—Ç:
 * - 15 —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (5 —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π + 10 —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π)
 * - 5 –∑–∞–≤–µ–¥–µ–Ω–∏–π –æ–±—â–µ–ø–∏—Ç–∞
 * - 3 —Å—Ä–æ—á–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
 * - 3 –æ–±—ã—á–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏  
 * - 3 —Ä–µ–∑—é–º–µ —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π
 * - –û—Ç–∫–ª–∏–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */

const { createClient } = require('@supabase/supabase-js')
const fs = require('fs')
const path = require('path')

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const SUPABASE_URL = 'https://your-project.supabase.co' // –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® URL
const SUPABASE_SERVICE_KEY = 'your-service-role-key' // –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® SERVICE KEY

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Supabase —Å —Å–µ—Ä–≤–∏—Å–Ω–æ–π —Ä–æ–ª—å—é
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
})

async function loadSQLFile(filename) {
  const filePath = path.join(__dirname, filename)
  return fs.readFileSync(filePath, 'utf8')
}

async function executeSQL(sql) {
  try {
    console.log('–í—ã–ø–æ–ª–Ω—è—é SQL –∑–∞–ø—Ä–æ—Å...')
    
    // –†–∞–∑–±–∏–≤–∞–µ–º SQL –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const commands = sql
      .split(';')
      .map(cmd => cmd.trim())
      .filter(cmd => cmd.length > 0 && !cmd.startsWith('--'))
    
    console.log(`–ù–∞–π–¥–µ–Ω–æ ${commands.length} SQL –∫–æ–º–∞–Ω–¥`)
    
    for (let i = 0; i < commands.length; i++) {
      const command = commands[i]
      if (command.toLowerCase().includes('select')) {
        // –î–ª—è SELECT –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π rpc
        const { data, error } = await supabase.rpc('exec_sql', { sql_query: command })
        if (error) {
          console.error(`–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ${i + 1}:`, error)
        } else {
          console.log(`‚úì –ö–æ–º–∞–Ω–¥–∞ ${i + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
          if (data) console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç:', data)
        }
      } else {
        // –î–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥ (INSERT, UPDATE, etc.) –∏—Å–ø–æ–ª—å–∑—É–µ–º REST API
        try {
          const response = await fetch(`${SUPABASE_URL}/rest/v1/rpc/exec_sql`, {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${SUPABASE_SERVICE_KEY}`,
              'Content-Type': 'application/json',
              'apikey': SUPABASE_SERVICE_KEY
            },
            body: JSON.stringify({ sql_query: command })
          })
          
          if (response.ok) {
            console.log(`‚úì –ö–æ–º–∞–Ω–¥–∞ ${i + 1} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
          } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ${i + 1}:`, await response.text())
          }
        } catch (err) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã ${i + 1}:`, err.message)
        }
      }
    }
    
  } catch (error) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    throw error
  }
}

async function createTestData() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—â–µ–ø–∏—Ç–∞ –ê—Å—Ç–∞–Ω—ã...\n')
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º SQL —Ñ–∞–π–ª —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    console.log('üìÅ –ó–∞–≥—Ä—É–∂–∞—é SQL —Ñ–∞–π–ª —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...')
    const sql = await loadSQLFile('create_realistic_test_data.sql')
    
    console.log('üíæ –í—ã–ø–æ–ª–Ω—è—é –≤—Å—Ç–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É...')
    await executeSQL(sql)
    
    console.log('\n‚úÖ –£–°–ü–ï–®–ù–û! –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã:')
    console.log('üë• 15 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (5 —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª–µ–π + 10 —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π)')
    console.log('üè¢ 5 –∑–∞–≤–µ–¥–µ–Ω–∏–π –æ–±—â–µ–ø–∏—Ç–∞ –ê—Å—Ç–∞–Ω—ã')  
    console.log('‚ö° 3 —Å—Ä–æ—á–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏')
    console.log('üíº 3 –æ–±—ã—á–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏')
    console.log('üìÑ 3 —Ä–µ–∑—é–º–µ —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π')
    console.log('üì¨ –û—Ç–∫–ª–∏–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
    
    console.log('\nüåê –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!')
    console.log('üì± –°—Ä–æ—á–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –∞–¥—Ä–µ—Å—É: /urgent')
    console.log('üíª –í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏: /')
    console.log('üë§ –ü—Ä–æ—Ñ–∏–ª–∏ —Å–æ–∏—Å–∫–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Ä–µ–∑—é–º–µ –≥–æ—Ç–æ–≤—ã –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É')
    
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error)
    process.exit(1)
  }
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è PostgreSQL —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
async function createTestDataDirect() {
  console.log('üîÑ –ü—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL...')
  
  const { Client } = require('pg')
  
  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
  const client = new Client({
    host: 'db.your-project.supabase.co', // –ó–ê–ú–ï–ù–ò–¢–ï
    port: 5432,
    database: 'postgres',
    user: 'postgres',
    password: 'your-database-password', // –ó–ê–ú–ï–ù–ò–¢–ï
    ssl: { rejectUnauthorized: false }
  })
  
  try {
    await client.connect()
    console.log('‚úì –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    
    const sql = await loadSQLFile('create_realistic_test_data.sql')
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ—Å—å SQL –∫–∞–∫ –æ–¥–Ω—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await client.query(sql)
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ!')
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:', error)
    throw error
  } finally {
    await client.end()
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  console.log('üéØ –°–û–ó–î–ê–ù–ò–ï –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø')
  console.log('üìç –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –û–±—â–µ–ø–∏—Ç –ê—Å—Ç–∞–Ω—ã')
  console.log('üóìÔ∏è  –î–∞—Ç–∞:', new Date().toLocaleString('ru-RU'))
  console.log('‚îÄ'.repeat(50))
  
  // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ Supabase API
  createTestData()
    .catch(async (error) => {
      console.log('\nüîÑ –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π...')
      try {
        await createTestDataDirect()
      } catch (directError) {
        console.error('\nüí• –í—Å–µ –º–µ—Ç–æ–¥—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏!')
        console.error('–û—Å–Ω–æ–≤–Ω–∞—è –æ—à–∏–±–∫–∞:', error.message)
        console.error('–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –æ—à–∏–±–∫–∞:', directError.message)
        console.log('\nüìã –ò–ù–°–¢–†–£–ö–¶–ò–Ø –î–õ–Ø –†–£–ß–ù–û–ì–û –í–´–ü–û–õ–ù–ï–ù–ò–Ø:')
        console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ Supabase Dashboard')
        console.log('2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ SQL Editor')
        console.log('3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ create_realistic_test_data.sql')
        console.log('4. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL –∫–æ–º–∞–Ω–¥—ã')
        process.exit(1)
      }
    })
}

module.exports = {
  createTestData,
  createTestDataDirect
}
