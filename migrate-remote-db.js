#!/usr/bin/env node

// migrate-remote-db.js - –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–π Supabase –ë–î
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Service Role Key –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

const { createClient } = require('@supabase/supabase-js')
const fs = require('fs')
const path = require('path')

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–π –ë–î
const SUPABASE_URL = 'https://kuyudpxqlrinkcxvorom.supabase.co'
// Service Role Key –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Supabase Dashboard -> Settings -> API
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_KEY

if (!SUPABASE_SERVICE_KEY) {
  console.error('‚ùå SUPABASE_SERVICE_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
  console.log('–ü–æ–ª—É—á–∏—Ç–µ Service Role Key –∏–∑ Supabase Dashboard -> Settings -> API')
  console.log('–ó–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ: SUPABASE_SERVICE_KEY=your_key node migrate-remote-db.js')
  process.exit(1)
}

// –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
})

async function checkConnection() {
  console.log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...')
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
    const { data, error } = await supabase
      .from('user_profiles')
      .select('count', { count: 'exact', head: true })
    
    if (error && error.code !== 'PGRST116') { // 'PGRST116' - —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–Ω–æ—Ä–º–∞–ª—å–Ω–æ)
      throw error
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
    return true
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message)
    return false
  }
}

async function listExistingTables() {
  console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü...')
  
  try {
    const { data, error } = await supabase.rpc('get_schema_tables')
    
    if (error) {
      // –ï—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å
      const { data: tables, error: tablesError } = await supabase
        .from('information_schema.tables')
        .select('table_name')
        .eq('table_schema', 'public')
      
      if (tablesError) {
        console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü, –Ω–æ —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–æ–≤–æ–π –ë–î')
        return []
      }
      
      return tables?.map(t => t.table_name) || []
    }
    
    return data || []
  } catch (error) {
    console.log('‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü:', error.message)
    return []
  }
}

async function executeMigration(migrationPath) {
  const migrationName = path.basename(migrationPath)
  console.log(`\nüîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏: ${migrationName}`)
  
  try {
    const sql = fs.readFileSync(migrationPath, 'utf8')
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–ø–æ —Ç–æ—á–∫–µ —Å –∑–∞–ø—è—Ç–æ–π –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏)
    const commands = sql.split(';').filter(cmd => cmd.trim().length > 0)
    
    for (let i = 0; i < commands.length; i++) {
      const command = commands[i].trim() + ';'
      
      if (command === ';') continue
      
      try {
        const { error } = await supabase.rpc('exec_sql', { sql_command: command })
        
        if (error) {
          // –ü–æ–ø—Ä–æ–±—É–µ–º –ø—Ä—è–º–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
          const { error: directError } = await supabase.from('_').select().limit(0)
          // –≠—Ç–æ—Ç —Ç—Ä—é–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –ø–æ–∫–∞–∂–µ—Ç –æ—à–∏–±–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
          
          console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ${i + 1}:`, error.message)
          console.log('–ö–æ–º–∞–Ω–¥–∞:', command.substring(0, 100) + '...')
          
          // –î–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ—à–∏–±–æ–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
          if (error.message.includes('already exists') || 
              error.message.includes('does not exist')) {
            console.log('‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º (–æ–±—ä–µ–∫—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω)')
            continue
          }
          
          throw error
        }
      } catch (cmdError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã ${i + 1}:`, cmdError.message)
        throw cmdError
      }
    }
    
    console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è ${migrationName} –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`)
    return true
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏ ${migrationName}:`, error.message)
    return false
  }
}

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–π Supabase –ë–î\n')
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  const connected = await checkConnection()
  if (!connected) {
    process.exit(1)
  }
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
  const existingTables = await listExistingTables()
  if (existingTables.length > 0) {
    console.log('üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:', existingTables.join(', '))
  } else {
    console.log('üìã –¢–∞–±–ª–∏—Ü –ø–æ–∫–∞ –Ω–µ—Ç (–Ω–æ–≤–∞—è –ë–î)')
  }
  
  // –°–ø–∏—Å–æ–∫ –º–∏–≥—Ä–∞—Ü–∏–π –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
  const migrationsDir = path.join(__dirname, 'backend/supabase/migrations')
  const migrationFiles = [
    '20250913120000_create_job_postings_table.sql',
    '20250913121000_create_urgent_jobs_table.sql'
  ]
  
  let successCount = 0
  let totalCount = migrationFiles.length
  
  for (const migrationFile of migrationFiles) {
    const migrationPath = path.join(migrationsDir, migrationFile)
    
    if (!fs.existsSync(migrationPath)) {
      console.log(`‚ö†Ô∏è  –ú–∏–≥—Ä–∞—Ü–∏—è ${migrationFile} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`)
      continue
    }
    
    const success = await executeMigration(migrationPath)
    if (success) {
      successCount++
    }
  }
  
  console.log(`\nüéâ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${successCount}/${totalCount} —É—Å–ø–µ—à–Ω–æ`)
  
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü
  const newTables = await listExistingTables()
  if (newTables.length > existingTables.length) {
    console.log('üìã –ù–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã:', newTables.filter(t => !existingTables.includes(t)).join(', '))
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º
main().catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
  process.exit(1)
})